[
    {
        "id": "d1fff9927ade818b",
        "type": "tab",
        "label": "Linha 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "efdf08540372187c",
        "type": "tab",
        "label": "Enchedora ID:1 - Gargalo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9063753adeaed04a",
        "type": "tab",
        "label": "Envolvedora Pallets ID:2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8149f2bb97277fa5",
        "type": "tab",
        "label": "Celula Robopal ID:3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "68278b12c5824bc7",
        "type": "tab",
        "label": "EMF - ID:4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "319fb18efb4d6325",
        "type": "tab",
        "label": "CFE - ID:5",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d7706bceda63881b",
        "type": "tab",
        "label": "GFX ID:6",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f7ad05cac9ca67b4",
        "type": "tab",
        "label": "ROTULADORA FRASCOS ID:7",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "63695bbdb69c560b",
        "type": "tab",
        "label": "Aplicadora ID:8",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "04fcefe29c2617e4",
        "type": "group",
        "z": "d1fff9927ade818b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ea8afcc239b28dd7",
            "ee7838d7a20c8f65",
            "68a52ff7a0a691c5",
            "396be83b812f71d8",
            "774df679f4584486",
            "3bb8b9750a7bc532",
            "7429edf4bc291f91"
        ],
        "x": 74,
        "y": 739,
        "w": 1212,
        "h": 182
    },
    {
        "id": "f1fc4f7316aa0a2f",
        "type": "group",
        "z": "d1fff9927ade818b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "346448f2406d5b08",
            "a44ff24d100d2b3f",
            "4e9444a5391280ff",
            "374169fd17aea61c",
            "075727f4d902792f",
            "720e1bde13c3485b"
        ],
        "x": 74,
        "y": 519,
        "w": 832,
        "h": 182
    },
    {
        "id": "6302fc7725be0c11",
        "type": "group",
        "z": "d1fff9927ade818b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9e17132e9c449484",
            "e5440bb7278726a8",
            "1ca1024892ec6a70"
        ],
        "x": 94,
        "y": 39,
        "w": 822,
        "h": 82
    },
    {
        "id": "21228762e549f159",
        "type": "group",
        "z": "d1fff9927ade818b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5b2ca5117e3c4f52"
        ],
        "x": 68,
        "y": 113,
        "w": 1524,
        "h": 374
    },
    {
        "id": "80be69b542072bc7",
        "type": "group",
        "z": "efdf08540372187c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "904b38dffa122e21",
            "bd60d75fd19326b9",
            "1a6c23d3d7293ec1",
            "c84da0368b3ff481",
            "310dbdb550901fbc",
            "c6a703f4ea86a561",
            "d3953d7556dfe589",
            "7bf7eed408d332bc",
            "139bf18b0547e988",
            "f75766599cc83025",
            "78f57291b3eff84f",
            "02b38b950d164ec6",
            "9e25e428f249983c",
            "76a957f658ac723b",
            "0a957346d34ec9b0",
            "694a2dec03617d65"
        ],
        "x": 34,
        "y": 19,
        "w": 1132,
        "h": 348
    },
    {
        "id": "a20be756120cb6cd",
        "type": "group",
        "z": "efdf08540372187c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "024210e29ff41771",
            "6fbfd38d79576c9d",
            "36e0a8d93e168eca",
            "9fac6a3acf5a6c7d",
            "4416956ce4d8ab76",
            "5aad9b6400357313",
            "035d91433855b845",
            "9edf498d12953cec",
            "e44ddcc86370dbeb",
            "e4cf9531ea2faaad",
            "eb0a2148f0ff442c",
            "532317e4f0ba9397"
        ],
        "x": -12,
        "y": 367,
        "w": 3024,
        "h": 2100
    },
    {
        "id": "30ab8418bdc5a930",
        "type": "group",
        "z": "efdf08540372187c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fa80d776e95b20c4",
            "53d44cbaa73be8dc",
            "6e17612af0486269",
            "90fe4cedc0a487c0",
            "54d7ddbf7c894ec5",
            "de81a866c61723b5",
            "57efd2d0242790c1",
            "a215a88a4fbea9c9",
            "119ce049b305a8ed"
        ],
        "x": 1234,
        "y": 19,
        "w": 1252,
        "h": 202
    },
    {
        "id": "d509d53b91bda2ba",
        "type": "group",
        "z": "d1fff9927ade818b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5427299f5fb772b1",
            "19a773bc7bdb74a2",
            "221b3f6d2bd4f0ab",
            "e17b681de999ad10",
            "3d44ffd92cb59df2",
            "8453896c5860d555",
            "212fc0710bd54938",
            "1cb0626107b66fbc",
            "987183eb55ae7260",
            "36123713db6f3c4d",
            "10af0ee323e03a03",
            "99cdaa32fe72b645",
            "828061297503db73",
            "4ff471b390126744",
            "5242016086e3cabe",
            "32c79fe930e0d4bd",
            "6ca95b63d88d6f6c",
            "909e933bb3c38fa6"
        ],
        "x": 1714,
        "y": 879,
        "w": 1332,
        "h": 522
    },
    {
        "id": "6a6de055d2b62282",
        "type": "group",
        "z": "d1fff9927ade818b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5b02aee1cb72cfcd",
            "af5e1d892c789bc5",
            "3ec6d99c361d6142",
            "d6dd8b673dc013f1",
            "b4f561cfc8c3d67e",
            "734dd80c12230ee6",
            "a4f30895bf48990b",
            "6de41d1f47b3b404",
            "15e0eda50f9edbc8"
        ],
        "x": 1714,
        "y": 539,
        "w": 1792,
        "h": 182
    },
    {
        "id": "6e2695762a84bff2",
        "type": "group",
        "z": "9063753adeaed04a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1e640f5c3bfcfa51",
            "d7346c542a2ff6c0",
            "7075595efe4ffad0",
            "93ed1c8e26c4a2df",
            "8f29cebc30eb13a1",
            "e6ddaf0ca992fbf9",
            "d9200338c7771585",
            "81ddf1839c7c21f6",
            "d28aaa8528f140fe",
            "2ddc9e90622be922",
            "43d25837214b40ec",
            "bd8b4378c391e95e",
            "f9fa8487358a0559",
            "df743026bca5940e",
            "e52ad49b4bd23f12",
            "1002ba0a1a09732b"
        ],
        "x": 28,
        "y": 19,
        "w": 1138,
        "h": 348
    },
    {
        "id": "2f78077adae6b21a",
        "type": "group",
        "z": "9063753adeaed04a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "bf873b1a91276807",
            "88bf93e95e7e42d5",
            "4093c33ac4d2ade3",
            "4faeae360b4dc114",
            "f63963f02b960014",
            "65424dc5934d4cf3",
            "179c234eb021281d"
        ],
        "x": 28,
        "y": 653,
        "w": 2984,
        "h": 1454
    },
    {
        "id": "40d038f0a15888f0",
        "type": "group",
        "z": "9063753adeaed04a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6e0751f8ead1a525",
            "da5fe2e1e07c9e63",
            "5cbbccc3f9ec8cfa",
            "5b770ca6dea7cf38",
            "76b8fa3af4463840",
            "3158a8dd942d5e14",
            "5610619081cbede9",
            "a86a734c417b3ef9",
            "9e7883a9d622b9e9"
        ],
        "x": 1234,
        "y": 19,
        "w": 1132,
        "h": 202
    },
    {
        "id": "6ebe228893194f88",
        "type": "group",
        "z": "8149f2bb97277fa5",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0d2122c2dfe6b16f",
            "f27ed33f1ae61e1b",
            "eaf30982cf019a6f",
            "fbf952bf2bcc4709",
            "1887c720fd51e8e2",
            "1535bae7d56cbc0b",
            "6262fd62991761a7",
            "73d553be1f51f346",
            "0211ef5c159646ab",
            "eda9634d7f289d80",
            "a0f1bf3d08b44819",
            "08409c32f4bf7116",
            "942cd52f330999ba",
            "e8d9e95c6f28a184",
            "da1b12806d401636"
        ],
        "x": 34,
        "y": 19,
        "w": 1132,
        "h": 342
    },
    {
        "id": "20c28ca51f1a8dc6",
        "type": "group",
        "z": "8149f2bb97277fa5",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "13d8c5a535d80129",
            "c34a4f02c73f1276",
            "3a68b2a802a75264",
            "9a1d6ca184b4cc04",
            "578e1ea5e2a32724",
            "0b369b95b58f3b51",
            "af2d927aeb5ecfc5",
            "19a5be4e42605f8a"
        ],
        "x": 34,
        "y": 653,
        "w": 2978,
        "h": 1454
    },
    {
        "id": "6626fcb850d0c186",
        "type": "group",
        "z": "8149f2bb97277fa5",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4e21a76ea6fb4b2f",
            "663397ca93c857ed",
            "d01af5d2430f6a5c",
            "763491603c44df28",
            "b8609d1df8811e6d",
            "ff08c9a381949bfe",
            "fbe5e56b856324a9",
            "cb95e6df842fb012",
            "c62d0e5bda26edaa"
        ],
        "x": 1234,
        "y": 19,
        "w": 1132,
        "h": 202
    },
    {
        "id": "03f5365aa1ec1302",
        "type": "group",
        "z": "8149f2bb97277fa5",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "073e49eff67162b0",
            "1e7d64275a3112de",
            "44cc6e735cdbdd5f"
        ],
        "x": 54,
        "y": 299,
        "w": 572,
        "h": 82
    },
    {
        "id": "bae89ab498b0f1b4",
        "type": "group",
        "z": "9063753adeaed04a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "61bf4bdba1a6aef5",
            "e65485a90b4b9e18",
            "8a5b79d428b2a842",
            "06f760473549990e"
        ],
        "x": 554,
        "y": 2359,
        "w": 1472,
        "h": 82
    },
    {
        "id": "403f43560d78e20d",
        "type": "group",
        "z": "8149f2bb97277fa5",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4f88d0d3fed95da8",
            "0f78254b3422b84b",
            "a7d14a2d3a1bad24",
            "379b7d63be809392"
        ],
        "x": 534,
        "y": 2319,
        "w": 1472,
        "h": 82
    },
    {
        "id": "716a4d023e425b37",
        "type": "group",
        "z": "d1fff9927ade818b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "121e5d911f03a762",
            "587c61f46b21522d",
            "f968db3217db8c9e",
            "74f2524deec6ab04",
            "64e6df6916e662b9",
            "0fbabc417d5a7829",
            "f01214a631fe1410"
        ],
        "x": 74,
        "y": 1039,
        "w": 992,
        "h": 222
    },
    {
        "id": "db0bd6a312bafc0d",
        "type": "group",
        "z": "d1fff9927ade818b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "48071cb3df6aebdd",
            "7557533278506311",
            "ae380454c80493a0",
            "72e5b3fe9c868e73",
            "98ff909b744b27f6",
            "615e1f011ffb0b71",
            "5fbf2026d1b283d1",
            "31d753b6c2f98a0f"
        ],
        "x": 74,
        "y": 1279,
        "w": 1332,
        "h": 402
    },
    {
        "id": "94a6e38106e0a8e3",
        "type": "group",
        "z": "68278b12c5824bc7",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6b0f017fa48f26df",
            "d224ab4ca4f54c73",
            "6d810a236b345cf7"
        ],
        "x": 54,
        "y": 59,
        "w": 572,
        "h": 82
    },
    {
        "id": "b685f7f94ef63fe6",
        "type": "group",
        "z": "63695bbdb69c560b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "22c36b82dcf97662",
            "9468ae7d0b8ebe13",
            "78ec60f92860c93d"
        ],
        "x": 54,
        "y": 59,
        "w": 652,
        "h": 82
    },
    {
        "id": "001c5e758ddbe87a",
        "type": "group",
        "z": "63695bbdb69c560b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a70fd5c23a077e47",
            "77bd64a1c393b6ba",
            "50f7d195c76ca2be",
            "8662194735015a0b",
            "1d64cd13264e87dc",
            "d208d704f82d0491",
            "b2b8da4a1ccd565f"
        ],
        "x": 114,
        "y": 573,
        "w": 2978,
        "h": 1454
    },
    {
        "id": "3ecfe0897db45215",
        "type": "group",
        "z": "63695bbdb69c560b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0407af19b5d68332",
            "6d770953700287f9",
            "28a2b103a33ef7d9",
            "ac0529bdfb3bc11c",
            "28d5dfe14b3cd92e",
            "397dc81d0d405877",
            "cb64f3e3d730c88a",
            "d602aeceb1b7e529",
            "b5b373566f7d7a9d"
        ],
        "x": 1234,
        "y": 119,
        "w": 1132,
        "h": 202
    },
    {
        "id": "61b4b1488485fb35",
        "type": "group",
        "z": "63695bbdb69c560b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ae17c7aedbc87db4",
            "53558d1d247cf6b3",
            "5cc5aeb27ac3a346",
            "40d19a73c2ff508a"
        ],
        "x": 354,
        "y": 2299,
        "w": 1472,
        "h": 82
    },
    {
        "id": "e8fdd317acd55e27",
        "type": "group",
        "z": "68278b12c5824bc7",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "16f692182b8c2f08",
            "2548135d9ef9020a",
            "f9aa50c745e2f4e2",
            "f34984f444c5cc66",
            "cd50696818449a4f",
            "18bd3889a6d95392",
            "c1a2691e8bbb7024"
        ],
        "x": 154,
        "y": 673,
        "w": 2978,
        "h": 1454
    },
    {
        "id": "ffc98449a1b25d57",
        "type": "group",
        "z": "68278b12c5824bc7",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "19b4bf4214586831",
            "8aa972b5d76a4b79",
            "f48003bdde34ad13",
            "651f67005308f602",
            "e98cd21bbf1cce5b",
            "829beebf4be8c6c4",
            "25cebf99ba20add7",
            "198bd67a8e504932",
            "7734d4b288c62f06"
        ],
        "x": 1114,
        "y": 179,
        "w": 1132,
        "h": 202
    },
    {
        "id": "589a8790198405ba",
        "type": "group",
        "z": "68278b12c5824bc7",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9be64fbde9c860b2",
            "9bfd43d9daaff4dd",
            "a15ff84c9690ea6a",
            "066f5e8d507b4cda"
        ],
        "x": 534,
        "y": 2619,
        "w": 1472,
        "h": 82
    },
    {
        "id": "736f2b50da7194b0",
        "type": "group",
        "z": "319fb18efb4d6325",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f310c7dd5873c5c3",
            "2ed9d39c6c54cc67",
            "db4a5cc9f38ce088"
        ],
        "x": 114,
        "y": 39,
        "w": 572,
        "h": 82
    },
    {
        "id": "c4651e8c9d205b0c",
        "type": "group",
        "z": "319fb18efb4d6325",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "80fd61a231372abe",
            "3d45848f318b6c94",
            "ec9a77749b786146",
            "e995a6044a620412",
            "42e01cbc2c1e335a",
            "9ec3a5729fd2677c",
            "887a1fcb8b0f89cc"
        ],
        "x": 214,
        "y": 653,
        "w": 2978,
        "h": 1454
    },
    {
        "id": "e15de62defa60b84",
        "type": "group",
        "z": "319fb18efb4d6325",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9fe53d7ebcc94d9c",
            "2770fa64cd7ca246",
            "80c1ca38b64246f0",
            "3e90799c6490a404",
            "7c484ab6794aa6ca",
            "a405bbf174d16c8d",
            "4ebd2d10c847f387",
            "933bd68b1678cff7",
            "9dd97e20086c6f3e"
        ],
        "x": 1174,
        "y": 159,
        "w": 1132,
        "h": 202
    },
    {
        "id": "b193acced37e40d0",
        "type": "group",
        "z": "319fb18efb4d6325",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1cb9a42be3f3b307",
            "d0a19e4100730dc5",
            "43ba8b42144fd6d3",
            "442674269723b910"
        ],
        "x": 594,
        "y": 2599,
        "w": 1472,
        "h": 82
    },
    {
        "id": "8970fcc8e08ef1db",
        "type": "group",
        "z": "d7706bceda63881b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "415c52a7f75618f0",
            "19884d9aeee24f9a",
            "19fe3a1df540a3df"
        ],
        "x": 94,
        "y": 79,
        "w": 572,
        "h": 82
    },
    {
        "id": "4175d2a4d29b6925",
        "type": "group",
        "z": "d7706bceda63881b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2e07ea909d7b84f0",
            "b539c42d534251bb",
            "3eb71f34d22c0e97",
            "2d8dda71dd2a71be",
            "17b8b67b398d1da4",
            "e60e336cc5278daa",
            "baf8c1b125ea1fa1"
        ],
        "x": 194,
        "y": 693,
        "w": 2978,
        "h": 1454
    },
    {
        "id": "51b123fd55028ada",
        "type": "group",
        "z": "d7706bceda63881b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "302f2e960dd8ab0d",
            "f3e654c5f816c964",
            "650da1c8fc70489e",
            "d391f55663306a2f",
            "dac1891cd9b437c2",
            "05f803e6fa16a4f4",
            "09844da26b26c05a",
            "a10f574e5e0f7bbe",
            "3baa9ec583f77cf4"
        ],
        "x": 1154,
        "y": 199,
        "w": 1132,
        "h": 202
    },
    {
        "id": "20105f46ed9adc09",
        "type": "group",
        "z": "d7706bceda63881b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e6ff1cf767ea7980",
            "ac1af10f1929cbfb",
            "2b64a7218bcdb9e1",
            "a0193c77de9e16d3"
        ],
        "x": 574,
        "y": 2639,
        "w": 1472,
        "h": 82
    },
    {
        "id": "7021cb46689ee262",
        "type": "group",
        "z": "f7ad05cac9ca67b4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7c47223e84fd486c",
            "ad30206a9338157f",
            "012e0da75c09ac5e"
        ],
        "x": 94,
        "y": 59,
        "w": 572,
        "h": 82
    },
    {
        "id": "8840c09eaff5262e",
        "type": "group",
        "z": "f7ad05cac9ca67b4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7481db3d8e5ec93e",
            "6c57bc432f38aede",
            "3e402b30bacd9d10",
            "c426f54850392346",
            "705bc819b205edc1",
            "c267a35f335af2c4",
            "481344f3aac63db9"
        ],
        "x": 194,
        "y": 673,
        "w": 2978,
        "h": 1454
    },
    {
        "id": "484a492735669b11",
        "type": "group",
        "z": "f7ad05cac9ca67b4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5d374ed49c4e1cca",
            "d4490c31d033ef76",
            "2a5816c1872e0eac",
            "253fe9ac9810b46b",
            "5e700a8b2e42223f",
            "a92fb897fea8b2e9",
            "640c3ec896b5b891",
            "72e74f5712d04bd3",
            "3375b875e63ffb05"
        ],
        "x": 1154,
        "y": 179,
        "w": 1132,
        "h": 202
    },
    {
        "id": "09f36abc8ddd73ab",
        "type": "group",
        "z": "f7ad05cac9ca67b4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "58453b6aa86e88fa",
            "ad51db84bbe6e299",
            "a3de45c801bf6c05",
            "354bd04dc2cc2df4"
        ],
        "x": 574,
        "y": 2619,
        "w": 1472,
        "h": 82
    },
    {
        "id": "4038b5fda3e722e2",
        "type": "group",
        "z": "efdf08540372187c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d38d34395e52158a",
            "6155beca8ac90c6a",
            "61df3ead675a66b4",
            "d4bd4854c7d223b9",
            "f504a92ff8c6b7c3",
            "379eedac62f6364c",
            "a1a2e0ef82e753e6",
            "90a47b07b473049f",
            "7ebfade0124f2bb6",
            "3fcce5d32ca1055c",
            "eb981eae55805c2d"
        ],
        "x": 1494,
        "y": 2599,
        "w": 1372,
        "h": 282
    },
    {
        "id": "1002ba0a1a09732b",
        "type": "group",
        "z": "9063753adeaed04a",
        "g": "6e2695762a84bff2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "36c0cb61a1a3a73d",
            "204363b287930f66",
            "ad001c9270cc1673"
        ],
        "x": 54,
        "y": 259,
        "w": 572,
        "h": 82
    },
    {
        "id": "694a2dec03617d65",
        "type": "group",
        "z": "efdf08540372187c",
        "g": "80be69b542072bc7",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "18a7f665ef4cea5b",
            "37b210f42f14ebd5",
            "4d77c2c68ee9f834"
        ],
        "x": 74,
        "y": 259,
        "w": 572,
        "h": 82
    },
    {
        "id": "035d91433855b845",
        "type": "group",
        "z": "efdf08540372187c",
        "g": "a20be756120cb6cd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fa2f1cd6f1f0cb6f",
            "7bbff6591f41d1d1",
            "4036f4a06b8f8740",
            "95900e409ee961a5",
            "07dbdfff6be73712",
            "471f12bdd9aa1ca9",
            "6922a50cc6b7fade",
            "643e7e1129f458c7",
            "5d5ea873fe77da47",
            "844e9b6450179a8e",
            "77036d9152fb6b26",
            "ed4ab7a8085fafc6",
            "9b6a9f86a218be57",
            "4e59058a1dc05ced",
            "2f73ed9e6dd8dc44",
            "a0352ee4d1777d31",
            "bdfe30c73d6909d5",
            "40aa07c146df5b89",
            "3983ec6785798ea0",
            "8272b84ded03cfce",
            "f4cadb21c090b954"
        ],
        "x": 894,
        "y": 1599,
        "w": 2092,
        "h": 362
    },
    {
        "id": "5b2ca5117e3c4f52",
        "type": "group",
        "z": "d1fff9927ade818b",
        "g": "21228762e549f159",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3f814dca4859cdb3",
            "05a5fea97a44c5de",
            "fb98eb52cd04e578",
            "fd7d07bbcca81351",
            "f19cce1a225b359c",
            "7ae76e2693cc8ce2",
            "3424320c02584975",
            "b24cb1f9a4fb9dd8",
            "112aa369e9fffd80",
            "c6f4c7f3923fa2ab",
            "29c26a215bf7b3a2",
            "15c61e28705ac557",
            "055052ccdf80d444",
            "54fb133d53b33574",
            "d675c43bda4c40a5",
            "35ea7d8e27794ec6",
            "deb7e6b9f37a6922",
            "98ac4afa5cf3a81b",
            "6823d3ceedc2f0be",
            "dac74ea7bd686af0",
            "11e3895db3609d3b"
        ],
        "x": 94,
        "y": 139,
        "w": 1472,
        "h": 322
    },
    {
        "id": "36e0a8d93e168eca",
        "type": "group",
        "z": "efdf08540372187c",
        "g": "a20be756120cb6cd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0d9bfc5aaaaaf6a1",
            "35a9d66b71af8ce6",
            "805bd46265e03770",
            "b8ad4b7884ab360a",
            "da2edc594c7f2e93",
            "d988aca52df7676d",
            "c0655d230138e960",
            "8fc6b85e141b70dd",
            "19cbdb4181db38f6",
            "8c235fd86156d79e",
            "fb972ba32da3d741",
            "6eb4c319d59056c7",
            "8c96db8bf1700990",
            "90fd49340d710eda",
            "2ad1c34864270579"
        ],
        "x": 894,
        "y": 393,
        "w": 1218,
        "h": 468
    },
    {
        "id": "9fac6a3acf5a6c7d",
        "type": "group",
        "z": "efdf08540372187c",
        "g": "a20be756120cb6cd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4189ea1ac08cfe89",
            "885af9fe1a876291",
            "d542ab92164c8982",
            "62120dcb12398297",
            "c4ec9be173f26954",
            "b781c86c0d6d1559",
            "82c20ff581541e75"
        ],
        "x": 894,
        "y": 1179,
        "w": 1438,
        "h": 408
    },
    {
        "id": "4416956ce4d8ab76",
        "type": "group",
        "z": "efdf08540372187c",
        "g": "a20be756120cb6cd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3881ba9c27429672",
            "2b30380c161332a0",
            "fefaed64494b5c15",
            "2b8a6a18d2f8246e",
            "9bf639856ef693d0",
            "059e10caead1c97f",
            "27f50b18f06246f3",
            "76ba6c696481e0b1",
            "785c329bc80e82d0",
            "914c4fd919e76fac",
            "0d9a448ddc4f27c0",
            "3d996fa172a8d99e"
        ],
        "x": 894,
        "y": 879,
        "w": 1412,
        "h": 242
    },
    {
        "id": "5aad9b6400357313",
        "type": "group",
        "z": "efdf08540372187c",
        "g": "a20be756120cb6cd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "00cc58897ce8d661",
            "2b2a64daa13770c5"
        ],
        "x": 254,
        "y": 1059,
        "w": 412,
        "h": 82
    },
    {
        "id": "65424dc5934d4cf3",
        "type": "group",
        "z": "9063753adeaed04a",
        "g": "2f78077adae6b21a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "901c46a4c1c87838",
            "b19cf681a94fbfe8",
            "c598830276fabfcd",
            "99844bc9eb83c843",
            "2cd8f969605e22d0",
            "8dd45892c10afa83",
            "38be4aa70f59ca2f",
            "183892fd2cecca83",
            "e1c39a9b647e838c",
            "602a24c25b2de664",
            "eb92700b8254effb",
            "e4beced3c9231be7",
            "0d6f2d4d5895ebad",
            "21896c84495470b1",
            "9828456fcd425d53",
            "809336a51a7ef547",
            "ecb0d1b9e414f042",
            "b9924f58433b76ad",
            "f0e88d4d2ce38011",
            "2d951c2179c3c646",
            "db264ea208b3416e",
            "1b3ac63b1bca68f7"
        ],
        "x": 894,
        "y": 1719,
        "w": 2092,
        "h": 362
    },
    {
        "id": "4093c33ac4d2ade3",
        "type": "group",
        "z": "9063753adeaed04a",
        "g": "2f78077adae6b21a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "66902439cec4eb3d",
            "492aa1beabacf2c6",
            "1b072f6561ecb68b",
            "94ed20e9f1137568",
            "be1b6e7dcd9fda67",
            "da55900bff16a211",
            "4a59232e7bf4e769",
            "0b8ab66aeb7555a9",
            "8aaaac840932b674",
            "c4feb6eb174b60f3",
            "4e1883cb4326b32c",
            "c744bd20adbcc337",
            "10ccfe054e44d8ab",
            "d4b2e6a7ef84134d"
        ],
        "x": 914,
        "y": 679,
        "w": 1152,
        "h": 382
    },
    {
        "id": "4faeae360b4dc114",
        "type": "group",
        "z": "9063753adeaed04a",
        "g": "2f78077adae6b21a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "995f7971412843d8",
            "9a3f1f128e784937",
            "b7587cde2106aaa8",
            "a1a00ffedd643962",
            "a091ff8d1c0f1be6",
            "7defd8ee9170caeb",
            "e0a206f97c1145a2"
        ],
        "x": 888,
        "y": 1193,
        "w": 1358,
        "h": 408
    },
    {
        "id": "f63963f02b960014",
        "type": "group",
        "z": "9063753adeaed04a",
        "g": "2f78077adae6b21a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "992e14116b8639fc",
            "d6d51a4a9c4e3f5d"
        ],
        "x": 234,
        "y": 1159,
        "w": 432,
        "h": 82
    },
    {
        "id": "af2d927aeb5ecfc5",
        "type": "group",
        "z": "8149f2bb97277fa5",
        "g": "20c28ca51f1a8dc6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "644c8684da712876",
            "e6f2f7ce9dbc410e",
            "40c50b1e48df55f0",
            "5983f2c6be6e5243",
            "704c7fcdd4745e26",
            "6a2d5c8470ecc758",
            "83792730afc5da96",
            "1eabcea3d06141fb",
            "e5388fccd955a857",
            "c6535168095454b3",
            "8ad97d48527e2948",
            "61467aec70b03252",
            "b29763a2924779d7",
            "54f3a38f9e8bd889",
            "52d86797874575c8",
            "b637a38464668924",
            "def2323d332fb5e4",
            "9fc920db6e22d2c6",
            "3ab534a58ad42225",
            "b536304a17545ec0",
            "50d727930116a70b",
            "05e8a385d312e6e4"
        ],
        "x": 894,
        "y": 1719,
        "w": 2092,
        "h": 362
    },
    {
        "id": "3a68b2a802a75264",
        "type": "group",
        "z": "8149f2bb97277fa5",
        "g": "20c28ca51f1a8dc6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "de5ee43edab00781",
            "8c397f90de7b33af",
            "b03e9c7638862827",
            "9cdcdffa6a6defa0",
            "8270dc0916f68678",
            "2fd9978d9166e29e",
            "c12d7b72d6a6c08a",
            "3f29b05d69bc54c9",
            "b2aa7834a0399e9e",
            "c761f26f4bab92fd",
            "e444905bd2d71d7a",
            "ddc87fbc43b79e3e",
            "1e40e2f15f5bdc47",
            "1a5fe91b7fcef20c"
        ],
        "x": 914,
        "y": 679,
        "w": 1152,
        "h": 362
    },
    {
        "id": "9a1d6ca184b4cc04",
        "type": "group",
        "z": "8149f2bb97277fa5",
        "g": "20c28ca51f1a8dc6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a54ef2d4fe5e167b",
            "2280d4f025f20da4",
            "844fe5a3120ff9d6",
            "25fc29838838afd7",
            "7664efad51105ff7",
            "97394c26e1dbc61c"
        ],
        "x": 894,
        "y": 1479,
        "w": 1352,
        "h": 162
    },
    {
        "id": "578e1ea5e2a32724",
        "type": "group",
        "z": "8149f2bb97277fa5",
        "g": "20c28ca51f1a8dc6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e72d08ecd11946ca",
            "01658b55d7c20bfe",
            "3a6eddf5873c834a",
            "3ad6874856fa5f06",
            "22a724b5b8716c18",
            "734674862838ecf2",
            "7201b791b2918688",
            "a846a2be81b7cdd8",
            "ef815fe25f7a5012",
            "4f756e338d3e4a32",
            "c1c39a8a84bf1245"
        ],
        "x": 934,
        "y": 1179,
        "w": 1252,
        "h": 262
    },
    {
        "id": "0b369b95b58f3b51",
        "type": "group",
        "z": "8149f2bb97277fa5",
        "g": "20c28ca51f1a8dc6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "944d724c57981b6b",
            "b553f6944010a3b1"
        ],
        "x": 234,
        "y": 1159,
        "w": 432,
        "h": 82
    },
    {
        "id": "9edf498d12953cec",
        "type": "group",
        "z": "efdf08540372187c",
        "g": "a20be756120cb6cd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6323af1c002b6765",
            "3b0431247e75142e",
            "61730b840fed31d0",
            "b7fe870146adb11e",
            "7c3f7258f49fd537",
            "fff8125f3e4c460f",
            "254c8b5101e67a73"
        ],
        "x": 894,
        "y": 1999,
        "w": 1312,
        "h": 142
    },
    {
        "id": "e44ddcc86370dbeb",
        "type": "group",
        "z": "efdf08540372187c",
        "g": "a20be756120cb6cd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a0c937f8f347a78b",
            "6809a0c9911c6e55",
            "180a75ec0a227215",
            "b8f2656dd7beb037"
        ],
        "x": 894,
        "y": 2359,
        "w": 1472,
        "h": 82
    },
    {
        "id": "50f7d195c76ca2be",
        "type": "group",
        "z": "63695bbdb69c560b",
        "g": "001c5e758ddbe87a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4f5ad93377cd77c4",
            "bc66b1123110fa7e",
            "4478ec2bd5aefe0b",
            "49382970cc8de5cd",
            "e4a683d21a7b7af7",
            "99b713b6e462d657",
            "b6859ea46214fb1b",
            "ffa87f66c72364e0",
            "d8214967b0ad53b9",
            "a3ae5cc6e7e2dfa1",
            "9357aa87e0e50d93",
            "3d82b1f73106e66c",
            "856a0a412b6139fd",
            "b5d7e3b2df25f84c",
            "8c17a3e5394074c0",
            "42d4d117caa7f391",
            "cfaa607bf0a50867",
            "87aa67e30c3cdd8e",
            "2bf899289c26d22a",
            "8c232fb6b3cc1e99",
            "05fefa6e42a60890",
            "eb2e0512cea60c0e",
            "7be1b336c5543d29",
            "b15f3a842b21ef8a",
            "801286379f081907",
            "e3a9e8136178c7a0"
        ],
        "x": 994,
        "y": 599,
        "w": 1852,
        "h": 402
    },
    {
        "id": "8662194735015a0b",
        "type": "group",
        "z": "63695bbdb69c560b",
        "g": "001c5e758ddbe87a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6b38a6eedcaba546",
            "3cc6cc2d39f21eb1",
            "31c79b238f737f9b",
            "a7ad225c928b0411",
            "f27627600997d6c6",
            "3dabc7b70a1e01c7",
            "5c839d8c4783654c"
        ],
        "x": 968,
        "y": 1113,
        "w": 1358,
        "h": 408
    },
    {
        "id": "1d64cd13264e87dc",
        "type": "group",
        "z": "63695bbdb69c560b",
        "g": "001c5e758ddbe87a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0d7501b11ceede8e",
            "699460bcf6f1d161"
        ],
        "x": 314,
        "y": 1079,
        "w": 432,
        "h": 82
    },
    {
        "id": "d208d704f82d0491",
        "type": "group",
        "z": "63695bbdb69c560b",
        "g": "001c5e758ddbe87a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8671fdc594a696f6",
            "b41e7307a9895ae8",
            "e135d81be222e084",
            "ac16f4208291e06c",
            "5a6f67a824513af8",
            "a24370e5199311a6",
            "8d65a65c10aff41d",
            "81cbf4d152a131c0",
            "419d7db91ef40770",
            "ca023ebe4e22c8e4",
            "42692fcffd6b83fb",
            "febcacdf51e33ffc",
            "acb48dd64de6d199",
            "4b9c82b444ccbe24",
            "1a99b7ebee27c22b",
            "677436f6092c1f4a",
            "67edac93c4fae8a0",
            "f4ae56a830bc3607",
            "dc550227573dd72b",
            "78827966e41b9ee0",
            "8efe442c912879d4",
            "b29e83a809198510"
        ],
        "x": 974,
        "y": 1639,
        "w": 2092,
        "h": 362
    },
    {
        "id": "f9aa50c745e2f4e2",
        "type": "group",
        "z": "68278b12c5824bc7",
        "g": "e8fdd317acd55e27",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f877a8ac960b371a",
            "35a4f72d0afa9578",
            "d8e9183cf3e16249",
            "d489ca115d3f6ff5",
            "e5ecfb095b2d8dfc",
            "a163151c55ec1c15",
            "08da07a02b0cf5b8",
            "1ccacca01cec23fa",
            "807b93776c1fc555",
            "d9b28d2f5168a6a7",
            "c00bd37644199494",
            "423bf46b815ea958",
            "f340bf8561fe993d",
            "4cfe82190299d2cd",
            "04df31cf8689d536",
            "873a9feedd2a38e9",
            "9954f0d6b5b400f5",
            "45615a39c26f085d",
            "178a788d6a7c7787"
        ],
        "x": 1034,
        "y": 699,
        "w": 1472,
        "h": 382
    },
    {
        "id": "f34984f444c5cc66",
        "type": "group",
        "z": "68278b12c5824bc7",
        "g": "e8fdd317acd55e27",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "43a3187a49057982",
            "270ecf6f6f38dcee",
            "b6539cbaad910663",
            "53de667c9b12c39a",
            "e35e8cc0fa707bef",
            "1f4e209b4fc89b69",
            "6d2667296f699c9e"
        ],
        "x": 1008,
        "y": 1213,
        "w": 1358,
        "h": 408
    },
    {
        "id": "cd50696818449a4f",
        "type": "group",
        "z": "68278b12c5824bc7",
        "g": "e8fdd317acd55e27",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "848928f92c638e48",
            "631d5f90bda29715"
        ],
        "x": 354,
        "y": 1179,
        "w": 432,
        "h": 82
    },
    {
        "id": "18bd3889a6d95392",
        "type": "group",
        "z": "68278b12c5824bc7",
        "g": "e8fdd317acd55e27",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f0f4587f06adfbba",
            "3faae4bb1b49b5aa",
            "5da7cda6f7d54716",
            "c8c0486aa8de5c92",
            "0bf52cb0b53711ab",
            "c53241b9d2b701af",
            "0327c453d9c60bfc",
            "d21fc64dd6eff661",
            "9c28a4bb59ffbf4d",
            "1080b6a8f47c1151",
            "3f6687fa34eafaa8",
            "3e9e97f589c40768",
            "288501a6509434bd",
            "22ceb656f1f8d740",
            "fb7177e6ee0754c5",
            "7385aea507438bdf",
            "03dcd04c1b46bf41",
            "78f55297f2908d5c",
            "e7705aeb3b48efda",
            "2c41259399ab18ad",
            "660f1f2badbe7dd4",
            "0b0c7ad0b01de53f"
        ],
        "x": 1014,
        "y": 1739,
        "w": 2092,
        "h": 362
    },
    {
        "id": "ec9a77749b786146",
        "type": "group",
        "z": "319fb18efb4d6325",
        "g": "c4651e8c9d205b0c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ce382d89dee0f724",
            "85542c2391974ffb",
            "c105d906cc490168",
            "d0e14c2c2b49113b",
            "5fa60eb004aef0fa",
            "4a6634c2c9556b0f",
            "515fee18102cc071",
            "25acaa86aaad2f48",
            "aed22d99a3adea71",
            "1b98ec05484935b0",
            "1905050896f7e5fe",
            "0e35c078b7581f79",
            "61d399554e63b05f",
            "80b7b33ff5052321",
            "84202b3f42773fb5",
            "eeec2d89a85644d6",
            "cc39ba1eccc3a527"
        ],
        "x": 1094,
        "y": 679,
        "w": 1312,
        "h": 382
    },
    {
        "id": "e995a6044a620412",
        "type": "group",
        "z": "319fb18efb4d6325",
        "g": "c4651e8c9d205b0c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3208dd1976df4629",
            "7425c1c096eedf30",
            "d04c9c8b024595b5",
            "db3d7a9db77fd529",
            "8530e4fd3c4b7d89",
            "098a4b6769b9f569",
            "fa6d40b45b4669bf"
        ],
        "x": 1068,
        "y": 1193,
        "w": 1358,
        "h": 408
    },
    {
        "id": "42e01cbc2c1e335a",
        "type": "group",
        "z": "319fb18efb4d6325",
        "g": "c4651e8c9d205b0c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5e7af0fce65ce6f4",
            "514405e715a7c538"
        ],
        "x": 414,
        "y": 1159,
        "w": 432,
        "h": 82
    },
    {
        "id": "9ec3a5729fd2677c",
        "type": "group",
        "z": "319fb18efb4d6325",
        "g": "c4651e8c9d205b0c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "890ebc7b98db4659",
            "547362e0f9530458",
            "ded9d484f676e653",
            "e413375ec6005573",
            "79a3848c57fe8ec9",
            "a4a20651b24b808a",
            "f8100bef9a5c2f7f",
            "47fd2d43bed8df85",
            "0958cd207c59a124",
            "c8857578e49c292f",
            "3223c28d25bd2cea",
            "6518c92d729e7ab2",
            "382bc50a7f460c74",
            "e7ef33bb136cf826",
            "67712da339f498a9",
            "3f55b40ca968d2f8",
            "506098072633bb4a",
            "9d852e60971392a2",
            "5ac500946bb414f8",
            "183e76213aae0d79",
            "eb2b11a8b21abb6a",
            "c8f6770585391763"
        ],
        "x": 1074,
        "y": 1719,
        "w": 2092,
        "h": 362
    },
    {
        "id": "3eb71f34d22c0e97",
        "type": "group",
        "z": "d7706bceda63881b",
        "g": "4175d2a4d29b6925",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b05feb9ea38e71d0",
            "2d685a62e8769b82",
            "ef428a25184341a0",
            "ea22308fadaf976b",
            "8ac4a49883b45f44",
            "fa0c9c27bcb6e8f4",
            "f7240f0995d6f63f",
            "e898b054e863a2eb",
            "ce4af9ed644479d9",
            "e7561277ed0e0876",
            "0e142747d7455984",
            "5851d8826a3c7f93",
            "a365587f6581ce4a",
            "1d235c3620555e6d",
            "c22980678c8f7447",
            "19690ab9c2cf4c65",
            "9619157655680de2"
        ],
        "x": 1074,
        "y": 719,
        "w": 1732,
        "h": 382
    },
    {
        "id": "2d8dda71dd2a71be",
        "type": "group",
        "z": "d7706bceda63881b",
        "g": "4175d2a4d29b6925",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "67932e2aa14376dd",
            "20b42cb85f9e6b68",
            "ad680ad5076950ec",
            "d1a72279831373ed",
            "78cd47ba2f1a9fec",
            "22732d4fcad62924",
            "29235146aaeaad26"
        ],
        "x": 1048,
        "y": 1233,
        "w": 1358,
        "h": 408
    },
    {
        "id": "17b8b67b398d1da4",
        "type": "group",
        "z": "d7706bceda63881b",
        "g": "4175d2a4d29b6925",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6ba5733aceef5cd5",
            "91586a3b8afe8a21"
        ],
        "x": 394,
        "y": 1199,
        "w": 432,
        "h": 82
    },
    {
        "id": "e60e336cc5278daa",
        "type": "group",
        "z": "d7706bceda63881b",
        "g": "4175d2a4d29b6925",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "99bd749883f0803c",
            "5b7fec65e0cb9c31",
            "8243fac51c73a63b",
            "50fc7c9df9033c54",
            "6dc006b1560315e3",
            "32d7af415ceca6de",
            "fae78840b378abaa",
            "0ec5606521d16b2b",
            "3a354e6d4de0dae4",
            "120096e760cde1ec",
            "450e695fc9cf1ae4",
            "c8be0a636776740b",
            "4ea2dedb49b68fb4",
            "dd943e6d955d1318",
            "5d3bae718d314d77",
            "0424c7f0d9a287e6",
            "7309f4e8e55988dc",
            "4ef3fa45523d4321",
            "d26c2c618189cc28",
            "691932e073d1dd02",
            "f9d688140382310b",
            "b996764091eab5fb"
        ],
        "x": 1054,
        "y": 1759,
        "w": 2092,
        "h": 362
    },
    {
        "id": "3e402b30bacd9d10",
        "type": "group",
        "z": "f7ad05cac9ca67b4",
        "g": "8840c09eaff5262e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c856c3be1a85643a",
            "406e92e2e4d91202",
            "86b857a048e0644b",
            "b5d73578be3d0328",
            "e408166c53bfd320",
            "37a178fbea1dfc9c",
            "8d58b4ab428063b0",
            "b17a672b5657d934",
            "d0bdcdd7ae4538e0",
            "e34ccf4c0c60ceb9",
            "691eedf3851b2575",
            "5ce217493306291a",
            "6229d4b53a5d4cbf"
        ],
        "x": 1074,
        "y": 699,
        "w": 1152,
        "h": 382
    },
    {
        "id": "c426f54850392346",
        "type": "group",
        "z": "f7ad05cac9ca67b4",
        "g": "8840c09eaff5262e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f34a285d11a5b1e1",
            "3716e6829264aaec",
            "acd440088a24d46f",
            "f645c744cdadd93d",
            "a97184bb542b1272",
            "330edf77db2f922c",
            "7c97cedd515a1119"
        ],
        "x": 1048,
        "y": 1213,
        "w": 1358,
        "h": 408
    },
    {
        "id": "705bc819b205edc1",
        "type": "group",
        "z": "f7ad05cac9ca67b4",
        "g": "8840c09eaff5262e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "986389cf83d02b1e",
            "b43ad4168df75421"
        ],
        "x": 394,
        "y": 1179,
        "w": 432,
        "h": 82
    },
    {
        "id": "c267a35f335af2c4",
        "type": "group",
        "z": "f7ad05cac9ca67b4",
        "g": "8840c09eaff5262e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b609ac669f885119",
            "40f7c21d022971d4",
            "5ccdcefcf2d61c67",
            "b180622bc037e810",
            "29855c18b5b9a3a0",
            "7a65b17a666a8cae",
            "5e6bc4f9effdb8ca",
            "b799046835a24eaf",
            "fa2870091bd5f90e",
            "79d3fcf53a8feef4",
            "eb25355057b0ba69",
            "95eec54cd7e4e2a1",
            "0dea3e7d36721322",
            "5974b17b9aa844f6",
            "34c6b311a2735348",
            "0304080e0beef1b1",
            "8f9c69863ab6244e",
            "c633ef4863f65a1c",
            "072a80763e493c06",
            "81913956ac1124a5",
            "6e557644845cf499",
            "5af5da13384164e5"
        ],
        "x": 1054,
        "y": 1739,
        "w": 2092,
        "h": 362
    },
    {
        "id": "532317e4f0ba9397",
        "type": "group",
        "z": "efdf08540372187c",
        "g": "a20be756120cb6cd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a96b1b2ddd6fbcdf",
            "26c323568ce9b735",
            "fdedbeec0bcfeb57",
            "dd3e50eecc1f178e",
            "3673cbe35e88ddc7",
            "fe2faa621a2610d9",
            "501d74f4edc2e3a0",
            "7f4bd91c0c30504d",
            "bc43ab727d89e1cf",
            "5f84dbbaf9c028a9"
        ],
        "x": 14,
        "y": 1299,
        "w": 832,
        "h": 302
    },
    {
        "id": "179c234eb021281d",
        "type": "group",
        "z": "9063753adeaed04a",
        "g": "2f78077adae6b21a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "bfc928f72bf9e753",
            "b4e214b340d60b58",
            "0a7cfc064ed78482",
            "20f168cd2c974463",
            "3e3a7f4521cee0c0",
            "50f9bf3a8b09a786",
            "df87dc68a1cbe8c9",
            "b2de4dc9ec93b8bc",
            "13dafc203bfb9604",
            "48c3440d04b95f2f"
        ],
        "x": 54,
        "y": 1519,
        "w": 872,
        "h": 282
    },
    {
        "id": "19a5be4e42605f8a",
        "type": "group",
        "z": "8149f2bb97277fa5",
        "g": "20c28ca51f1a8dc6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "71ad0b171f2001ec",
            "729f90d525f87fd2",
            "6fba1d154dcb4ee9",
            "597b3eb836277812",
            "8859322a3b58fd1e",
            "336509538719a5c3",
            "93d311b5a8147e76",
            "36323858272e53b5",
            "68b4474febf08f34",
            "d80e68d50cd91f97"
        ],
        "x": 64,
        "y": 1439,
        "w": 832,
        "h": 222
    },
    {
        "id": "c1a2691e8bbb7024",
        "type": "group",
        "z": "68278b12c5824bc7",
        "g": "e8fdd317acd55e27",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "62e69c4ed64ebaec",
            "a4d2fd7147254444",
            "2aea641302ed5c27",
            "f99e8b3d9c91449f",
            "19ddf5768dc397e4",
            "2d9c668874aab8f0",
            "8adbbba4f292ad1c",
            "69dd7f600b1a3a9d",
            "6d31f928d583617c",
            "b606b20c6f3793ba"
        ],
        "x": 204,
        "y": 1499,
        "w": 832,
        "h": 222
    },
    {
        "id": "887a1fcb8b0f89cc",
        "type": "group",
        "z": "319fb18efb4d6325",
        "g": "c4651e8c9d205b0c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fb0dfef5d75edb82",
            "e2f8face4659b7d8",
            "e13ff83d45712ac6",
            "88ed49018548ceb3",
            "317a4a6ef811de46",
            "9f6820aad0275b93",
            "0e1316e2ab8c6a8b",
            "4320661dbc4c4892",
            "d22f0e55f0038195",
            "4a18b37691b8aa3c"
        ],
        "x": 244,
        "y": 1499,
        "w": 832,
        "h": 222
    },
    {
        "id": "baf8c1b125ea1fa1",
        "type": "group",
        "z": "d7706bceda63881b",
        "g": "4175d2a4d29b6925",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "039225e75d42ae12",
            "43be88e24058cec5",
            "20cd20c8287d8b01",
            "501e9604c0df70b6",
            "846a7e9efd2debf6",
            "24e3d9510a3deab2",
            "ed800fc2289734c1",
            "213ef1a17f95fe8b",
            "3daf074a4e9c4eea",
            "dd93fa16d07eddb0"
        ],
        "x": 234,
        "y": 1559,
        "w": 832,
        "h": 222
    },
    {
        "id": "481344f3aac63db9",
        "type": "group",
        "z": "f7ad05cac9ca67b4",
        "g": "8840c09eaff5262e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6bba61499e9c64a4",
            "c409dc4efd8c8ec8",
            "d321020b76e933dc",
            "4aba47952de30549",
            "a0341471feea052e",
            "61247923fa1ac3e0",
            "efb6b527106f6d5c",
            "eaeb557161bb3cd0",
            "382b10f61f6dbe36",
            "f055952d105307bc"
        ],
        "x": 234,
        "y": 1559,
        "w": 832,
        "h": 222
    },
    {
        "id": "b2b8da4a1ccd565f",
        "type": "group",
        "z": "63695bbdb69c560b",
        "g": "001c5e758ddbe87a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1ee0f625bcf17066",
            "e699a6af84f9cf1d",
            "aeb411faad21092d",
            "0347694e576fae9b",
            "444fe8802b21876c",
            "286a0988d3ae1b05",
            "e09a76c58a6d5fab",
            "e84eb9d976ecdae9",
            "53dfe18a78a73ccd",
            "4cfb753e19ca1fe5"
        ],
        "x": 164,
        "y": 1419,
        "w": 832,
        "h": 222
    },
    {
        "id": "e0a206f97c1145a2",
        "type": "group",
        "z": "9063753adeaed04a",
        "g": "4faeae360b4dc114",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "542be7fdf63870db",
            "f2fc253e71a948ab",
            "afaeb3029d5ec669",
            "c37f93d5e6bbf487",
            "9544994253373941",
            "aff41d1fece07bf7",
            "3fec7f60bc777412",
            "9613353794219ddc",
            "cdf0f27c43361963",
            "495b23f90daa60a0",
            "52ee652e50bc272c"
        ],
        "x": 914,
        "y": 1219,
        "w": 1252,
        "h": 242
    },
    {
        "id": "82c20ff581541e75",
        "type": "group",
        "z": "efdf08540372187c",
        "g": "9fac6a3acf5a6c7d",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "8bacb296a5e455da",
            "fa13a635396c232d",
            "8eef73dc99609c04",
            "f3f90be86d303d5b",
            "69633fcbbf925dbc",
            "b617f6edcbd75cd5",
            "49d1e937fd4b0187",
            "8b753b4eac45f5de"
        ],
        "x": 934,
        "y": 1379,
        "w": 1372,
        "h": 182
    },
    {
        "id": "6eb4c319d59056c7",
        "type": "group",
        "z": "efdf08540372187c",
        "g": "36e0a8d93e168eca",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f03886165e3b68ad",
            "cdf5402c4dd1b8d4",
            "8bd629033bf83194",
            "df021e087ff0b6f2"
        ],
        "x": 1194,
        "y": 419,
        "w": 892,
        "h": 142
    },
    {
        "id": "5c839d8c4783654c",
        "type": "group",
        "z": "63695bbdb69c560b",
        "g": "8662194735015a0b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b59c2330f15607c2",
            "8efce6cf5db2a977",
            "e9663eb1bbad32e2",
            "9ce2885490b165d5",
            "d71b9dd0bb602eb2",
            "f8bbbe5a25d0b116",
            "23d486325d0de270",
            "dc0a407ee12e427c",
            "87efc1ca7b673e36",
            "f3d925381765ee37",
            "26f4f6790fe688b9"
        ],
        "x": 994,
        "y": 1139,
        "w": 1252,
        "h": 242
    },
    {
        "id": "6d2667296f699c9e",
        "type": "group",
        "z": "68278b12c5824bc7",
        "g": "f34984f444c5cc66",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "835622bcd1d10ea4",
            "b705b0ddf17f4957",
            "c6ffefb8ff5d8039",
            "3c545d70e874c4b0",
            "8fbf6e3f996cb56d",
            "2abe0deeadb304c7",
            "2f0c21f50c0eaf04",
            "6ade6032d24be49f",
            "dc9e9bf624b17ff2",
            "c21140f166bbd620",
            "fb557ce603f574a6"
        ],
        "x": 1034,
        "y": 1239,
        "w": 1252,
        "h": 242
    },
    {
        "id": "fa6d40b45b4669bf",
        "type": "group",
        "z": "319fb18efb4d6325",
        "g": "e995a6044a620412",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "87f7761da243d49a",
            "34b7a5d783aede87",
            "7ef40a1531489f18",
            "898bf441e7765784",
            "0aaea39027a92e8b",
            "a61906ad69e9b15b",
            "bad46caa965d2fd0",
            "5574e569c252e698",
            "50afa3ad3980ce52",
            "6069e6eaaca0e4e8",
            "0c0d3514674961ab"
        ],
        "x": 1094,
        "y": 1219,
        "w": 1252,
        "h": 242
    },
    {
        "id": "29235146aaeaad26",
        "type": "group",
        "z": "d7706bceda63881b",
        "g": "2d8dda71dd2a71be",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "59dcdd643817aedc",
            "1f096c9de9ceb6ce",
            "d1f1a2bec1e22cb8",
            "44eaa812a195d7a8",
            "baacbe22dd72e886",
            "9b5271e10cc8dc43",
            "dc94b638ca96651b",
            "05b1fcbae1af582e",
            "3da3d0b287604b78",
            "0b0376ca51e52e84",
            "34d27a08935433dc"
        ],
        "x": 1074,
        "y": 1259,
        "w": 1252,
        "h": 242
    },
    {
        "id": "7c97cedd515a1119",
        "type": "group",
        "z": "f7ad05cac9ca67b4",
        "g": "c426f54850392346",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d75c606e1e276525",
            "dec30d66882e6385",
            "053d5634bf2adbe2",
            "62b3202e37e69068",
            "4d681cc2d972dc5a",
            "7f2e092ff6c59cb2",
            "976e5035e94f5361",
            "2d453ba056efc48a",
            "83873082eb16b14e",
            "e45833eb01a9259a",
            "ead2818fef6ebedc"
        ],
        "x": 1074,
        "y": 1239,
        "w": 1252,
        "h": 242
    },
    {
        "id": "23151f9958dc1da4",
        "type": "eth-ip endpoint",
        "address": "192.168.5.1",
        "slot": "0",
        "cycletime": "100",
        "timeout": "10000",
        "name": "PLC_Enchedora",
        "connectedMess": true,
        "vartable": {
            "": {
                "dados_ZIA": {
                    "type": "STRUCT",
                    "mapping": "plcenchedor"
                },
                "cmdZIA": {
                    "type": "STRUCT",
                    "mapping": "reset"
                },
                "listaParadas": {
                    "type": "STRUCT",
                    "mapping": "listaParadas"
                },
                "x_Tracao": {
                    "type": "BOOL",
                    "mapping": ""
                },
                "x_PermissaoAuto": {
                    "type": "BOOL",
                    "mapping": ""
                },
                "sd.TravaGarrafas_V2": {
                    "type": "BOOL",
                    "mapping": ""
                },
                "DosadoZIA": {
                    "type": "STRUCT",
                    "mapping": "Dosado"
                }
            }
        }
    },
    {
        "id": "15aa5d80673142f2",
        "type": "postgreSQLConfig",
        "name": "ZIA_IOT",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "zia_iot",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "zegla@1982",
        "passwordFieldType": "str"
    },
    {
        "id": "8d756ed66187c2a2",
        "type": "eth-ip endpoint",
        "address": "192.168.35.1",
        "slot": "0",
        "cycletime": "100",
        "timeout": "10000",
        "name": "PLC_Envolvedora",
        "connectedMess": true,
        "vartable": {
            "": {
                "dados_ZIA": {
                    "type": "STRUCT",
                    "mapping": ""
                },
                "cmdZIA": {
                    "type": "STRUCT",
                    "mapping": "reset"
                }
            }
        }
    },
    {
        "id": "0631dc708e9be431",
        "type": "eth-ip endpoint",
        "address": "192.168.60.1",
        "slot": "0",
        "cycletime": "100",
        "timeout": "10000",
        "name": "PLC_Robopal",
        "connectedMess": true,
        "vartable": {
            "": {
                "dados_ZIA": {
                    "type": "STRUCT",
                    "mapping": ""
                },
                "cmdZIA": {
                    "type": "STRUCT",
                    "mapping": ""
                }
            }
        }
    },
    {
        "id": "a98c10e5c40c909d",
        "type": "eth-ip endpoint",
        "address": "192.168.200.1",
        "slot": "0",
        "cycletime": "100",
        "timeout": "10000",
        "name": "PLC_Transporte",
        "connectedMess": true,
        "vartable": {
            "": {
                "ed": {
                    "type": "STRUCT",
                    "mapping": ""
                },
                "xTipoFrasco": {
                    "type": "INT",
                    "mapping": ""
                }
            }
        }
    },
    {
        "id": "4eef8aae49431f0c",
        "type": "modbustcp-server",
        "name": "varpe",
        "host": "192.168.1.50",
        "port": "5002",
        "unit_id": "1",
        "reconnecttimeout": ""
    },
    {
        "id": "9ac76089066debc7",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "192.168.28.10",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapterauto": true,
        "adapterport": "",
        "busaddr": "2",
        "adapteraddr": "0",
        "cycletime": "500",
        "timeout": "1500",
        "verbose": "default",
        "name": "PLC Aplipack",
        "vartable": [
            {
                "addr": "DB1500,X0.0",
                "name": "lifebit"
            },
            {
                "addr": "DB1500,I2",
                "name": "mode"
            },
            {
                "addr": "DB1500,I4",
                "name": "state"
            },
            {
                "addr": "DB1500,I6",
                "name": "statechanged_id"
            },
            {
                "addr": "DB1500,S7.80",
                "name": "statechanged_reason"
            },
            {
                "addr": "DB1500,R264",
                "name": "rNominal"
            },
            {
                "addr": "DB1500,R268",
                "name": "rActualSpeed"
            },
            {
                "addr": "DB1500,DI272",
                "name": "diProductionCounter"
            },
            {
                "addr": "DB1500,X276.0",
                "name": "xResetCounter"
            },
            {
                "addr": "DB1500,DI278",
                "name": "diCounterReject_r1"
            },
            {
                "addr": "DB1500,X282.0",
                "name": "xResetReject_r1"
            },
            {
                "addr": "DB1500,DI284",
                "name": "diCounterReject_r2"
            },
            {
                "addr": "DB1500,X288.0",
                "name": "xResetReject_r2"
            },
            {
                "addr": "DB1500,I290",
                "name": "iActualRecipe"
            }
        ]
    },
    {
        "id": "5af0070c91460327",
        "type": "pccc endpoint",
        "address": "192.168.25.10",
        "port": "44818",
        "userouting": false,
        "routingbuf": "[1,0]",
        "cycletime": "100",
        "timeout": "1500",
        "name": "PLC_ROTULADORA DE FRASCOS",
        "vartable": [
            {
                "addr": "N30:0",
                "name": "aux_id_falha"
            },
            {
                "addr": "N29:0",
                "name": "iActualRecipe"
            },
            {
                "addr": "N30:3",
                "name": "rActualSpeed"
            },
            {
                "addr": "F8:40",
                "name": "diProductionCounter"
            },
            {
                "addr": "N7:48",
                "name": "diCounterReject_r1"
            },
            {
                "addr": "B3:21/13",
                "name": "xResetReject_r1"
            },
            {
                "addr": "N7:49",
                "name": "diCounterReject_r2"
            },
            {
                "addr": "B3:21/13",
                "name": "xResetReject_r2"
            },
            {
                "addr": "N30:1",
                "name": "mode"
            },
            {
                "addr": "N30:2",
                "name": "state"
            },
            {
                "addr": "ST17:0",
                "name": "RecipeName1"
            },
            {
                "addr": "ST17:1",
                "name": "RecipeName2"
            },
            {
                "addr": "ST17:2",
                "name": "RecipeName3"
            },
            {
                "addr": "ST17:3",
                "name": "RecipeName4"
            },
            {
                "addr": "ST17:4",
                "name": "RecipeName5"
            },
            {
                "addr": "ST17:5",
                "name": "RecipeName6"
            },
            {
                "addr": "ST17:6",
                "name": "RecipeName7"
            },
            {
                "addr": "ST17:7",
                "name": "RecipeName8"
            },
            {
                "addr": "ST17:8",
                "name": "RecipeName9"
            },
            {
                "addr": "ST17:9",
                "name": "RecipeName10"
            },
            {
                "addr": "ST17:10",
                "name": "RecipeName11"
            },
            {
                "addr": "ST17:11",
                "name": "RecipeName12"
            },
            {
                "addr": "ST17:12",
                "name": "RecipeName13"
            },
            {
                "addr": "ST17:13",
                "name": "RecipeName14"
            },
            {
                "addr": "ST17:14",
                "name": "RecipeName15"
            },
            {
                "addr": "ST17:15",
                "name": "RecipeName16"
            },
            {
                "addr": "ST17:16",
                "name": "RecipeName17"
            },
            {
                "addr": "ST17:17",
                "name": "RecipeName18"
            },
            {
                "addr": "ST17:18",
                "name": "RecipeName19"
            },
            {
                "addr": "ST17:19",
                "name": "RecipeName20"
            },
            {
                "addr": "ST17:20",
                "name": "RecipeName21"
            },
            {
                "addr": "ST17:21",
                "name": "RecipeName22"
            },
            {
                "addr": "ST17:22",
                "name": "RecipeName23"
            },
            {
                "addr": "ST17:22",
                "name": "RecipeName23"
            },
            {
                "addr": "B3:21/14",
                "name": "starved"
            },
            {
                "addr": "B3:21/15",
                "name": "blocked"
            },
            {
                "addr": "B3:21/12",
                "name": "xResetCounter"
            }
        ]
    },
    {
        "id": "f56ab6388d9b4cdf",
        "type": "eth-ip endpoint",
        "address": "192.168.45.10",
        "slot": "0",
        "cycletime": "500",
        "timeout": "10000",
        "name": "PLC_EMF",
        "connectedMess": true,
        "vartable": {
            "": {
                "diProductionCounter": {
                    "type": "DINT",
                    "mapping": ""
                },
                "aux_id_falha": {
                    "type": "INT",
                    "mapping": ""
                },
                "iActualRecipe": {
                    "type": "INT",
                    "mapping": ""
                },
                "rActualSpeed": {
                    "type": "REAL",
                    "mapping": ""
                },
                "xResetCounter": {
                    "type": "BOOL",
                    "mapping": ""
                },
                "diCounterReject_r1": {
                    "type": "DINT",
                    "mapping": ""
                },
                "xResetReject_r1": {
                    "type": "BOOL",
                    "mapping": ""
                },
                "diCounterReject_r2": {
                    "type": "DINT",
                    "mapping": ""
                },
                "xResetReject_r2": {
                    "type": "BOOL",
                    "mapping": ""
                },
                "machine_mode": {
                    "type": "INT",
                    "mapping": ""
                },
                "machine_state": {
                    "type": "INT",
                    "mapping": ""
                },
                "machine_blocked": {
                    "type": "BOOL",
                    "mapping": ""
                },
                "machine_starverd": {
                    "type": "BOOL",
                    "mapping": ""
                },
                "recipe_id": {
                    "type": "DINT",
                    "mapping": ""
                },
                "recipe_name": {
                    "type": "STRING",
                    "mapping": ""
                },
                "LifeBit": {
                    "type": "",
                    "mapping": ""
                }
            }
        }
    },
    {
        "id": "64e05496ea276cf8",
        "type": "eth-ip endpoint",
        "address": "192.168.45.22",
        "slot": "0",
        "cycletime": "500",
        "timeout": "10000",
        "name": "PLC_CFE",
        "connectedMess": true,
        "vartable": {
            "": {
                "diProductionCounter": {
                    "type": "DINT",
                    "mapping": ""
                },
                "aux_id_falha": {
                    "type": "INT",
                    "mapping": ""
                },
                "iActualRecipe": {
                    "type": "INT",
                    "mapping": ""
                },
                "rActualSpeed": {
                    "type": "REAL",
                    "mapping": ""
                },
                "xResetCounter": {
                    "type": "BOOL",
                    "mapping": ""
                },
                "diCounterReject_r1": {
                    "type": "DINT",
                    "mapping": ""
                },
                "xResetReject_r1": {
                    "type": "BOOL",
                    "mapping": ""
                },
                "diCounterReject_r2": {
                    "type": "DINT",
                    "mapping": ""
                },
                "xResetReject_r2": {
                    "type": "BOOL",
                    "mapping": ""
                },
                "machine_mode": {
                    "type": "INT",
                    "mapping": ""
                },
                "machine_state": {
                    "type": "INT",
                    "mapping": ""
                },
                "machine_blocked": {
                    "type": "BOOL",
                    "mapping": ""
                },
                "machine_starverd": {
                    "type": "BOOL",
                    "mapping": ""
                },
                "recipe_id": {
                    "type": "DINT",
                    "mapping": ""
                },
                "recipe_name": {
                    "type": "STRING",
                    "mapping": ""
                },
                "LifeBit": {
                    "type": "BOOL",
                    "mapping": ""
                }
            }
        }
    },
    {
        "id": "c24c0bcc6c62657e",
        "type": "eth-ip endpoint",
        "address": "192.168.45.3",
        "slot": "0",
        "cycletime": "500",
        "timeout": "10000",
        "name": "PLC_GFX",
        "connectedMess": true,
        "vartable": {
            "": {
                "diProductionCounter": {
                    "type": "DINT",
                    "mapping": ""
                },
                "aux_id_falha": {
                    "type": "INT",
                    "mapping": ""
                },
                "iActualRecipe": {
                    "type": "INT",
                    "mapping": ""
                },
                "rActualSpeed": {
                    "type": "REAL",
                    "mapping": ""
                },
                "xResetCounter": {
                    "type": "BOOL",
                    "mapping": ""
                },
                "diCounterReject_r1": {
                    "type": "DINT",
                    "mapping": ""
                },
                "xResetReject_r1": {
                    "type": "BOOL",
                    "mapping": ""
                },
                "diCounterReject_r2": {
                    "type": "DINT",
                    "mapping": ""
                },
                "xResetReject_r2": {
                    "type": "BOOL",
                    "mapping": ""
                },
                "machine_mode": {
                    "type": "INT",
                    "mapping": ""
                },
                "machine_state": {
                    "type": "INT",
                    "mapping": ""
                },
                "machine_blocked": {
                    "type": "BOOL",
                    "mapping": ""
                },
                "machine_starverd": {
                    "type": "BOOL",
                    "mapping": ""
                },
                "recipe_id": {
                    "type": "DINT",
                    "mapping": ""
                },
                "recipe_name": {
                    "type": "STRING",
                    "mapping": ""
                },
                "LifeBit": {
                    "type": "BOOL",
                    "mapping": ""
                }
            }
        }
    },
    {
        "id": "ea8afcc239b28dd7",
        "type": "file in",
        "z": "d1fff9927ade818b",
        "g": "04fcefe29c2617e4",
        "name": "Configuração de Turnos",
        "filename": ".\\ZIA\\config.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 410,
        "y": 820,
        "wires": [
            [
                "ee7838d7a20c8f65"
            ]
        ]
    },
    {
        "id": "ee7838d7a20c8f65",
        "type": "json",
        "z": "d1fff9927ade818b",
        "g": "04fcefe29c2617e4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 610,
        "y": 820,
        "wires": [
            [
                "774df679f4584486",
                "7429edf4bc291f91"
            ]
        ]
    },
    {
        "id": "774df679f4584486",
        "type": "function",
        "z": "d1fff9927ade818b",
        "g": "04fcefe29c2617e4",
        "name": "Turnos, Tempo Transcorr",
        "func": "///////////////////// define os horários de início e fim de cada turno arquivo json config.json\nlet turno = calculaTurno(msg.payload)\nglobal.set(\"turno_1\", turno );\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nlet turno_anterior = global.get(\"turno_anterior_1\") || global.set(\"turno_anterior_1\", turno.turno);\n\n// zera contadores na troca de turno\nif (global.get(\"turno_anterior_1\") != turno.turno && turno.turno !=0) {\n    \n    /////\n    atualiza_memoTurno()\n    \n}\n//zera contadores de tempo programado e não programado\n\n\natualiza_memoTurno()\nmsg = {}\nmsg.payload = turno\nreturn msg\n\nfunction atualiza_memoTurno() {\n    if ((turno.turno != turno_anterior) && turno_anterior != 0) {\n        //var msg2 = { payload: {} }\n        global.set(\"turno_anterior_1\", turno.turno)\n    }\n}\n\nfunction calculaTurno(b) { // b = json \"config turnos\"\n    let agora = new Date();\n    let a = {}\n    agora.setFullYear(2000, 0, 1);\n    /////////////////// itera sobre os turnos para encontrar o atual\n    let turnoAtual = null;\n    for (let i = 0; i < b.length; i++) {\n        const inicio = new Date(`01/01/2000 ${b[i].inicio}`);\n        let fim = new Date(`01/01/2000 ${b[i].fim}`);\n        /////////////// verifica se o turno atravessa a meia-noite\n        if (fim < inicio) {\n            fim = new Date(`01/02/2000 ${b[i].fim}`);\n            if (agora < new Date(`01/02/2000 00:00`) && agora > inicio) {\n            } else {\n                agora.setFullYear(2000, 0, 2);\n            }\n        }\n        //////////////// verifica se a hora atual está dentro do turno\n        if (agora >= inicio && agora < fim) {\n            turnoAtual = i;\n            break;\n        }\n    }\n    //////////////////// exibe o turno atual e o tempo transcorrido\n    if (turnoAtual !== null) {\n        const inicioTurno = new Date(`01/01/2000 ${b[turnoAtual].inicio}`);\n        //console.log(inicioTurno)\n        let fimTurno = new Date(`01/01/2000 ${b[turnoAtual].fim}`);\n\n        /////////////// verifica se o turno atravessa a meia-noite\n        if (fimTurno < inicioTurno) {\n            fimTurno = new Date(`01/02/2000 ${b[turnoAtual].fim}`);\n        }\n        const tempoTranscorrido = ((agora.getTime() - inicioTurno.getTime()) / 1000 / 60);\n        a.payload = {\n            //...a.payload,\n            turno: turnoAtual + 1,\n            tempoTranscorrido: tempoTranscorrido\n        };\n    } else {\n        a.payload = {\n            //...a.payload,\n            turno: 0,\n            tempoTranscorrido: 0\n        };\n    }\n    return a.payload\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 820,
        "wires": [
            [
                "396be83b812f71d8"
            ]
        ]
    },
    {
        "id": "3bb8b9750a7bc532",
        "type": "comment",
        "z": "d1fff9927ade818b",
        "g": "04fcefe29c2617e4",
        "name": "Tempos Acumulados",
        "info": "Tempos acumulados em cada estado estado",
        "x": 770,
        "y": 780,
        "wires": []
    },
    {
        "id": "68a52ff7a0a691c5",
        "type": "inject",
        "z": "d1fff9927ade818b",
        "d": true,
        "g": "04fcefe29c2617e4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 820,
        "wires": [
            [
                "ea8afcc239b28dd7"
            ]
        ]
    },
    {
        "id": "396be83b812f71d8",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "04fcefe29c2617e4",
        "name": "debug 167",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 820,
        "wires": []
    },
    {
        "id": "7429edf4bc291f91",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "04fcefe29c2617e4",
        "name": "debug 301",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 880,
        "wires": []
    },
    {
        "id": "3f814dca4859cdb3",
        "type": "http request",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "GET turnos",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 630,
        "y": 260,
        "wires": [
            [
                "fd7d07bbcca81351",
                "54fb133d53b33574"
            ]
        ]
    },
    {
        "id": "05a5fea97a44c5de",
        "type": "inject",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "",
        "props": [],
        "repeat": "1200",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 260,
        "wires": [
            [
                "15c61e28705ac557"
            ]
        ]
    },
    {
        "id": "fb98eb52cd04e578",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "debug 348",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1010,
        "y": 340,
        "wires": []
    },
    {
        "id": "fd7d07bbcca81351",
        "type": "json",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 810,
        "y": 260,
        "wires": [
            [
                "055052ccdf80d444"
            ]
        ]
    },
    {
        "id": "f19cce1a225b359c",
        "type": "function",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "Turnos, Tempo Transcorr",
        "func": "\n/////////////////////////////////////////////////////////\nlet config = flow.get(\"config\");\n///////////////////// define os horários de início e fim de cada turno, com os dados do GET\n\n\n//node.warn(msg.payload)\n\nlet turno = calculaTurno(msg.payload)\n\n\n\nglobal.set(\"turno_\" + config.factory, turno);\n\nlet turno_anterior = global.get(\"turno_anterior_\" + config.factory) || global.set(\"turno_anterior_\" + config.factory, turno.turno);\n\natualiza_memoTurno()\nmsg = {}\nmsg.payload = turno\nreturn msg\n\n//verifica se houve mudancao de turno\nfunction atualiza_memoTurno() {\n    if ((turno.turno != turno_anterior) && turno_anterior != 0) {\n        global.set(\"turno_anterior_\" + config.factory, turno.turno)\n    }\n}\n\n/**\n* @param {string | any[]} b\n*/\nfunction calculaTurno(b) {\n\n    let agora = new Date();\n    //node.warn(agora);\n    let a = {}\n\n    //agora.setFullYear(2000, 0, 1);\n    /////////////////// itera sobre os turnos para encontrar o atual\n    let turnoAtual = null;\n    for (let i = 0; i < b.length; i++) {\n\n\n        b[i].start_time = new Date(b[i].start_time)\n        b[i].end_time = new Date(b[i].end_time)\n\n\n        agora.setFullYear(2000, 0, 1);\n        const inicio = b[i].start_time\n        let fim = b[i].end_time\n\n\n\n        /////////////// verifica se o turno atravessa a meia-noite\n        if (fim < inicio) {\n            fim.setFullYear(2000, 0, 2);\n            if (agora < new Date(`01/02/2000 00:00`) && agora > inicio) {\n            } else {\n                agora.setFullYear(2000, 0, 2);\n            }\n        }\n        //////////////// verifica se a hora atual está dentro do turno\n        if (agora >= inicio && agora < fim) {\n            turnoAtual = i;\n            break;\n        }\n    }\n    //////////////////// exibe o turno atual e o tempo transcorrido\n    if (turnoAtual !== null) {\n        const inicioTurno = b[turnoAtual].start_time\n        //console.log(inicioTurno)\n        let fimTurno = b[turnoAtual].end_time\n        /////////////// verifica se o turno atravessa a meia-noite\n        if (fimTurno < inicioTurno) {\n            fimTurno.setFullYear(2000, 0, 2)\n        }\n\n\n        //node.warn(agora);\n        //node.warn(inicioTurno);\n\n\n        const tempoTranscorrido = ((agora.getTime() - inicioTurno.getTime()) / 1000 / 60);\n\n\n\n        a.payload = {\n            //...a.payload,\n            turno: turnoAtual + 1,\n            tempoTranscorrido: tempoTranscorrido,\n            now: new Date()\n        };\n    } else {\n        a.payload = {\n            //...a.payload,\n            turno: 0,\n            tempoTranscorrido: 0,\n            now: new Date()\n        };\n    }\n    return a.payload\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 340,
        "wires": [
            [
                "fb98eb52cd04e578"
            ]
        ]
    },
    {
        "id": "7ae76e2693cc8ce2",
        "type": "change",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "turnos_times",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 260,
        "wires": [
            [
                "3424320c02584975"
            ]
        ]
    },
    {
        "id": "3424320c02584975",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "debug 351",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload[0].start_time",
        "statusType": "msg",
        "x": 1450,
        "y": 260,
        "wires": []
    },
    {
        "id": "b24cb1f9a4fb9dd8",
        "type": "inject",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 340,
        "wires": [
            [
                "112aa369e9fffd80"
            ]
        ]
    },
    {
        "id": "112aa369e9fffd80",
        "type": "change",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "turnos_times",
                "tot": "flow",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 340,
        "wires": [
            [
                "f19cce1a225b359c"
            ]
        ],
        "info": "leitura da memoria dos turnos configurados"
    },
    {
        "id": "c6f4c7f3923fa2ab",
        "type": "catch",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "",
        "scope": [
            "f19cce1a225b359c"
        ],
        "uncaught": false,
        "x": 880,
        "y": 400,
        "wires": [
            [
                "29c26a215bf7b3a2"
            ]
        ],
        "info": "catch error da funcao."
    },
    {
        "id": "29c26a215bf7b3a2",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "debug 354",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 400,
        "wires": []
    },
    {
        "id": "346448f2406d5b08",
        "type": "catch",
        "z": "d1fff9927ade818b",
        "g": "f1fc4f7316aa0a2f",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 180,
        "y": 580,
        "wires": [
            [
                "a44ff24d100d2b3f"
            ]
        ]
    },
    {
        "id": "a44ff24d100d2b3f",
        "type": "file",
        "z": "d1fff9927ade818b",
        "g": "f1fc4f7316aa0a2f",
        "name": "",
        "filename": "./supZIA/catchs.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 430,
        "y": 560,
        "wires": [
            [
                "4e9444a5391280ff"
            ]
        ]
    },
    {
        "id": "4e9444a5391280ff",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "f1fc4f7316aa0a2f",
        "name": "debug 424",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 560,
        "wires": []
    },
    {
        "id": "374169fd17aea61c",
        "type": "file in",
        "z": "d1fff9927ade818b",
        "g": "f1fc4f7316aa0a2f",
        "name": "",
        "filename": "./supZIA/catchs.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 490,
        "y": 660,
        "wires": [
            [
                "720e1bde13c3485b"
            ]
        ]
    },
    {
        "id": "075727f4d902792f",
        "type": "inject",
        "z": "d1fff9927ade818b",
        "g": "f1fc4f7316aa0a2f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 640,
        "wires": [
            [
                "374169fd17aea61c"
            ]
        ]
    },
    {
        "id": "720e1bde13c3485b",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "f1fc4f7316aa0a2f",
        "name": "debug 425",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 660,
        "wires": []
    },
    {
        "id": "9e17132e9c449484",
        "type": "inject",
        "z": "d1fff9927ade818b",
        "g": "6302fc7725be0c11",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "e5440bb7278726a8"
            ]
        ]
    },
    {
        "id": "e5440bb7278726a8",
        "type": "function",
        "z": "d1fff9927ade818b",
        "g": "6302fc7725be0c11",
        "name": "CONFIG",
        "func": "//configuracaao de linha\n\nlet config = {}\n\nconfig.machine_name = \"enchedora\"\n\nconfig.factory = 1\n\n//config.token_machine = \"Bearer \" + \"518bdf3701d869a89b4e241d5e63559459b1ce2e\"\nconfig.token_line = \"Bearer \" + \"00bc757a398cc98d299fd6fc2119929c48647db9\"\nconfig.url = \"http://127.0.0.1:3003\"\nconfig.url_machine = config.url + \"/machine_events\"\nconfig.url_line = config.url + \"/production_line_events\"\nconfig.send = true /// habilita POST\n\nflow.set(\"config\", config);\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 80,
        "wires": [
            [
                "1ca1024892ec6a70"
            ]
        ]
    },
    {
        "id": "1ca1024892ec6a70",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "6302fc7725be0c11",
        "name": "debug 432",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 80,
        "wires": []
    },
    {
        "id": "15c61e28705ac557",
        "type": "function",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "Config Line Troca de Turno",
        "func": "let config = flow.get(\"config\")\n\nif (config.send == true) {\n    msg.url = config.url + \"/shifts.json\"\n    msg.headers = {}\n    msg.headers['Authorization'] = config.token_line\n    msg.payload = {}\n    return msg\n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 260,
        "wires": [
            [
                "3f814dca4859cdb3"
            ]
        ]
    },
    {
        "id": "055052ccdf80d444",
        "type": "function",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "Ajuste Fuso",
        "func": "\nmsg.payload.sort((a, b) => a.number - b.number);\n\n\n// Ajustar `start_time` e `end_time` para -2 horas\nmsg.payload.forEach(obj => {\n  obj.start_time = new Date(new Date(obj.start_time).getTime() + 0 * 60 * 60 * 1000).toISOString();\n  obj.end_time = new Date(new Date(obj.end_time).getTime() + 0 * 60 * 60 * 1000).toISOString();\n});\n\n\nmsg.teste = msg.payload[1].start_time\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 260,
        "wires": [
            [
                "7ae76e2693cc8ce2",
                "98ac4afa5cf3a81b",
                "11e3895db3609d3b"
            ]
        ]
    },
    {
        "id": "54fb133d53b33574",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "debug 491",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 200,
        "wires": []
    },
    {
        "id": "35ea7d8e27794ec6",
        "type": "function",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "Producoes",
        "func": "let dados_1 = global.get(\"plcenchedora\");\nlet dados_2 = global.get(\"plcenvolvedora\");\nlet dados_3 = global.get(\"plcrobopal\");\nlet dados_4 = global.get(\"plcemf\");\nlet dados_5 = global.get(\"plccfe\");\nlet dados_6 = global.get(\"plcgfx\");\nlet dados_7 = global.get(\"plcrotuladorafrascos\");\nlet dados_8 = global.get(\"plcaplicadora\");\n\n\nlet productionsCounters = {\n    1: dados_1.diProductionCounter - dados_1.diCounterReject_r1 - dados_1.diCounterReject_r1,\n    2: dados_2.diProductionCounter - dados_2.diCounterReject_r1 - dados_2.diCounterReject_r1,\n    3: dados_3.diProductionCounter - dados_3.diCounterReject_r1 - dados_3.diCounterReject_r1,\n    4: dados_4.diProductionCounter - dados_4.diCounterReject_r1 - dados_4.diCounterReject_r1,\n    5: dados_5.diProductionCounter - dados_5.diCounterReject_r1 - dados_5.diCounterReject_r1,\n    6: dados_6.diProductionCounter - dados_6.diCounterReject_r1 - dados_6.diCounterReject_r1,\n    7: dados_7.diProductionCounter - dados_7.diCounterReject_r1 - dados_7.diCounterReject_r1,\n    8: dados_8.diProductionCounter - dados_8.diCounterReject_r1 - dados_8.diCounterReject_r1,\n    \n\n}\nglobal.set(\"productionsCounters\", productionsCounters);\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 420,
        "wires": [
            [
                "deb7e6b9f37a6922"
            ]
        ]
    },
    {
        "id": "d675c43bda4c40a5",
        "type": "inject",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "35ea7d8e27794ec6"
            ]
        ]
    },
    {
        "id": "deb7e6b9f37a6922",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "debug 493",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 420,
        "wires": []
    },
    {
        "id": "98ac4afa5cf3a81b",
        "type": "change",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "turnos_times",
                "pt": "global",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 300,
        "wires": [
            [
                "3424320c02584975"
            ]
        ]
    },
    {
        "id": "11e3895db3609d3b",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "debug 525",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 180,
        "wires": []
    },
    {
        "id": "8bc020c52a8d5185",
        "type": "inject",
        "z": "d1fff9927ade818b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1020,
        "y": 40,
        "wires": [
            [
                "4270552b7714a7db"
            ]
        ]
    },
    {
        "id": "4270552b7714a7db",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "name": "debug 526",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 40,
        "wires": []
    },
    {
        "id": "6823d3ceedc2f0be",
        "type": "inject",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 220,
        "wires": [
            [
                "dac74ea7bd686af0"
            ]
        ]
    },
    {
        "id": "dac74ea7bd686af0",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "5b2ca5117e3c4f52",
        "name": "debug 527",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 200,
        "wires": []
    },
    {
        "id": "5427299f5fb772b1",
        "type": "http in",
        "z": "d1fff9927ade818b",
        "g": "d509d53b91bda2ba",
        "name": "",
        "url": "/maquinas/:id_reg",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1840,
        "y": 1060,
        "wires": [
            [
                "19a773bc7bdb74a2",
                "221b3f6d2bd4f0ab"
            ]
        ]
    },
    {
        "id": "19a773bc7bdb74a2",
        "type": "function",
        "z": "d1fff9927ade818b",
        "g": "d509d53b91bda2ba",
        "name": "function 261",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 1060,
        "wires": [
            [
                "e17b681de999ad10",
                "3d44ffd92cb59df2",
                "5242016086e3cabe"
            ]
        ]
    },
    {
        "id": "221b3f6d2bd4f0ab",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "d509d53b91bda2ba",
        "name": "debug 497",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 1180,
        "wires": []
    },
    {
        "id": "e17b681de999ad10",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "d509d53b91bda2ba",
        "name": "debug 498",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2110,
        "y": 1180,
        "wires": []
    },
    {
        "id": "11fdd7fe001669fa",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "name": "debug 544",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 500,
        "wires": []
    },
    {
        "id": "5b02aee1cb72cfcd",
        "type": "http response",
        "z": "d1fff9927ade818b",
        "g": "6a6de055d2b62282",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 3390,
        "y": 680,
        "wires": []
    },
    {
        "id": "af5e1d892c789bc5",
        "type": "http request",
        "z": "d1fff9927ade818b",
        "g": "6a6de055d2b62282",
        "name": "GET StopReasons",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2370,
        "y": 660,
        "wires": [
            [
                "a4f30895bf48990b"
            ]
        ]
    },
    {
        "id": "3ec6d99c361d6142",
        "type": "function",
        "z": "d1fff9927ade818b",
        "g": "6a6de055d2b62282",
        "name": "function 256",
        "func": "const data = msg.lista_completa\nlet id = Math.floor(msg.id_maq)\n\nif (Number.isNaN(id)) {\n    id = null\n}\n\n//mas.payload.apontamentos = msg.pendentes\nmsg.payload = {}\n\n// variavel para visualizacao de velociadde de maquinas\nmsg.payload.divisor = 60\n\n\nfunction StopsByMachine(data, selectedId = null) {\n    const machineMap = new Map();\n    data.forEach(event => {\n        event.machines.forEach(machine => {\n            if (!machineMap.has(machine.id)) {\n                machineMap.set(machine.id, { id: machine.id, name: machine.name, stopReasons: [] });\n            }\n            machineMap.get(machine.id).stopReasons.push([event.name, event.plc_code, event.expected]);\n        });\n    });\n\n    if (selectedId !== null) {\n        return machineMap.has(selectedId) ? machineMap.get(selectedId) : null;\n    }\n\n    return Array.from(machineMap.values());\n}\n\n\n\nfunction listUniqueMachineNames(data) {\n\n    const machines = new Map();\n    data.forEach(event => {\n        event.machines.forEach(machine => {\n            machines.set(machine.id, machine.name);\n        });\n    });\n\n    const result = Array.from(machines).map(([id, name]) => ({ id, name }));\n\n    return result\n\n\n}\n\n// coleta producoes\nconst productionsCounters = global.get(\"productionsCounters\");\n\n\n//coleta estados dos equipamentos\n\nlet plcenchedora = global.get(\"plcenchedora\");\nlet plcenvolvedora = global.get(\"plcenvolvedora\");\nlet plcrobopal = global.get(\"plcrobopal\");\nlet plcemf = global.get(\"plcemf\");\nlet plccfe = global.get(\"plccfe\");\nlet plcgfx = global.get(\"plcgfx\");\nlet plcrotuladorafrascos = global.get(\"plcrotuladorafrascos\");\nlet plcaplicadora = global.get(\"plcaplicadora\");\n\n\n\nlet status = []\nstatus[1] = [plcenchedora.mode, plcenchedora.state, productionsCounters[\"1\"], plcenchedora.strRecipeName, plcenchedora.rNominalSpeed]\nstatus[2] = [plcenvolvedora.mode, plcenvolvedora.state, productionsCounters[\"2\"], plcenvolvedora.strRecipeName, plcenvolvedora.rNominalSpeed]\nstatus[3] = [plcrobopal.mode, plcrobopal.state, productionsCounters[\"3\"], plcrobopal.strRecipeName, plcrobopal.rNominalSpeed]\nstatus[4] = [plcemf.mode, plcemf.state, productionsCounters[\"4\"], plcemf.strRecipeName, plcemf.rNominalSpeed]\nstatus[5] = [plccfe.mode, plccfe.state, productionsCounters[\"5\"], plccfe.strRecipeName, plccfe.rNominalSpeed]\nstatus[6] = [plcgfx.mode, plcgfx.state, productionsCounters[\"6\"], plcgfx.strRecipeName, plcgfx.rNominalSpeed]\nstatus[7] = [plcrotuladorafrascos.mode, plcrotuladorafrascos.state, productionsCounters[\"7\"], plcrotuladorafrascos.strRecipeName, plcrobopal.rNominalSpeed]\nstatus[8] = [plcaplicadora.mode, plcaplicadora.state, productionsCounters[\"8\"], plcaplicadora.strRecipeName, plcaplicadora.rNominalSpeed]\n\nmsg.payload.status = status\n\n//coleta paradas atuais\nlet parada_atual = []\nparada_atual[1] = global.get(\"paradaplcenchedora\") || {};\nparada_atual[2] = global.get(\"paradaplcenvolvedora\") || {};\nparada_atual[3] = global.get(\"paradaplcrobopal\") || {};\nparada_atual[4] = global.get(\"paradaplcemf\") || {};\nparada_atual[5] = global.get(\"paradaplccfe\") || {};\nparada_atual[6] = global.get(\"paradaplcgfx\") || {};\nparada_atual[7] = global.get(\"paradaplcrotuladorafrascos\") || {};\nparada_atual[8] = global.get(\"plcaplicadora\") || {};\n\n//parada de linha\n\nconst parada_linha = global.get(\"parada_linha\");\nmsg.payload.parada_linha = parada_linha\n//guilt\n\nconst guilt = global.get(\"guilt\");\n\n\nconst guilt_tablet = {\n    1: guilt.enchedora,\n    2: guilt.envolvedora,\n    3: guilt.robopal,\n    4: guilt.emf,\n    5: guilt.cfe,\n    6: guilt.gfx,\n    7: guilt.rotuladorafrascos,\n    8: guilt.aplicadora\n}\n\nmsg.payload.guilt = guilt_tablet\n\nmsg.payload.parada_atual = parada_atual\n\n// Chamar a função e imprimir o resultado\nmsg.payload.maquinas = listUniqueMachineNames(data);\n\n\n\n// Executar a função e imprimir o resultado\nmsg.payload.stopreasons = StopsByMachine(data, id);\n\nmsg.payload.apontamentos = msg.pendentes\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "lineReader",
                "module": "line-reader"
            },
            {
                "var": "readline",
                "module": "readline"
            }
        ],
        "x": 3090,
        "y": 660,
        "wires": [
            [
                "5b02aee1cb72cfcd",
                "15e0eda50f9edbc8"
            ]
        ]
    },
    {
        "id": "d6dd8b673dc013f1",
        "type": "inject",
        "z": "d1fff9927ade818b",
        "g": "6a6de055d2b62282",
        "name": "msg.",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1850,
        "y": 580,
        "wires": [
            [
                "734dd80c12230ee6"
            ]
        ]
    },
    {
        "id": "b4f561cfc8c3d67e",
        "type": "http in",
        "z": "d1fff9927ade818b",
        "g": "6a6de055d2b62282",
        "name": "",
        "url": "/maquinas/:id_maq?",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1850,
        "y": 660,
        "wires": [
            [
                "734dd80c12230ee6"
            ]
        ]
    },
    {
        "id": "734dd80c12230ee6",
        "type": "function",
        "z": "d1fff9927ade818b",
        "g": "6a6de055d2b62282",
        "name": "Config",
        "func": "\nlet config = flow.get(\"config\")\n\nmsg.id_maq = msg.req.params.id_maq\n//msg.id_maq = 1\n\n//node.warn(msg.id_maq);\n\nif (config.send == true) {\n\n    //node.warn(\"Consultando...\");\n    msg.url = config.url + \"/stop_reasons.json\"\n    msg.headers = {}\n    msg.headers['Authorization'] = config.token_line\n    msg.payload = {}\n\n\n    return msg\n\n\n}\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 660,
        "wires": [
            [
                "af5e1d892c789bc5"
            ]
        ]
    },
    {
        "id": "a4f30895bf48990b",
        "type": "function",
        "z": "d1fff9927ade818b",
        "g": "6a6de055d2b62282",
        "name": "function 259",
        "func": "let lista_completa = msg.payload\n//node.warn(lista_completa);\nmsg.payload = {}\nmsg.lista_completa = JSON.parse(lista_completa)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 660,
        "wires": [
            [
                "6de41d1f47b3b404"
            ]
        ]
    },
    {
        "id": "6de41d1f47b3b404",
        "type": "function",
        "z": "d1fff9927ade818b",
        "g": "6a6de055d2b62282",
        "name": "function 258",
        "func": "let arrDados = msg.payload\nmsg.payload ={}\nlet a =[]\n for (let index = 0; index < arrDados.length; index++) {\n     //const element = arrDados[index];\n     arrDados[index].payload = JSON.parse(arrDados[index].payload)\n     a.push([arrDados[index].id,arrDados[index].payload])\n     //node.warn(a);\n }\n\nmsg.pendentes = a\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2830,
        "y": 660,
        "wires": [
            [
                "3ec6d99c361d6142",
                "11fdd7fe001669fa"
            ]
        ]
    },
    {
        "id": "15e0eda50f9edbc8",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "6a6de055d2b62282",
        "name": "debug 500",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3390,
        "y": 620,
        "wires": []
    },
    {
        "id": "3d44ffd92cb59df2",
        "type": "http response",
        "z": "d1fff9927ade818b",
        "g": "d509d53b91bda2ba",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2450,
        "y": 940,
        "wires": []
    },
    {
        "id": "8453896c5860d555",
        "type": "link out",
        "z": "d1fff9927ade818b",
        "g": "d509d53b91bda2ba",
        "name": "link out enchedora",
        "mode": "link",
        "links": [
            "914c4fd919e76fac"
        ],
        "x": 2795,
        "y": 960,
        "wires": []
    },
    {
        "id": "1cb0626107b66fbc",
        "type": "link out",
        "z": "d1fff9927ade818b",
        "g": "d509d53b91bda2ba",
        "name": "link out envolvedora",
        "mode": "link",
        "links": [
            "cdf0f27c43361963"
        ],
        "x": 2795,
        "y": 1000,
        "wires": []
    },
    {
        "id": "212fc0710bd54938",
        "type": "link out",
        "z": "d1fff9927ade818b",
        "g": "d509d53b91bda2ba",
        "name": "link out robopal",
        "mode": "link",
        "links": [
            "ef815fe25f7a5012"
        ],
        "x": 2795,
        "y": 1040,
        "wires": []
    },
    {
        "id": "32c79fe930e0d4bd",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "d509d53b91bda2ba",
        "name": "debug 562",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2910,
        "y": 920,
        "wires": []
    },
    {
        "id": "121e5d911f03a762",
        "type": "eth-ip in",
        "z": "d1fff9927ade818b",
        "g": "716a4d023e425b37",
        "endpoint": "a98c10e5c40c909d",
        "mode": "single",
        "variable": "ed",
        "program": "",
        "name": "",
        "gatherMetrics": false,
        "includeTimestamp": false,
        "x": 150,
        "y": 1200,
        "wires": [
            [
                "f968db3217db8c9e",
                "74f2524deec6ab04"
            ]
        ]
    },
    {
        "id": "587c61f46b21522d",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "716a4d023e425b37",
        "name": "debug 575",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1220,
        "wires": []
    },
    {
        "id": "f968db3217db8c9e",
        "type": "function",
        "z": "d1fff9927ade818b",
        "g": "716a4d023e425b37",
        "name": "function 284",
        "func": "//msg.payload.VarpeRunning\nlet plcvarpe\n\nif (msg.payload.VarpeRunning) {\n    plcvarpe = {\n        \"mode\": 2,\n        \"state\": 6\n    }\n} else {\n    plcvarpe = {\n        \"mode\": 2,\n        \"state\": 2\n    }\n}\n\nglobal.set(\"plcvarpe\", plcvarpe);\n\n\n//msg.payload.RotuladoraCaixasRunning\nlet plcrotuladoracaixas\n\nif (msg.payload.RotuladoraCaixasRunning) {\n    plcrotuladoracaixas = {\n        \"mode\": 2,\n        \"state\": 6\n    }\n} else {\n    plcrotuladoracaixas = {\n        \"mode\": 2,\n        \"state\": 2\n    }\n}\n//global.set(\"plcrotuladoracaixas\", plcrotuladoracaixas);\n\n\n\n//msg.payload.IndutorRunning\nlet plcindutor\n\nif (msg.payload.IndutorRunning) {\n    plcindutor = {\n        \"mode\": 2,\n        \"state\": 6\n    }\n} else {\n    plcindutor = {\n        \"mode\": 2,\n        \"state\": 2\n    }\n}\nglobal.set(\"plcindutor\", plcindutor);\n\n\n\n//msg.payload.RotuladoraFrascosRunning\n\nlet plcrotuladorafrascos\n\nif (msg.payload.RotuladoraFrascosRunning) {\n    plcrotuladorafrascos = {\n        \"mode\": 2,\n        \"state\": 6\n    }\n} else {\n    plcrotuladorafrascos = {\n        \"mode\": 2,\n        \"state\": 2\n    }\n}\n//global.set(\"plcrotuladorafrascos\", plcrotuladorafrascos);\n\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1220,
        "wires": [
            [
                "587c61f46b21522d"
            ]
        ]
    },
    {
        "id": "74f2524deec6ab04",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "716a4d023e425b37",
        "name": "debug 576",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 1180,
        "wires": []
    },
    {
        "id": "48071cb3df6aebdd",
        "type": "function",
        "z": "d1fff9927ade818b",
        "g": "db0bd6a312bafc0d",
        "name": "GUILT",
        "func": "let status = {};\n\n// Obtendo os status globais das máquinas\nconst enchedora = global.get(\"plcenchedora\");\nconst envolvedora = global.get(\"plcenvolvedora\");\nconst robopal = global.get(\"plcrobopal\");\nconst cfe = global.get(\"plccfe\");\nconst emf = global.get(\"plcemf\");\nconst gfx = global.get(\"plcgfx\");\nconst aplicadora = global.get(\"plcaplicadora\");\nconst rotuladorafrascos = global.get(\"plcrotuladorafrascos\");\nconst tipoFrasco = global.get(\"tipoFrasco\");\n\n// Inicializa a variável que armazena a culpa\nlet culpado = \"\";\n\n// Inicializa o objeto que armazena as máquinas culpadas\nconst guilt = {\n    \"enchedora\": false,\n    \"envolvedora\": false,\n    \"robopal\": false,\n    \"rotuladorafrascos\": false,\n    \"gfx\": false,\n    \"emf\": false,\n    \"cfe\": false,\n    \"aplicadora\": false\n};\n\n// Verificação das máquinas\nif (enchedora.blocked) {\n    if (!rotuladorafrascos.blocked) {\n        guilt.rotuladorafrascos = true;\n        culpado = \"rotuladorafrascos\";\n    } else if (!gfx.blocked && tipoFrasco == 5) {\n        guilt.gfx = true;\n        culpado = \"gfx\";\n    } else if (!emf.blocked && tipoFrasco == 5) {\n        guilt.emf = true;\n        culpado = \"emf\";\n    } else if (!cfe.blocked && tipoFrasco == 5) {\n        guilt.cfe = true;\n        culpado = \"cfe\";\n    } else if (!robopal.blocked) {\n        guilt.robopal = true;\n        culpado = \"robopal\";\n    } else if (!envolvedora.blocked) {\n        guilt.envolvedora = true;\n        culpado = \"envolvedora\";\n    } else if (!aplicadora.blocked) {\n        guilt.aplicadora = true;\n        culpado = \"aplicadora\";\n    }\n} else {\n    guilt.enchedora = true;\n    culpado = \"enchedora\";\n}\n\n// Envia o objeto guilt como payload\nmsg.payload = guilt;\n\n// Salva o objeto guilt globalmente\nglobal.set(\"guilt\", guilt);\n\n// Exibe um aviso no log com a máquina culpada\nnode.warn(\"Culpado: \" + culpado);\n\n// Retorna a mensagem com o payload (guilt)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1380,
        "wires": [
            [
                "615e1f011ffb0b71",
                "5fbf2026d1b283d1"
            ]
        ]
    },
    {
        "id": "7557533278506311",
        "type": "inject",
        "z": "d1fff9927ade818b",
        "g": "db0bd6a312bafc0d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1420,
        "wires": [
            [
                "ae380454c80493a0"
            ]
        ]
    },
    {
        "id": "ae380454c80493a0",
        "type": "function",
        "z": "d1fff9927ade818b",
        "g": "db0bd6a312bafc0d",
        "name": "DETECTA TROCA DE ESTADO",
        "func": "let ant_mode = context.get(\"ant_mode\") || 0;\nlet ant_state = context.get(\"ant_state\") || 0;\nlet name_var_global = \"plcenchedora\"\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\n\nif (ant_mode == 2 && ant_state == 6) { //maquina estava rodando\n    if (ant_mode != mode || ant_state != state) { // maquina sai do estado rodando\n        context.set(\"ant_mode\", mode); //atualiza mode\n        context.set(\"ant_state\", state); // atualiza state\n        return [msg, null] //output}\n\n    }\n}\n\nif (mode == 2 && state == 6) { //maquina estava rodando\n    if (ant_mode != mode || ant_state != state) { // maquina sai do estado rodando\n        context.set(\"ant_mode\", mode); //atualiza mode\n        context.set(\"ant_state\", state); // atualiza state\n        return [null, msg] //output\n    }\n}\n\ncontext.set(\"ant_mode\", mode); //atualiza mode\ncontext.set(\"ant_state\", state); // atualiza state",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1420,
        "wires": [
            [
                "48071cb3df6aebdd"
            ],
            [
                "98ff909b744b27f6"
            ]
        ]
    },
    {
        "id": "72e5b3fe9c868e73",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "db0bd6a312bafc0d",
        "name": "debug 594",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 1460,
        "wires": []
    },
    {
        "id": "98ff909b744b27f6",
        "type": "function",
        "z": "d1fff9927ade818b",
        "g": "db0bd6a312bafc0d",
        "name": "NO GUILT",
        "func": "const guilt = {\n    \"enchedora\": false,\n    \"envolvedora\": false,\n    \"robopal\": false,\n    \"rotuladorafrascos\": false,\n    \"gfx\": false,\n    \"emf\": false,\n    \"cfe\": false,\n    \"aplicadora\": false\n};\n\n\nglobal.set(\"guilt\", guilt);\n\nnode.warn(\"Culpado: No Guilt\");\n\nmsg.payload = guilt\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1460,
        "wires": [
            [
                "72e5b3fe9c868e73",
                "31d753b6c2f98a0f"
            ]
        ]
    },
    {
        "id": "615e1f011ffb0b71",
        "type": "link out",
        "z": "d1fff9927ade818b",
        "g": "db0bd6a312bafc0d",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "a96b1b2ddd6fbcdf",
            "bfc928f72bf9e753",
            "71ad0b171f2001ec",
            "62e69c4ed64ebaec",
            "fb0dfef5d75edb82",
            "039225e75d42ae12",
            "6bba61499e9c64a4",
            "1ee0f625bcf17066"
        ],
        "x": 1065,
        "y": 1320,
        "wires": []
    },
    {
        "id": "5fbf2026d1b283d1",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "db0bd6a312bafc0d",
        "name": "debug 595",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 1380,
        "wires": []
    },
    {
        "id": "31d753b6c2f98a0f",
        "type": "link out",
        "z": "d1fff9927ade818b",
        "g": "db0bd6a312bafc0d",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "dd3e50eecc1f178e",
            "20f168cd2c974463",
            "597b3eb836277812",
            "f99e8b3d9c91449f",
            "88ed49018548ceb3",
            "501e9604c0df70b6",
            "4aba47952de30549",
            "0347694e576fae9b"
        ],
        "x": 1035,
        "y": 1640,
        "wires": []
    },
    {
        "id": "64e6df6916e662b9",
        "type": "eth-ip in",
        "z": "d1fff9927ade818b",
        "g": "716a4d023e425b37",
        "endpoint": "a98c10e5c40c909d",
        "mode": "single",
        "variable": "xTipoFrasco",
        "program": "",
        "name": "",
        "gatherMetrics": true,
        "includeTimestamp": true,
        "x": 170,
        "y": 1080,
        "wires": [
            [
                "f01214a631fe1410"
            ]
        ]
    },
    {
        "id": "0fbabc417d5a7829",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "716a4d023e425b37",
        "name": "debug 746",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 1080,
        "wires": []
    },
    {
        "id": "f01214a631fe1410",
        "type": "function",
        "z": "d1fff9927ade818b",
        "g": "716a4d023e425b37",
        "name": "function 363",
        "func": "const tipoFrasco = msg.payload.value\n\nglobal.set(\"tipoFrasco\", tipoFrasco);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1080,
        "wires": [
            [
                "0fbabc417d5a7829"
            ]
        ]
    },
    {
        "id": "987183eb55ae7260",
        "type": "link out",
        "z": "d1fff9927ade818b",
        "g": "d509d53b91bda2ba",
        "name": "link out gfx",
        "mode": "link",
        "links": [
            "3da3d0b287604b78"
        ],
        "x": 2795,
        "y": 1160,
        "wires": []
    },
    {
        "id": "36123713db6f3c4d",
        "type": "link out",
        "z": "d1fff9927ade818b",
        "g": "d509d53b91bda2ba",
        "name": "link out cfe",
        "mode": "link",
        "links": [
            "50afa3ad3980ce52"
        ],
        "x": 2795,
        "y": 1120,
        "wires": []
    },
    {
        "id": "10af0ee323e03a03",
        "type": "link out",
        "z": "d1fff9927ade818b",
        "g": "d509d53b91bda2ba",
        "name": "link out emf",
        "mode": "link",
        "links": [
            "dc9e9bf624b17ff2"
        ],
        "x": 2795,
        "y": 1080,
        "wires": []
    },
    {
        "id": "828061297503db73",
        "type": "link out",
        "z": "d1fff9927ade818b",
        "g": "d509d53b91bda2ba",
        "name": "link out rotuladora frascos",
        "mode": "link",
        "links": [
            "83873082eb16b14e",
            "87efc1ca7b673e36"
        ],
        "x": 2795,
        "y": 1200,
        "wires": []
    },
    {
        "id": "99cdaa32fe72b645",
        "type": "link out",
        "z": "d1fff9927ade818b",
        "g": "d509d53b91bda2ba",
        "name": "link out aplicadora",
        "mode": "link",
        "links": [],
        "x": 2795,
        "y": 1240,
        "wires": []
    },
    {
        "id": "4ff471b390126744",
        "type": "switch",
        "z": "d1fff9927ade818b",
        "g": "d509d53b91bda2ba",
        "name": "",
        "property": "payload.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "8",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 2650,
        "y": 1080,
        "wires": [
            [
                "8453896c5860d555",
                "32c79fe930e0d4bd"
            ],
            [
                "1cb0626107b66fbc"
            ],
            [
                "212fc0710bd54938"
            ],
            [
                "10af0ee323e03a03"
            ],
            [
                "36123713db6f3c4d"
            ],
            [
                "987183eb55ae7260"
            ],
            [
                "828061297503db73"
            ],
            [
                "99cdaa32fe72b645"
            ]
        ]
    },
    {
        "id": "5242016086e3cabe",
        "type": "function",
        "z": "d1fff9927ade818b",
        "g": "d509d53b91bda2ba",
        "name": "function 365",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2390,
        "y": 1360,
        "wires": [
            [
                "909e933bb3c38fa6"
            ]
        ]
    },
    {
        "id": "6ca95b63d88d6f6c",
        "type": "debug",
        "z": "d1fff9927ade818b",
        "g": "d509d53b91bda2ba",
        "name": "debug 748",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2930,
        "y": 1360,
        "wires": []
    },
    {
        "id": "909e933bb3c38fa6",
        "type": "function",
        "z": "d1fff9927ade818b",
        "g": "d509d53b91bda2ba",
        "name": "function 366",
        "func": "const parada = global.get(\"parada_linha\");\nparada.statechanged_id = msg.payload.newStopReason[1]\nparada.statechanged_reason = msg.payload.newStopReason[0]\nparada.programada = msg.payload.newStopReason[2]\nparada.justifica = true\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 1360,
        "wires": [
            [
                "6ca95b63d88d6f6c"
            ]
        ]
    },
    {
        "id": "904b38dffa122e21",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "80be69b542072bc7",
        "name": "find line",
        "func": "let config = flow.get(\"config\");\n\nlet name_var_global = \"plc\" + config.machine_name\n\n\nlet plc = msg.payload.value\n\nlet cod = msg.payload.value.aux_id_falha\n\nconst lista_falha = flow.get(\"alm_list\");\n\n\nconst lines = lista_falha.split('\\n');\n//node.warn(lines);\n\n\n// Percorrer cada linha e dividi-la em colunas\nlines.forEach(line => {\n    const columns = line.split(',');\n    if (columns.length > 1) {\n        var id = columns[0].trim();\n        var desc_alm = columns[1].trim();\n        var desc_classe = columns[2].trim();\n        var classe = columns[3].trim();\n        var programadada = columns[4].trim();\n        var state_lst = columns[5].trim();\n    }\n\n    if (cod == id) {\n        let str_cod = desc_classe\n        let class_cod = classe\n        let programada = Boolean(Number(programadada))\n        plc.statechanged_id = class_cod\n        plc.statechanged_reason = str_cod\n        plc.programada = programada\n        plc.lastalm = desc_alm\n\n        if (columns[0].trim() == 132) { // maquina bloqueada por acumulo\n            plc.blocked = true\n        } else plc.blocked = false\n\n        return\n\n\n\n    }\n\n\n});\n\n\n\n\nplc = JSON.parse(JSON.stringify(plc))\nglobal.set(name_var_global, plc);\nmsg.payload = plc\nreturn msg\n\n\n\n//return msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 60,
        "wires": [
            [
                "bd60d75fd19326b9",
                "f75766599cc83025",
                "78f57291b3eff84f",
                "76a957f658ac723b",
                "0a957346d34ec9b0"
            ]
        ]
    },
    {
        "id": "bd60d75fd19326b9",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "80be69b542072bc7",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.aux_id_falha",
        "statusType": "msg",
        "x": 1050,
        "y": 60,
        "wires": []
    },
    {
        "id": "1a6c23d3d7293ec1",
        "type": "eth-ip in",
        "z": "efdf08540372187c",
        "g": "80be69b542072bc7",
        "endpoint": "23151f9958dc1da4",
        "mode": "single",
        "variable": "dados_ZIA",
        "program": "",
        "name": "",
        "gatherMetrics": true,
        "includeTimestamp": true,
        "x": 120,
        "y": 60,
        "wires": [
            [
                "904b38dffa122e21",
                "9e25e428f249983c"
            ]
        ]
    },
    {
        "id": "024210e29ff41771",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "a20be756120cb6cd",
        "name": "Turnos, Tempos Acumulados",
        "func": "\nlet msg1 = new Object()\nlet msg2 = new Object()\nlet msg3 = new Object()\nlet config = flow.get(\"config\");\nlet a\n\n\nlet turno = global.get(\"turno_\" + config.factory)\nlet memo_turno = flow.get(\"memo_turno\")\n\n\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\n\nlet sm_atual = {\n    \"state\": dadosPlc.state || 2,\n    \"mode\": dadosPlc.mode || 2\n}\nflow.set(\"sm_atual\", sm_atual);\nlet sm_anterior = flow.get(\"sm_anterior\") || flow.set(\"sm_anterior\", sm_atual)\n\n\nlet tempoTranscorrido\nif (memo_turno == turno.turno) { //&& turno.turno != 0\n    a = 1\n\n    flow.set(\"tempoTranscorrido\", turno.tempoTranscorrido);\n    tempoTranscorrido = turno.tempoTranscorrido\n\n    calculosOEE()\n\n} else {\n    a = 2\n\n    tempoTranscorrido = flow.get(\"tempoTranscorrido\") || 0\n\n}\n\n\n\nlet parada = flow.get(\"parada\") || { \"hora\": 0, \"state\": \"0\", \"mode\": \"0\", \"active\": false, \"tParadaAtual\": 0 }\n\n\n\n// Atualiza o tempo da parada atual\nif ((sm_atual.state != 6 || sm_atual.mode != 2) && turno.turno != 0) {\n    let agora = new Date().getTime()\n    let tParadaAtual = agora - parada.hora\n    parada.tParadaAtual = tParadaAtual / 60 / 1000\n    flow.set(\"parada\", parada);\n    global.set(\"parada\" + name_var_global, parada);\n}\n\n\n\n\n\n// Aciona saida indicando que houve mudanca do modo de operacao\nif (sm_atual.mode != sm_anterior.mode || sm_atual.state != sm_anterior.state) {\n    //Verifica se a maquina saiu do estado Execute\n    //Sempre que a maquina sair de execute devemos anotar o horario da parada\n    if ((sm_anterior.state == 6 && sm_anterior.mode == 2) && (sm_atual.state != sm_anterior.state || sm_atual.mode != sm_anterior.mode)) {\n        console.log(\"NÃO PRODUZINDO\")\n        anotaInicioParada()\n        msg2 = null\n    } else if ((sm_anterior.state != 6 || sm_anterior.mode != 2) && (sm_atual.state == 6 && sm_atual.mode == 2)) {\n        console.log(\"PRODUZINDO\")\n        msg2.payload = consolidaParada()\n        calculosOEE()\n        flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n    }\n    flow.set(\"sm_anterior\", sm_atual)\n\n\n    return [null, msg2]\n}\n\n\n\n\n\n/// rotinas que devem ser executadas na troca de turno\nif (memo_turno != turno.turno) {\n    msg1 = null\n    msg2 = null\n\n    console.log(\"TrocaTurno\")\n    if (memo_turno != 0) {\n        console.log(\"Fim turno \" + memo_turno)\n        msg1 = { payload: 1 }\n\n        if (parada.active == true) { // se no fim do turno estiver em parada consolida\n            msg2 = {}\n            msg2.payload = {}\n            msg2.payload = consolidaParada()\n\n            calculosOEE()\n\n            flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n            if (turno.turno != 0) { // se entrar em um novo turno reinicia a parada\n                console.log(\"Inicio turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n                anotaInicioParada()\n\n            }\n        } else {\n            if (turno.turno != 0) {\n                console.log(\"Iniccio Turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n            }\n        }\n\n\n        calculosOEE()\n        let calculoOEE = flow.get(\"calculoOEE\");\n        flow.set(\"fimTurnoOEE\", calculoOEE);\n        flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n\n\n\n    } else if (memo_turno == 0) {\n        msg1 = null\n        console.log(\"verificaAnotacaoTurno\") // verifica e cria msg2 se necssario e zera anotacao de parada\n\n        verificaAnotacaoInicioTurno()\n\n    } else {\n\n        msg1 = null\n    }\n\n    //anota registro de turno\n\n\n\n    flow.set(\"memo_turno\", turno.turno)\n\n    return [msg1, msg2]\n}\nmsg3.payload = calculosOEE()\nmsg3.payload.machine_event.event_type_id = 6\nreturn [null, null, msg3]\n\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n\nfunction anotaInicioParada() {\n    console.log(\"inicio parada\")\n    //node.warn(name_var_global);\n\n    let iParada = global.get(name_var_global);\n    let parada = {\n        \"hora\": new Date(),\n        \"state\": sm_atual.state || 0,\n        \"mode\": sm_atual.mode\n    }\n    flow.set(\"parada\", {\n        \"aux_id_falha\": Number(dadosPlc.aux_id_falha),\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true,\n        \"statechanged_id\": iParada.statechanged_id,\n        \"statechanged_reason\": iParada.statechanged_reason,\n        \"programada\": new Boolean(iParada.programada),\n        \"justifica\": false\n\n    });\n    global.set(\"parada\" + name_var_global, {\n        \"aux_id_falha\": Number(dadosPlc.aux_id_falha),\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true,\n        \"statechanged_id\": iParada.statechanged_id,\n        \"statechanged_reason\": iParada.statechanged_reason,\n        \"programada\": new Boolean(iParada.programada),\n        \"justifica\": false,\n        \"machine_id\": config.machine_id,\n        \"Equip\": config.machine_name\n\n    });\n    //console.clear()\n    //console.log(\"Inicio da Parada:\" + parada.hora.getHours() + \":\" + parada.hora.getMinutes())\n    return {\n        \"InicioParada\": parada.hora.getTime(),\n        \"FimParada\": 0,\n        \"tParada\": 0,\n        \"ID\": \"ID\",\n        \"Reason\": null,\n        \"ModeReason\": new Number(parada.mode),\n        \"StateReason\": new Number(parada.state) || 0,\n        \"Programada\": null,\n        \"Equip\": name_var_global\n    }\n}\n\nfunction consolidaParada() {\n    //////////////////////////////////////////////////////////////////////\n    //GAMBIA PARA ATRASAR O REGISTRO//////////////////////////////////////\n    //////////////////////////////////////////////////////////////////////\n\n    flow.set(\"ignora_registro_linha\", 20);\n    flow.set(\"ignora_registro_maquina\", 20);\n\n\n\n\n\n    ////fim da gambia///////////////////////////////////////////////////\n\n\n    console.log(\"fim parada\")\n    let retorno = new Date()\n    let parada = flow.get(\"parada\") || 0\n    let tParada = (retorno.getTime() - parada.hora) / 1000 / 60\n    let paradasSoma = flow.get(\"paradasSoma\") || flow.set(\"paradasSoma\", { \"Prog\": 0, \"Nprog\": 0 })\n\n    if (dadosPlc.programada == \"true\") {\n        paradasSoma.Prog = paradasSoma.Prog + tParada\n    } else {\n        paradasSoma.Nprog = paradasSoma.Nprog + tParada\n    }\n    flow.set(\"paradasSoma\", paradasSoma);\n    parada.active = false\n    flow.set(\"parada\", parada);\n    global.set(\"parada\" + name_var_global, parada);\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    return {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 8,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": {\n                \"aux_id_falha\": parada.aux_id_falha,\n                \"InicioParada\": parada.hora,\n                \"FimParada\": retorno.getTime(),\n                \"tParada\": Number(tParada.toFixed(2)),\n                \"ID\": isNaN(Number(parada.statechanged_id)) ? 0 : Number(parada.statechanged_id), // Garantir que ID seja um número\n                \"Reason\": parada.statechanged_reason,\n                \"ModeReason\": parada.mode,\n                \"StateReason\": parada.state || 0,\n                \"Programada\": parada.programada,\n                \"turno_atual\": turno.turno,\n                \"equip\": config.machine_name,\n                \"machine_id\": config.machine_id\n            }\n        }\n    }\n}\n\nfunction calculosOEE() {\n\n\n    //msg.filename = \".\\supZIA\\registroTurno_\" + name_var_global + \".json\"\n\n    var sumProg_NProgr = flow.get(\"sumProg_NProgr\")  // || [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }];\n\n\n\n\n    let dados_oee = {}\n    let tNProg = Number(sumProg_NProgr[0].soma_nao_programada)\n\n\n    let tProg = Number(sumProg_NProgr[0].soma_programada)\n\n    \n    let tProducao = Number(tempoTranscorrido - (tProg + tNProg))\n\n    node.status({ fill: \"red\", shape: \"ring\", text: dados_oee.percDisp });\n\n    if (dadosPlc.mode == 2 && dadosPlc.state == 6) {\n        dados_oee.statusMachine = \"Rodando\"\n    } else dados_oee.statusMachine = \"Parada\"\n\n    ////////////\n    dados_oee.statusConexao = true\n    dados_oee.mode = Number(dadosPlc.mode)\n    dados_oee.state = Number(dadosPlc.state) || 0\n    dados_oee.rNominalSpeed = Number(dadosPlc.rNominalSpeed)\n    dados_oee.rSetSpeed = Number(dadosPlc.rSetSpeed)\n    dados_oee.rActualSpeed = Number(dadosPlc.rActualSpeed)\n    dados_oee.strRecipeName = String(dadosPlc.strRecipeName)\n    dados_oee.strBottle = String(dadosPlc.strBottle)\n    dados_oee.strCap = String(dadosPlc.strCap)\n    dados_oee.diProductionCounter = Number(dadosPlc.diProductionCounter)\n    dados_oee.diCounterReject_r1 = Number(dadosPlc.diCounterReject_r1)\n    dados_oee.diCounterReject_r2 = Number(dadosPlc.diCounterReject_r2)\n    dados_oee.iActualRecipe = Number(dadosPlc.iActualRecipe)\n    dados_oee.tempoTranscorrido = Number(tempoTranscorrido.toFixed(2))\n    \n \n    \n    dados_oee.percDisp = (tProducao) / (tempoTranscorrido - tProg) * 100\n    dados_oee.percDisp = Number(dados_oee.percDisp.toFixed(2))\n\n    dados_oee.percEfic = (dados_oee.diProductionCounter) / ((tProducao * dados_oee.rNominalSpeed) / 60) * 100\n    dados_oee.percEfic = Number(dados_oee.percEfic.toFixed(2))\n    dados_oee.percQual = (((dados_oee.diProductionCounter) - (dados_oee.diCounterReject_r1 + dados_oee.diCounterReject_r2)) / dados_oee.diProductionCounter) * 100\n    dados_oee.percQual = isNaN(Number(dados_oee.percQual)) ? 0 : Number(Number(dados_oee.percQual).toFixed(2));\n\n    dados_oee.percOEE = dados_oee.percDisp * dados_oee.percEfic * dados_oee.percQual / 10000\n    dados_oee.percOEE = Number(dados_oee.percOEE.toFixed(2))\n    dados_oee.turno = Number(turno.turno)\n    dados_oee.tempoParadaProgramada = Number(tProg.toFixed(2))\n    dados_oee.tempoParadaNaoProgramada = Number(tNProg.toFixed(2))\n    dados_oee.dimetaProduzidos = 100000\n    dados_oee.rmetaPerf = 95.00\n    dados_oee.rmetaDisp = 90.00\n    dados_oee.rmetaQual = 99.00\n    dados_oee.rmetaOEE = 90.00\n    dados_oee.equip = String(config.machine_name)\n\n    ////teste limites - ocorre quando o node é desligado\n\n\n    if (dados_oee.percDisp < 0) {\n        dados_oee.percDisp = 0\n    } else if (dados_oee.percDisp > 100) {\n        dados_oee.percDisp = 100\n    }\n\n    if (dados_oee.percEfic < 0) {\n        dados_oee.percEfic = 0\n    } else if (dados_oee.percEfic > 100) {\n        dados_oee.percEfic = 100\n    }\n\n    if (dados_oee.percQual < 0) {\n        dados_oee.percQual = 0\n    } else if (dados_oee.percQual > 100) {\n        dados_oee.percQual = 100\n    }\n\n    if (dados_oee.percOEE < 0) {\n        dados_oee.percOEE = 0\n    } else if (dados_oee.percOEE > 100) {\n        dados_oee.percOEE = 100\n    }\n\n\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    let calculo = {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 3,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": dados_oee\n        }\n    }\n\n    flow.set(\"calculoOEE\", calculo);\n\n\n    return calculo\n\n\n\n}\n\nfunction verificaAnotacao() {\n\n}\n\n\nfunction verificaAnotacaoInicioTurno() {\n    console.log(\"Inicio Turno \" + turno.turno)\n    ////Zera os valores para iniciar novo turno\n    flow.set(\"sumProg_NProgr\", [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }]);\n    if (sm_atual.state == 6 && sm_atual.mode == 2) {\n        //PRODUZINDO\n    } else {\n        //NAO PRODUZINDO\n        anotaInicioParada()\n        msg2 = null\n    }\n\n\n\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 880,
        "wires": [
            [
                "0d9bfc5aaaaaf6a1"
            ],
            [
                "2b8a6a18d2f8246e"
            ],
            [
                "4189ea1ac08cfe89",
                "fa2f1cd6f1f0cb6f"
            ]
        ]
    },
    {
        "id": "6fbfd38d79576c9d",
        "type": "inject",
        "z": "efdf08540372187c",
        "g": "a20be756120cb6cd",
        "name": "cycle",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 960,
        "wires": [
            [
                "024210e29ff41771",
                "2b2a64daa13770c5",
                "bc43ab727d89e1cf"
            ]
        ]
    },
    {
        "id": "0d9bfc5aaaaaf6a1",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "36e0a8d93e168eca",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 660,
        "wires": [
            [
                "d988aca52df7676d",
                "f03886165e3b68ad"
            ]
        ]
    },
    {
        "id": "35a9d66b71af8ce6",
        "type": "comment",
        "z": "efdf08540372187c",
        "g": "36e0a8d93e168eca",
        "name": "Registro Troca de Turno",
        "info": "",
        "x": 1020,
        "y": 560,
        "wires": []
    },
    {
        "id": "805bd46265e03770",
        "type": "http request",
        "z": "efdf08540372187c",
        "g": "36e0a8d93e168eca",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "",
                "valueType": "other",
                "valueValue": ""
            }
        ],
        "x": 1710,
        "y": 660,
        "wires": [
            [
                "b8ad4b7884ab360a"
            ]
        ]
    },
    {
        "id": "b8ad4b7884ab360a",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "36e0a8d93e168eca",
        "name": "debug 442",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 1930,
        "y": 660,
        "wires": []
    },
    {
        "id": "da2edc594c7f2e93",
        "type": "comment",
        "z": "efdf08540372187c",
        "g": "36e0a8d93e168eca",
        "name": "Turno + Tempo Transcorrido",
        "info": "",
        "x": 1040,
        "y": 720,
        "wires": []
    },
    {
        "id": "d988aca52df7676d",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "36e0a8d93e168eca",
        "name": "Get fimTurnoOEE",
        "func": "msg.payload = flow.get(\"fimTurnoOEE\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 660,
        "wires": [
            [
                "c0655d230138e960",
                "fb972ba32da3d741"
            ]
        ]
    },
    {
        "id": "c0655d230138e960",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "36e0a8d93e168eca",
        "name": "statusMachineId",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.machine_event.payload.statusMachineId = 2\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.machine_event.payload.statusMachineId = 2\n            break;\n        case 5:\n            msg.payload.machine_event.payload.statusMachineId = 5\n            break;\n        case 6:\n            msg.payload.machine_event.payload.statusMachineId = 1\n            break;\n        case 9:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 660,
        "wires": [
            [
                "805bd46265e03770"
            ]
        ]
    },
    {
        "id": "4189ea1ac08cfe89",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "9fac6a3acf5a6c7d",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1240,
        "wires": [
            [
                "62120dcb12398297",
                "f3f90be86d303d5b",
                "49d1e937fd4b0187",
                "b781c86c0d6d1559"
            ]
        ]
    },
    {
        "id": "885af9fe1a876291",
        "type": "http request",
        "z": "efdf08540372187c",
        "g": "9fac6a3acf5a6c7d",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1910,
        "y": 1260,
        "wires": [
            [
                "d542ab92164c8982"
            ]
        ]
    },
    {
        "id": "d542ab92164c8982",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "9fac6a3acf5a6c7d",
        "name": "debug 443",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2130,
        "y": 1260,
        "wires": []
    },
    {
        "id": "62120dcb12398297",
        "type": "delay",
        "z": "efdf08540372187c",
        "g": "9fac6a3acf5a6c7d",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "120",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1400,
        "y": 1220,
        "wires": [
            [
                "c4ec9be173f26954"
            ]
        ]
    },
    {
        "id": "f03886165e3b68ad",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "6eb4c319d59056c7",
        "name": "Config Line Troca de Turno",
        "func": "msg.payload = flow.get(\"fimTurnoOEE\");\n\n//////////REESCREVE NUMERO DO TURNO PARA REGISTRO/////////////////////\n/////////////////REFTORAR ESTA LOGICA/////////////////////////////////\n//////////////////////////////////////////////////////////////////////\nconst turnos_times = global.get(\"turnos_times\"); \t\nconst num_turno = turnos_times.length\nlet turno = msg.payload.machine_event.payload.turno\nturno = turno - 1\nif (turno == 0) {\n    turno = turnos_times.length\n}\nmsg.payload.machine_event.payload.turno = turno\n/////////////////////////////////////////////////////////////////////\n\nlet config = flow.get(\"config\");\nif (config.send == true) {\n\nlet productionsCounters = global.get(\"productionsCounters\");\n\n\nlet agora = new Date()\n\n\n    msg.payload.machine_event.payload.diCounter = productionsCounters\n\n\n    msg.payload = {\n        \"production_line_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 2,\n            \"payload\": msg.payload.machine_event.payload\n        }\n    }\n    /////********************************************* */\n    msg.url = config.url_line \n    msg.headers = {};\n    msg.headers['Authorization'] = config.token_line\n\n\n\n    return msg;\n}\n//return msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 520,
        "wires": [
            [
                "cdf5402c4dd1b8d4"
            ]
        ]
    },
    {
        "id": "cdf5402c4dd1b8d4",
        "type": "http request",
        "z": "efdf08540372187c",
        "g": "6eb4c319d59056c7",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1710,
        "y": 520,
        "wires": [
            [
                "8bd629033bf83194"
            ]
        ]
    },
    {
        "id": "8bd629033bf83194",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "6eb4c319d59056c7",
        "name": "debug 444",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 1970,
        "y": 520,
        "wires": []
    },
    {
        "id": "df021e087ff0b6f2",
        "type": "comment",
        "z": "efdf08540372187c",
        "g": "6eb4c319d59056c7",
        "name": "Registro Fim de Turno Linha",
        "info": "",
        "x": 1340,
        "y": 460,
        "wires": []
    },
    {
        "id": "8bacb296a5e455da",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "82c20ff581541e75",
        "name": "Config Line registro Linha",
        "func": "let config = flow.get(\"config\");\nif (config.send == true) {\n\n    let event_payload = msg.payload.machine_event.payload\n    const agora = new Date();\n    let year = agora.getFullYear();\n    //node.warn(agora);\n\n    let productionsCounters = global.get(\"productionsCounters\");\n\n    event_payload.producaoEntrada = productionsCounters[\"1\"]\n    event_payload.producaoSaida = productionsCounters[\"2\"]\n\n\n    msg.payload = {\n        \"production_line_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 1,\n            \"payload\": event_payload\n        }\n    }\n    msg.url = msg.config.url_line \n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_line\n    return msg;\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 1460,
        "wires": [
            [
                "b617f6edcbd75cd5"
            ]
        ]
    },
    {
        "id": "fa13a635396c232d",
        "type": "http request",
        "z": "efdf08540372187c",
        "g": "82c20ff581541e75",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1970,
        "y": 1460,
        "wires": [
            [
                "8eef73dc99609c04"
            ]
        ]
    },
    {
        "id": "8eef73dc99609c04",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "82c20ff581541e75",
        "name": "debug 446",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2190,
        "y": 1460,
        "wires": []
    },
    {
        "id": "f3f90be86d303d5b",
        "type": "delay",
        "z": "efdf08540372187c",
        "g": "82c20ff581541e75",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "120",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1100,
        "y": 1440,
        "wires": [
            [
                "8bacb296a5e455da"
            ]
        ]
    },
    {
        "id": "69633fcbbf925dbc",
        "type": "comment",
        "z": "efdf08540372187c",
        "g": "82c20ff581541e75",
        "name": "Registro Linha",
        "info": "",
        "x": 1710,
        "y": 1420,
        "wires": []
    },
    {
        "id": "8c235fd86156d79e",
        "type": "comment",
        "z": "efdf08540372187c",
        "g": "36e0a8d93e168eca",
        "name": "Reset Counters",
        "info": "",
        "x": 1280,
        "y": 820,
        "wires": []
    },
    {
        "id": "8fc6b85e141b70dd",
        "type": "eth-ip out",
        "z": "efdf08540372187c",
        "g": "36e0a8d93e168eca",
        "endpoint": "23151f9958dc1da4",
        "variable": "cmdZIA",
        "program": "",
        "name": "",
        "x": 1900,
        "y": 740,
        "wires": []
    },
    {
        "id": "fb972ba32da3d741",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "36e0a8d93e168eca",
        "name": "set reset Counters",
        "func": "let cmdResetAtivo = true\nflow.set(\"cmdResetAtivo\", cmdResetAtivo);\n\nmsg.payload ={}\nmsg.payload.xResetCounter = 1\nmsg.payload.xResetReject_r1 = 1\nmsg.payload.xResetReject_r2 = 1\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 740,
        "wires": [
            [
                "8fc6b85e141b70dd",
                "8c96db8bf1700990"
            ]
        ]
    },
    {
        "id": "19cbdb4181db38f6",
        "type": "inject",
        "z": "efdf08540372187c",
        "g": "36e0a8d93e168eca",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1030,
        "y": 780,
        "wires": [
            [
                "2ad1c34864270579"
            ]
        ]
    },
    {
        "id": "c4ec9be173f26954",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "9fac6a3acf5a6c7d",
        "name": "statusMachineId",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.machine_event.payload.statusMachineId = 3\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        case 5:\n            msg.payload.machine_event.payload.statusMachineId = 5\n            break;\n        case 6:\n            msg.payload.machine_event.payload.statusMachineId = 1\n            break;\n        case 9:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        case 11:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1260,
        "wires": [
            [
                "885af9fe1a876291"
            ]
        ]
    },
    {
        "id": "b617f6edcbd75cd5",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "82c20ff581541e75",
        "name": "statusLineId",
        "func": "\n//////// status LINHA ///////////////\n\nlet config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.production_line_event.payload.statusLineId = 3\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.production_line_event.payload.statusLineId = 3\n            break;\n        case 5:\n            msg.payload.production_line_event.payload.statusLineId = 3\n            break;\n        case 6:\n            msg.payload.production_line_event.payload.statusLineId = 1\n            break;\n        case 9:\n            msg.payload.production_line_event.payload.statusLineId = 3\n            break;\n        case 11:\n            msg.payload.production_line_event.payload.statusLineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.production_line_event.payload.statusLineId });\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1460,
        "wires": [
            [
                "fa13a635396c232d"
            ]
        ]
    },
    {
        "id": "49d1e937fd4b0187",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "82c20ff581541e75",
        "name": "imediato na troca de estado - com filtro****",
        "func": "let ignora_registro_linha = flow.get(\"ignora_registro_linha\");\n\nif (ignora_registro_linha == 0) {\n\n\n    let ant_mode = context.get(\"ant_mode\") || 0;\n    let ant_state = context.get(\"ant_state\") || 0;\n    let config = flow.get(\"config\");\n    let name_var_global = \"plc\" + config.machine_name\n    let dadosPlc = global.get(name_var_global)\n    let mode = dadosPlc.mode\n    let state = dadosPlc.state\n\n    if (ant_mode != mode || ant_state != state) {\n        context.set(\"ant_mode\", mode);\n        context.set(\"ant_state\", state);\n        return msg\n    }\n\n\n} else {\n\n    ignora_registro_linha = ignora_registro_linha - 1\n    flow.set(\"ignora_registro_linha\", ignora_registro_linha);\n\n}\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1520,
        "wires": [
            [
                "8bacb296a5e455da",
                "8b753b4eac45f5de"
            ]
        ]
    },
    {
        "id": "b781c86c0d6d1559",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "9fac6a3acf5a6c7d",
        "name": "imediato na troca de estado - com filtro****",
        "func": "let ignora_registro_maquina = flow.get(\"ignora_registro_maquina\");\n\nif (ignora_registro_maquina == 0) {\n\n\n    let ant_mode = context.get(\"ant_mode\") || 0;\n    let ant_state = context.get(\"ant_state\") || 0;\n    let config = flow.get(\"config\");\n    let name_var_global = \"plc\" + config.machine_name\n    let dadosPlc = global.get(name_var_global)\n    let mode = dadosPlc.mode\n    let state = dadosPlc.state\n\n    if (ant_mode != mode || ant_state != state) {\n        context.set(\"ant_mode\", mode);\n        context.set(\"ant_state\", state);\n        return msg\n    }\n\n\n} else {\n\n    ignora_registro_maquina = ignora_registro_maquina - 1\n    flow.set(\"ignora_registro_maquina\", ignora_registro_maquina);\n\n}\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 1300,
        "wires": [
            [
                "c4ec9be173f26954"
            ]
        ]
    },
    {
        "id": "310dbdb550901fbc",
        "type": "file in",
        "z": "efdf08540372187c",
        "g": "80be69b542072bc7",
        "name": "Lista Falhas",
        "filename": "alm_list_01",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": true,
        "x": 370,
        "y": 140,
        "wires": [
            [
                "02b38b950d164ec6"
            ]
        ]
    },
    {
        "id": "c6a703f4ea86a561",
        "type": "inject",
        "z": "efdf08540372187c",
        "g": "80be69b542072bc7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "310dbdb550901fbc"
            ]
        ]
    },
    {
        "id": "c84da0368b3ff481",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "80be69b542072bc7",
        "name": "debug 492",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 140,
        "wires": []
    },
    {
        "id": "fa2f1cd6f1f0cb6f",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "035d91433855b845",
        "name": "monitor troca de estado",
        "func": "let config = flow.get(\"config\");\n//msg.config = config\n\n\n\nlet sm_atual = flow.get(\"sm_atual\");\nlet sm_anterior = flow.get(\"sm_anterior_iot\") || { mode: \"0\", state: \"0\" };\n\nif ((sm_atual.mode != sm_anterior.mode) || (sm_atual.state != sm_anterior.state)) {\n\n    //node.warn(\"mudou\");\n    flow.set(\"sm_anterior_iot\", sm_atual);\n\n    msg.machine_id = config.machine_id\n\n    return msg;\n\n\n\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1720,
        "wires": [
            [
                "7bbff6591f41d1d1"
            ]
        ]
    },
    {
        "id": "7bbff6591f41d1d1",
        "type": "json",
        "z": "efdf08540372187c",
        "g": "035d91433855b845",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1270,
        "y": 1720,
        "wires": [
            [
                "9b6a9f86a218be57"
            ]
        ]
    },
    {
        "id": "4036f4a06b8f8740",
        "type": "inject",
        "z": "efdf08540372187c",
        "g": "035d91433855b845",
        "name": "60 segundos",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1420,
        "y": 1640,
        "wires": [
            [
                "95900e409ee961a5"
            ]
        ]
    },
    {
        "id": "95900e409ee961a5",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "035d91433855b845",
        "name": "consulta turno e ajsute de filtro",
        "func": "// Recupera a lista de horários de turnos a partir de uma variável global e o índice do turno desejado da variável de fluxo.\nlet horarios_turnos = global.get(\"turnos_times\");\nlet turno = flow.get(\"memo_turno\");\n\n// Faz uma cópia da lista de horários para evitar modificar o valor original na variável global.\nlet turnos_times = JSON.parse(JSON.stringify(horarios_turnos));\n\n// Obtém a data e hora atuais.\nconst today = new Date();\n// Define o início do dia (00:00:00) para a data atual. Essa data será usada para calcular o tempo em segundos desde a meia-noite.\nconst startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n// Converte o início do dia em formato epoch (segundos desde 1 de janeiro de 1970).\nconst epochTime = Math.floor(startOfDay.getTime() / 1000);\n\n\n\n\n\n// Define o ajuste de fuso horário em segundos. Neste caso, são 10800 segundos (ou 3 horas).\nconst timezoneOffset = -7200; // 2 horas em segundos\n\n// Define a quantidade de segundos em um dia, para lidar com turnos que ultrapassam a meia-noite.\nconst secondsInDay = 86400; // 24 horas em segundos\n\n// Itera sobre cada turno para calcular e ajustar os horários de início e fim.\nfor (let index = 0; index < turnos_times.length; index++) {\n    // Remove propriedades desnecessárias de cada turno para simplificar os dados.\n    delete turnos_times[index].created_at;\n    delete turnos_times[index].updated_at;\n    delete turnos_times[index].id;\n\n    // Extrai a parte do horário de início do turno (no formato 'HH:MM:SS') para conversão em segundos.\n    const [hours_s, minutes_s, seconds_s] = turnos_times[index].start_time.substring(11, 19).split(':').map(Number);\n    // Converte o horário de início em segundos: (horas * 3600) + (minutos * 60) + segundos.\n    const totalSecondsStart = hours_s * 3600 + minutes_s * 60 + seconds_s;\n\n    // Extrai a parte do horário de fim do turno (também no formato 'HH:MM:SS') para conversão em segundos.\n    const [hours_e, minutes_e, seconds_e] = turnos_times[index].end_time.substring(11, 19).split(':').map(Number);\n    // Converte o horário de fim em segundos: (horas * 3600) + (minutos * 60) + segundos.\n    const totalSecondsEnd = hours_e * 3600 + minutes_e * 60 + seconds_e;\n\n    // Calcula o horário de início absoluto do turno, somando o epoch do dia, o horário de início em segundos e o ajuste de fuso horário.\n    let start_time = new Date((epochTime + totalSecondsStart + timezoneOffset) * 1000);\n    // Calcula o horário de fim absoluto do turno da mesma forma.\n    let end_time = new Date((epochTime + totalSecondsEnd + timezoneOffset) * 1000);\n\n    // Verifica se o horário de início é maior que o horário de fim, indicando que o turno ultrapassa a meia-noite.\n    if (start_time > end_time) {\n        // Ajusta o horário de fim, somando um dia (em segundos) para representar corretamente um turno que termina no dia seguinte.\n        end_time = new Date((epochTime + totalSecondsEnd + timezoneOffset + secondsInDay) * 1000);\n    }\n\n    // Converte os horários de início e fim ajustados para o formato ISO e atualiza no objeto do turno.\n    turnos_times[index].start_time = start_time.toISOString();\n    turnos_times[index].end_time = end_time.toISOString();\n}\n\n// Define a saída da mensagem como o turno específico desejado (indexado com base no número do turno menos 1).\nmsg.payload = turnos_times[turno - 1];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 1720,
        "wires": [
            [
                "4e59058a1dc05ced",
                "a0352ee4d1777d31",
                "bdfe30c73d6909d5",
                "3983ec6785798ea0"
            ]
        ]
    },
    {
        "id": "07dbdfff6be73712",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "035d91433855b845",
        "name": "monta resumo de tempos",
        "func": "const data = msg.payload;\n\n// Converte para o formato desejado, agrupando por `mode` e `state`\nconst result = data.reduce((acc, { mode, state, total_active_duration }) => {\n  if (!acc[mode]) acc[mode] = {}; // Cria a entrada para o mode se não existir\n  acc[mode][state] = (acc[mode][state] || 0) + Number(parseFloat(total_active_duration)); // Soma o total_active_duration\n  return acc;\n}, {});\n\n// verifica se a soma de todos os estados esta consistente com o tempo de turno transcorrifo\nlet config = flow.get(\"config\");\nlet turno = global.get(\"turno_\" + config.factory)\n//node.warn(turno);\n\n\n\n\n// Inicializa `msg.payload` com o objeto `omac`\nmsg.payload = { omac: result };\n\n\n\n// verifica o estado atual e altera o omac\nlet lastState = flow.get(\"lastState\");\n\nif (lastState && lastState[0] && lastState[0].payload) {\n  const mode = lastState[0].payload.machine_event.payload.mode;\n  const state = lastState[0].payload.machine_event.payload.state;\n\n  // Verifica se mode e state existem em msg.payload.omac antes de somar\n  if (msg.payload.omac[mode] && msg.payload.omac[mode][state] !== undefined) {\n    msg.payload.omac[mode][state] =\n      Number(parseFloat(msg.payload.omac[mode][state])) + Number(parseFloat(lastState[1]));\n  }\n}\n\n\n\n\nlet totalProductive = 0;\nlet totalNonProductive = 0;\n\n// Calcula os totais produtivos e não produtivos\nObject.entries(result).forEach(([mode, states]) => {\n  Object.entries(states).forEach(([state, activeMinutes]) => {\n    const minutes = Number(parseFloat(activeMinutes));\n\n    if (state === \"6\" && mode === \"2\") {\n      totalProductive += minutes;\n    } else {\n      totalNonProductive += minutes;\n    }\n  });\n});\n\n\n\n// Armazena `msg.payload` no fluxo para acesso posterior\nflow.set(\"temposOEE_parcial\", msg.payload);\n\n\n\n// Adiciona os somatórios ao `msg.payload`\nmsg.payload.somas = {\n  totalProductive: totalProductive,\n  totalNonProductive: totalNonProductive\n};\n\n\n\n// Retorna `msg` atualizado\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1720,
        "wires": [
            [
                "ed4ab7a8085fafc6"
            ]
        ]
    },
    {
        "id": "471f12bdd9aa1ca9",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "035d91433855b845",
        "name": "debug 515",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 1800,
        "wires": []
    },
    {
        "id": "6922a50cc6b7fade",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "035d91433855b845",
        "name": "consulta ultimo registro",
        "func": "msg.payload[0].payload = JSON.parse(msg.payload[0].payload)\nflow.set(\"lastState\", msg.payload);\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 1780,
        "wires": [
            [
                "471f12bdd9aa1ca9"
            ]
        ]
    },
    {
        "id": "643e7e1129f458c7",
        "type": "inject",
        "z": "efdf08540372187c",
        "g": "035d91433855b845",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2120,
        "y": 1920,
        "wires": [
            [
                "844e9b6450179a8e"
            ]
        ]
    },
    {
        "id": "5d5ea873fe77da47",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "035d91433855b845",
        "name": "debug 516",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2750,
        "y": 1920,
        "wires": []
    },
    {
        "id": "844e9b6450179a8e",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "035d91433855b845",
        "name": "function 267",
        "func": "let horarios_turnos = global.get(\"turnos_times\");\nlet turno = flow.get(\"memo_turno\");\n\nlet turnos_times = JSON.stringify(horarios_turnos)\nturnos_times = JSON.parse(turnos_times);\n//node.warn(turnos_times);\n\nconst today = new Date();\nconst startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\nconst epochTime = Math.floor(startOfDay.getTime() / 1000); // Converte de milissegundos para segundos\n//node.warn(epochTime); // Exibe a data de hoje às 00:00 em epoch (segundos)\n\nfor (let index = 0; index < turnos_times.length; index++) {\n    delete turnos_times[index].created_at\n    delete turnos_times[index].updated_at\n    delete turnos_times[index].id\n\n    const timePart_start = turnos_times[index].start_time.substring(11, 19); // '06:00:00'\n    // Divide a hora, minuto e segundo\n    const [hours_s, minutes_s, seconds_s] = timePart_start.split(':').map(Number);\n    // Converte para segundos\n    const totalMinutes_start = ((hours_s * 3600) + (minutes_s * 60) + (seconds_s));\n\n\n    const timePart_end = turnos_times[index].end_time.substring(11, 19); // '06:00:00'\n    // Divide a hora, minuto e segundo\n    const [hours_e, minutes_e, seconds_e] = timePart_end.split(':').map(Number);\n    // Converte para segundos\n    const totalMinutes_end = ((hours_e * 3600) + (minutes_e * 60) + (seconds_e));\n\n    //node.warn(totalMinutes_start);\n    //node.warn(totalMinutes_end);\n\n    const start_time = new Date((epochTime + totalMinutes_start)*1000)\n    const end_time = new Date((epochTime + totalMinutes_end)*1000)\n\n  \n\n    turnos_times[index].start_time = start_time.toISOString()\n    turnos_times[index].end_time = end_time.toISOString()\n\n\n\n  \n\n}\n\nmsg.payload = turnos_times[turno-1]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 1920,
        "wires": [
            [
                "2f73ed9e6dd8dc44"
            ]
        ]
    },
    {
        "id": "77036d9152fb6b26",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "035d91433855b845",
        "name": "debug 519",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 1860,
        "wires": []
    },
    {
        "id": "ed4ab7a8085fafc6",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "035d91433855b845",
        "name": "debug 524",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 1720,
        "wires": []
    },
    {
        "id": "9b6a9f86a218be57",
        "type": "postgresql",
        "z": "efdf08540372187c",
        "g": "035d91433855b845",
        "name": "",
        "query": "INSERT INTO public.machine_events\n(id_machine, payload)\nVALUES({{{msg.machine_id}}}, '{{{msg.payload}}}');",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1430,
        "y": 1720,
        "wires": [
            [
                "95900e409ee961a5"
            ]
        ]
    },
    {
        "id": "4e59058a1dc05ced",
        "type": "postgresql",
        "z": "efdf08540372187c",
        "g": "035d91433855b845",
        "name": "",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n),\nfiltered_intervals AS (\n    SELECT \n        id_machine,\n        mode,\n        state,\n        \n        -- Calcula o início e o fim ajustados do evento, limitados pelo intervalo de filtro\n        GREATEST(timestamp at time zone 'UTC' at time zone 'GMT-3', '{{{msg.payload.start_time}}}'::timestamp) AS adjusted_start,\n        LEAST(next_timestamp at time zone 'UTC' at time zone 'GMT-3', '{{{msg.payload.end_time}}}'::timestamp) AS adjusted_end\n        \n    FROM \n        state_intervals\n    WHERE \n        next_timestamp at time zone 'UTC' at time zone 'GMT-3' > '{{{msg.payload.start_time}}}'::timestamp  -- start_filter\n        AND timestamp at time zone 'UTC' at time zone 'GMT-3' <'{{{msg.payload.end_time}}}'::timestamp     -- end_filter\n        AND id_machine = 1  -- substitua 1 pelo id_machine desejado\n)\nSELECT \n    id_machine,\n    mode,\n    state,\n    \n    -- Calcula o tempo ativo total ajustado dentro do intervalo\n    SUM(\n        CASE \n            WHEN adjusted_end > adjusted_start THEN \n                EXTRACT(EPOCH FROM (adjusted_end - adjusted_start)) / 60  -- Tempo em minutos\n            ELSE \n                0\n        END\n    ) AS total_active_duration\nFROM \n    filtered_intervals\nGROUP BY \n    id_machine,\n    mode,\n    state\nORDER BY \n    id_machine,\n    mode,\n    state;\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2110,
        "y": 1720,
        "wires": [
            [
                "40aa07c146df5b89"
            ]
        ]
    },
    {
        "id": "2f73ed9e6dd8dc44",
        "type": "postgresql",
        "z": "efdf08540372187c",
        "g": "035d91433855b845",
        "name": "",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n)\nSELECT \n    id,\n    timestamp,\n    id_machine,\n    payload,\n    mode,\n    state,\n    next_timestamp,\n    -- Calcula o tempo que o estado ficou ativo\n    CASE \n        WHEN next_timestamp IS NOT NULL THEN \n            AGE(next_timestamp, timestamp)\n        ELSE \n            NULL\n    END AS active_duration\nFROM \n    state_intervals\nORDER BY \n    timestamp;",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2530,
        "y": 1920,
        "wires": [
            [
                "5d5ea873fe77da47"
            ]
        ]
    },
    {
        "id": "a0352ee4d1777d31",
        "type": "postgresql",
        "z": "efdf08540372187c",
        "g": "035d91433855b845",
        "name": "",
        "query": "SELECT *\nFROM machine_events\nWHERE id_machine =1\nORDER BY timestamp DESC\nlimit 1\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2110,
        "y": 1780,
        "wires": [
            [
                "6922a50cc6b7fade"
            ]
        ]
    },
    {
        "id": "bdfe30c73d6909d5",
        "type": "postgresql",
        "z": "efdf08540372187c",
        "d": true,
        "g": "035d91433855b845",
        "name": "Lista FIltrada Tempo e Maquina",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n)\nSELECT \n    id,\n    timestamp AS start_time,       -- Hora inicial do estado\n    next_timestamp AS end_time,    -- Hora final do estado\n    id_machine,\n    payload,\n    mode,\n    state,\n    -- Calcula o tempo que o estado ficou ativo em minutos\n    CASE \n        WHEN next_timestamp IS NOT NULL THEN \n            EXTRACT(EPOCH FROM (next_timestamp - timestamp)) / 60  -- Tempo em minutos\n        ELSE \n            NULL\n    END AS active_duration\nFROM \n    state_intervals\nWHERE \n    -- Filtros aplicados na tabela de saída\n    next_timestamp > '{{{msg.payload.start_time}}}'::timestamp  -- start_filter\n    AND timestamp < '{{{msg.payload.end_time}}}'::timestamp   -- end_filter\n    AND id_machine = 1  -- substitua 123 pelo id_machine desejado\nORDER BY \n    timestamp;\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2170,
        "y": 1860,
        "wires": [
            [
                "77036d9152fb6b26"
            ]
        ]
    },
    {
        "id": "00cc58897ce8d661",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "5aad9b6400357313",
        "name": "debug 517",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 1100,
        "wires": []
    },
    {
        "id": "2b2a64daa13770c5",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "5aad9b6400357313",
        "name": "Calc Actual Stop",
        "func": "const lastState = flow.get(\"lastState\");\n\nconst lastTime = new Date(lastState[0].timestamp);\nconst currentTime = new Date();\n\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  AJUSTE DE TEMPO xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//const timezoneOffset = currentTime.getTimezoneOffset();\nconst timezoneOffset = 0\n\n\n\nlastTime.setHours(lastTime.getHours() - timezoneOffset / 60);\n\nnode.status({ fill: \"red\", shape: \"ring\", text: lastState[1] });\n\n\n\n\n// Converte para segundos\nconst lastTimeInSeconds = Math.floor(lastTime.getTime() / 1000);\nconst currentTimeInSeconds = Math.floor(currentTime.getTime() / 1000);\n\nconst timeDifference = (currentTimeInSeconds - lastTimeInSeconds) / 60;\n\nmsg.payload = {}\n\nmsg.payload.actualDuration = lastState[1] = timeDifference\nmsg.payload.actualState = lastState[0].payload.machine_event.payload.state\nmsg.payload.actualMode = lastState[0].payload.machine_event.payload.mode\n\n\nconst tempoTranscorrido = flow.get(\"tempoTranscorrido\");\n\nif (lastState[1] > tempoTranscorrido) {\n    lastState[1] = tempoTranscorrido\n\n}\nflow.set(\"lastState\", lastState);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar sumProg_NProgr_parcial = flow.get(\"sumProg_NProgr_parcial\");\nlet parada = flow.get(\"parada\");\nif (!isNaN(parada.tParadaAtual)) {\n    //node.warn(parada.active);\n    \n    var calcSumProg_NProgr = JSON.parse(JSON.stringify(sumProg_NProgr_parcial))\n    if (parada.active) {\n\n        if (parada.programada == 'true') {\n            //node.warn(\"Programada\");\n            calcSumProg_NProgr[0].soma_programada = Number(sumProg_NProgr_parcial[0].soma_programada) + Number(parada.tParadaAtual)\n            calcSumProg_NProgr[0].soma_nao_programada = Number(sumProg_NProgr_parcial[0].soma_nao_programada)\n\n            //node.warn(sumProg_NProgr[0].soma_programada);\n        } else {\n            \n            //node.warn(\"Nao Programada\");\n            //node.warn(Number(sumProg_NProgr_parcial[0].soma_nao_programada));\n            //node.warn(Number(parada.tParadaAtual));\n            calcSumProg_NProgr[0].soma_programada = Number(sumProg_NProgr_parcial[0].soma_programada)\n            calcSumProg_NProgr[0].soma_nao_programada = Number(sumProg_NProgr_parcial[0].soma_nao_programada) + Number(parada.tParadaAtual)\n            //node.warn(sumProg_NProgr[0].soma_nao_programada);\n        }\n    } else {\n        calcSumProg_NProgr = sumProg_NProgr_parcial\n\n    }\n} else {\n    calcSumProg_NProgr = sumProg_NProgr_parcial\n    \n}\n\nflow.set(\"sumProg_NProgr\", calcSumProg_NProgr) || [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1100,
        "wires": [
            [
                "00cc58897ce8d661"
            ]
        ]
    },
    {
        "id": "3881ba9c27429672",
        "type": "comment",
        "z": "efdf08540372187c",
        "g": "4416956ce4d8ab76",
        "name": "Registro Fim da Parada de Linha",
        "info": "",
        "x": 1070,
        "y": 1020,
        "wires": []
    },
    {
        "id": "2b30380c161332a0",
        "type": "http request",
        "z": "efdf08540372187c",
        "g": "4416956ce4d8ab76",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1970,
        "y": 920,
        "wires": [
            [
                "fefaed64494b5c15"
            ]
        ]
    },
    {
        "id": "fefaed64494b5c15",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "4416956ce4d8ab76",
        "name": "debug 277",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2190,
        "y": 920,
        "wires": []
    },
    {
        "id": "2b8a6a18d2f8246e",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "4416956ce4d8ab76",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n\n    //msg.payload.machine_event.payload.ID = 999;\n\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 940,
        "wires": [
            [
                "9bf639856ef693d0"
            ]
        ]
    },
    {
        "id": "9bf639856ef693d0",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "4416956ce4d8ab76",
        "name": "function 257",
        "func": "\nif (msg.payload != null) {\n\n    if (msg.payload.machine_event.payload.ID != 8888) {\n        return [msg, msg]\n    } else return [msg, msg];\n\n\n\n\n} else {\n\n    node.warn(\"Mudanca de estado sem registro\");\n\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 940,
        "wires": [
            [
                "2b30380c161332a0",
                "3d996fa172a8d99e"
            ],
            [
                "76ba6c696481e0b1"
            ]
        ]
    },
    {
        "id": "059e10caead1c97f",
        "type": "postgresql",
        "z": "efdf08540372187c",
        "g": "4416956ce4d8ab76",
        "name": "",
        "query": "INSERT INTO public.appoint\n(payload)\nVALUES('{{{msg.payload}}}');",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1790,
        "y": 1040,
        "wires": [
            [
                "27f50b18f06246f3"
            ]
        ]
    },
    {
        "id": "27f50b18f06246f3",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "4416956ce4d8ab76",
        "name": "debug 494",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 1040,
        "wires": []
    },
    {
        "id": "76ba6c696481e0b1",
        "type": "json",
        "z": "efdf08540372187c",
        "g": "4416956ce4d8ab76",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1610,
        "y": 1040,
        "wires": [
            [
                "059e10caead1c97f"
            ]
        ]
    },
    {
        "id": "785c329bc80e82d0",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "4416956ce4d8ab76",
        "name": "debug 508",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 1080,
        "wires": []
    },
    {
        "id": "40aa07c146df5b89",
        "type": "delay",
        "z": "efdf08540372187c",
        "g": "035d91433855b845",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2360,
        "y": 1720,
        "wires": [
            [
                "07dbdfff6be73712"
            ]
        ]
    },
    {
        "id": "7bf7eed408d332bc",
        "type": "file in",
        "z": "efdf08540372187c",
        "g": "80be69b542072bc7",
        "name": "",
        "filename": "alm_list_01",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 350,
        "y": 200,
        "wires": [
            [
                "d3953d7556dfe589"
            ]
        ]
    },
    {
        "id": "139bf18b0547e988",
        "type": "inject",
        "z": "efdf08540372187c",
        "g": "80be69b542072bc7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "7bf7eed408d332bc"
            ]
        ]
    },
    {
        "id": "d3953d7556dfe589",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "80be69b542072bc7",
        "name": "debug 530",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 200,
        "wires": []
    },
    {
        "id": "f75766599cc83025",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "80be69b542072bc7",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.statechanged_id",
        "statusType": "msg",
        "x": 1050,
        "y": 120,
        "wires": []
    },
    {
        "id": "78f57291b3eff84f",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "80be69b542072bc7",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.statechanged_reason",
        "statusType": "msg",
        "x": 1050,
        "y": 180,
        "wires": []
    },
    {
        "id": "fa80d776e95b20c4",
        "type": "http request",
        "z": "efdf08540372187c",
        "g": "30ab8418bdc5a930",
        "name": "GET StopReasons",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1670,
        "y": 60,
        "wires": [
            [
                "53d44cbaa73be8dc"
            ]
        ]
    },
    {
        "id": "53d44cbaa73be8dc",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "30ab8418bdc5a930",
        "name": "function 269",
        "func": "const data = JSON.parse(msg.payload)\nlet id = Math.floor(msg.id_maq)\n\nif (Number.isNaN(id)) {\n    id = null\n}\n\n\nmsg.payload = {}\n\n\nfunction StopsByMachine(data, selectedId = null) {\n    const machineMap = new Map();\n    data.forEach(event => {\n        event.machines.forEach(machine => {\n            if (!machineMap.has(machine.id)) {\n                machineMap.set(machine.id, { id: machine.id, name: machine.name, stopReasons: [] });\n            }\n            machineMap.get(machine.id).stopReasons.push([event.plc_code, event.name, event.expected]);\n        });\n    });\n\n    if (selectedId !== null) {\n        return machineMap.has(selectedId) ? machineMap.get(selectedId) : null;\n    }\n\n    return Array.from(machineMap.values());\n}\n\n\n\nfunction listUniqueMachineNames(data) {\n\n    const machines = new Map();\n    data.forEach(event => {\n        event.machines.forEach(machine => {\n            machines.set(machine.id, machine.name);\n        });\n    });\n\n    const result = Array.from(machines).map(([id, name]) => ({ id, name }));\n\n    return result\n\n\n}\n\n\n\n// Chamar a função e imprimir o resultado\nmsg.payload.maquinas = listUniqueMachineNames(data);\n\n\n\n// Executar a função e imprimir o resultado\nmsg.payload.stopreasons = StopsByMachine(data, id);\n\nflow.set(\"stopreasons\", msg.payload.stopreasons);\n\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 60,
        "wires": [
            [
                "90fe4cedc0a487c0"
            ]
        ]
    },
    {
        "id": "6e17612af0486269",
        "type": "inject",
        "z": "efdf08540372187c",
        "g": "30ab8418bdc5a930",
        "name": "",
        "props": [],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1330,
        "y": 60,
        "wires": [
            [
                "54d7ddbf7c894ec5"
            ]
        ]
    },
    {
        "id": "90fe4cedc0a487c0",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "30ab8418bdc5a930",
        "name": "debug 534",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 60,
        "wires": []
    },
    {
        "id": "54d7ddbf7c894ec5",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "30ab8418bdc5a930",
        "name": "Config",
        "func": "\nlet config = flow.get(\"config\")\n\n//msg.id_maq = msg.req.params.id_maq\nmsg.id_maq = 1\n\n//node.warn(\"Aqui\");\n\nif (config.send == true) {\n  \n\n    msg.url = config.url + \"/stop_reasons.json\"\n    msg.headers = {}\n    msg.headers['Authorization'] = config.token_line\n    msg.payload = {}\n\n\nreturn msg\n\n\n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 60,
        "wires": [
            [
                "fa80d776e95b20c4"
            ]
        ]
    },
    {
        "id": "de81a866c61723b5",
        "type": "eth-ip out",
        "z": "efdf08540372187c",
        "g": "30ab8418bdc5a930",
        "endpoint": "23151f9958dc1da4",
        "variable": "listaParadas",
        "program": "",
        "name": "",
        "x": 2390,
        "y": 120,
        "wires": []
    },
    {
        "id": "57efd2d0242790c1",
        "type": "inject",
        "z": "efdf08540372187c",
        "d": true,
        "g": "30ab8418bdc5a930",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "100",
        "topic": "",
        "x": 1330,
        "y": 120,
        "wires": [
            [
                "a215a88a4fbea9c9"
            ]
        ]
    },
    {
        "id": "a215a88a4fbea9c9",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "30ab8418bdc5a930",
        "name": "lista paradas",
        "func": "msg.payload = {}\n\n\nlet lista_paradas = [\n    {\n        \"id\": 2,\n        \"descr\": \"\",\n        \"cod_class\": 0, \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    }\n]\n\n\nconst paradas = flow.get(\"stopreasons\");\n\nnode.warn(lista_paradas);\nnode.warn(paradas);\n\nfor (let index = 0; index < paradas.stopReasons.length; index++) {\n    //node.warn(paradas.stopReasons[index][0]);\n    lista_paradas[index].id = 9999\n    lista_paradas[index].descr = paradas.stopReasons[index][1]\n    lista_paradas[index].cod_class = paradas.stopReasons[index][0]\n    lista_paradas[index].ZZZZZZZZZZudtZIA_Par3 = 5\n    lista_paradas[index].progr = paradas.stopReasons[index][2]\n}\n\n\nnode.warn(lista_paradas);\n\nmsg.payload.paradas = lista_paradas\n\nreturn msg\n\n\n// msg.payload = {\n//     \"id\": 23,\n//     \"descr\": \"\",\n//     \"cod_class\": 0,\n//     \"ZZZZZZZZZZudtZIA_Par3\": 0,\n//     \"progr\": false\n// }\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 120,
        "wires": [
            [
                "de81a866c61723b5",
                "119ce049b305a8ed"
            ]
        ]
    },
    {
        "id": "119ce049b305a8ed",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "30ab8418bdc5a930",
        "name": "debug 538",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1910,
        "y": 180,
        "wires": []
    },
    {
        "id": "18a7f665ef4cea5b",
        "type": "inject",
        "z": "efdf08540372187c",
        "g": "694a2dec03617d65",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "37b210f42f14ebd5"
            ]
        ]
    },
    {
        "id": "37b210f42f14ebd5",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "694a2dec03617d65",
        "name": "CONFIG",
        "func": "//configuracaao de linha\n\nlet config = {}\n\nconfig.machine_name = \"enchedora\"\n\nconfig.factory = 1\nconfig.machine_id = 1\nconfig.token_machine = \"Bearer \" + \"49c10ddc3fe0a764679dc0fd60b35a2aadba85e3\"\nconfig.token_line = \"Bearer \" + \"00bc757a398cc98d299fd6fc2119929c48647db9\"\nconfig.url = \"http://127.0.0.1:3003\"\nconfig.url_machine = config.url + \"/machine_events\"\nconfig.url_line = config.url + \"/production_line_events\"\nconfig.send = true /// habilita POST\n\nflow.set(\"config\", config);\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 300,
        "wires": [
            [
                "4d77c2c68ee9f834"
            ]
        ]
    },
    {
        "id": "4d77c2c68ee9f834",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "694a2dec03617d65",
        "name": "debug 439",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 300,
        "wires": []
    },
    {
        "id": "3983ec6785798ea0",
        "type": "postgresql",
        "z": "efdf08540372187c",
        "g": "035d91433855b845",
        "name": "",
        "query": "SELECT\n    SUM(CASE \n            WHEN (payload::jsonb->'machine_event'->'payload'->>'Programada')::boolean = true THEN \n                (payload::jsonb->'machine_event'->'payload'->>'tParada')::numeric \n            ELSE 0 \n        END) AS soma_programada,\n    SUM(CASE \n            WHEN (payload::jsonb->'machine_event'->'payload'->>'Programada')::boolean = false THEN \n                (payload::jsonb->'machine_event'->'payload'->>'tParada')::numeric \n            ELSE 0 \n        END) AS soma_nao_programada\nFROM public.appoint\nWHERE \n    to_timestamp((payload::jsonb->'machine_event'->'payload'->>'InicioParada')::bigint / 1000) AT TIME ZONE 'UTC' >= '{{{msg.payload.start_time}}}'\n    AND to_timestamp((payload::jsonb->'machine_event'->'payload'->>'FimParada')::bigint / 1000) AT TIME ZONE 'UTC' <= '{{{msg.payload.end_time}}}'\n    AND ((payload::jsonb->'machine_event'->'payload'->>'machine_id')::int) = 1;\n    ",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2110,
        "y": 1660,
        "wires": [
            [
                "f4cadb21c090b954"
            ]
        ]
    },
    {
        "id": "8272b84ded03cfce",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "035d91433855b845",
        "name": "debug 540",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 1660,
        "wires": []
    },
    {
        "id": "f4cadb21c090b954",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "035d91433855b845",
        "name": "SET Prog e Nao Pog",
        "func": "const soma_programada = Number(msg.payload[0].soma_programada) || 0\nconst soma_nao_programada = Number(msg.payload[0].soma_nao_programada) || 0\n\nconst sumProg_NProgr_parcial = [{\n    \"soma_programada\":soma_programada,\n    \"soma_nao_programada\": soma_nao_programada\n}]\n\nflow.set(\"sumProg_NProgr_parcial\", sumProg_NProgr_parcial);\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2580,
        "y": 1660,
        "wires": [
            [
                "8272b84ded03cfce"
            ]
        ]
    },
    {
        "id": "02b38b950d164ec6",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "80be69b542072bc7",
        "name": "function 271",
        "func": "flow.set(\"alm_list\", msg.payload);\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 140,
        "wires": [
            [
                "c84da0368b3ff481"
            ]
        ]
    },
    {
        "id": "1b9faa5832092eaf",
        "type": "eth-ip in",
        "z": "efdf08540372187c",
        "endpoint": "23151f9958dc1da4",
        "mode": "single",
        "variable": "listaParadas",
        "program": "",
        "name": "",
        "gatherMetrics": false,
        "includeTimestamp": false,
        "x": 1250,
        "y": 300,
        "wires": [
            [
                "decfb8168666842d"
            ]
        ]
    },
    {
        "id": "decfb8168666842d",
        "type": "debug",
        "z": "efdf08540372187c",
        "name": "debug 551",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1810,
        "y": 300,
        "wires": []
    },
    {
        "id": "8b753b4eac45f5de",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "82c20ff581541e75",
        "name": "debug 554",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 1520,
        "wires": []
    },
    {
        "id": "9e25e428f249983c",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "80be69b542072bc7",
        "name": "debug 557",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 100,
        "wires": []
    },
    {
        "id": "914c4fd919e76fac",
        "type": "link in",
        "z": "efdf08540372187c",
        "g": "4416956ce4d8ab76",
        "name": "apontamento maquina",
        "links": [
            "8453896c5860d555"
        ],
        "x": 935,
        "y": 1080,
        "wires": [
            [
                "0d9a448ddc4f27c0"
            ]
        ]
    },
    {
        "id": "0d9a448ddc4f27c0",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "4416956ce4d8ab76",
        "name": "Atualiza Parada - Apontamento",
        "func": "const config = flow.get(\"config\");\n\nlet parada = flow.get(\"parada\");\n\nparada.statechanged_id = msg.payload.newStopReason[1]\nparada.statechanged_reason = msg.payload.newStopReason[0]\nparada.programada = msg.payload.newStopReason[2]\nparada.justifica = true\n\n\nflow.set(\"parada\", parada);\nglobal.set(\"parada\" + config.machine_name, parada);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1080,
        "wires": [
            [
                "785c329bc80e82d0"
            ]
        ]
    },
    {
        "id": "6323af1c002b6765",
        "type": "eth-ip in",
        "z": "efdf08540372187c",
        "g": "9edf498d12953cec",
        "endpoint": "23151f9958dc1da4",
        "mode": "single",
        "variable": "DosadoZIA",
        "program": "",
        "name": "",
        "gatherMetrics": true,
        "includeTimestamp": true,
        "x": 980,
        "y": 2040,
        "wires": [
            [
                "61730b840fed31d0"
            ]
        ]
    },
    {
        "id": "3b0431247e75142e",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "9edf498d12953cec",
        "name": "debug 563",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 2040,
        "wires": []
    },
    {
        "id": "61730b840fed31d0",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "9edf498d12953cec",
        "name": "payload Dosagem",
        "func": "const config = flow.get(\"config\");\nconst plcenchedora = global.get(\"plcenchedora\");\n\nlet envaseCC ={}\n\nconst plcenvaseCC =msg.payload \n// node.warn(\"my warning\");\n// node.warn(plcenvaseCC)\n\nif (Number.isInteger(plcenvaseCC.value.numValv)) {\n    //\n} else {\n    envaseCC.valv =0\n    return\n}\n\n//envaseCC.num_valv= 20\nenvaseCC.equip = config.machine_id\nenvaseCC.timeStamp = new Date()\nenvaseCC.valv = plcenvaseCC.value.numValv\nenvaseCC.tDuracao = plcenvaseCC.value.TempoDosagem;\nenvaseCC.peso = plcenvaseCC.value.Peso\nenvaseCC.lote = plcenvaseCC.value.Lote\nenvaseCC.produto = plcenchedora.strRecipeName\n\n\nmsg.payload = envaseCC\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 2040,
        "wires": [
            [
                "b7fe870146adb11e",
                "254c8b5101e67a73"
            ]
        ]
    },
    {
        "id": "b7fe870146adb11e",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "9edf498d12953cec",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nlet agora = new Date()\n\n msg.payload = {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 7,\n            \"payload\": msg.payload\n        }\n    }\n\n\n\n\nif (msg.config.send == true) {\n\n    //msg.payload.machine_event.payload.ID = 999;\n\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 2040,
        "wires": [
            [
                "7c3f7258f49fd537",
                "fff8125f3e4c460f"
            ]
        ]
    },
    {
        "id": "7c3f7258f49fd537",
        "type": "http request",
        "z": "efdf08540372187c",
        "g": "9edf498d12953cec",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1840,
        "y": 2040,
        "wires": [
            [
                "3b0431247e75142e"
            ]
        ]
    },
    {
        "id": "fff8125f3e4c460f",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "9edf498d12953cec",
        "name": "debug 564",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 2100,
        "wires": []
    },
    {
        "id": "254c8b5101e67a73",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "9edf498d12953cec",
        "name": "debug 565",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 2100,
        "wires": []
    },
    {
        "id": "a0c937f8f347a78b",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "e44ddcc86370dbeb",
        "name": "Alarme",
        "func": "let memo_aux_id_falha = context.get(\"aux_id_falha\");\nif (msg.payload.aux_id_falha != memo_aux_id_falha) {\n    if (msg.payload.aux_id_falha != 0 && msg.payload.aux_id_falha != 9999) {\n        let config = flow.get(\"config\");\n        let dados_alm = {\n            TimeStamp: new Date(),\n            nameMachine: config.machine_name,\n            ID: msg.payload.aux_id_falha,\n            reason: msg.payload.lastalm\n        };\n        const d = new Date();\n        let minutes = d.getMinutes();\n        let agora = new Date()\n        msg.payload = {\n            \"authenticity_token\": \"L3uhfD4yxArDD6++xrFmFX9LLKfX5PyMstpcUL0zi6SRrHAzTqfBCj1iKfYp4o6GLK9emMZYiAmxF1T9C7BQ==\",\n            \"machine_event\": {\n                \"timestamp(1i)\": agora.getFullYear().toString(),\n                \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n                \"timestamp(3i)\": agora.getDate().toString(),\n                \"timestamp(4i)\": agora.getHours().toString(),\n                \"timestamp(5i)\": agora.getMinutes().toString(),\n                \"event_type_id\": 5,\n                //        \"timestamp(3i)\": d.getDay(),\n                //        \"timestamp(2i)\": d.getMonth(),\n                //        \"timestamp(1i)\": d.getFullYear(),\n                //        \"timestamp(4i)\": d.getHours(),\n                //        \"timestamp(5i)\": d.getMinutes(),\n                \"payload\": dados_alm\n            }\n        }\n        context.set(\"aux_id_falha\", dados_alm.ID);\n        return msg\n    }\n}\ncontext.set(\"aux_id_falha\", msg.payload.aux_id_falha);\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 2400,
        "wires": [
            [
                "b8f2656dd7beb037"
            ]
        ]
    },
    {
        "id": "6809a0c9911c6e55",
        "type": "http request",
        "z": "efdf08540372187c",
        "g": "e44ddcc86370dbeb",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1830,
        "y": 2400,
        "wires": [
            [
                "180a75ec0a227215"
            ]
        ]
    },
    {
        "id": "180a75ec0a227215",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "e44ddcc86370dbeb",
        "name": "debug 165",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 2400,
        "wires": []
    },
    {
        "id": "b8f2656dd7beb037",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "e44ddcc86370dbeb",
        "name": "function 61",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 2400,
        "wires": [
            [
                "6809a0c9911c6e55",
                "e4cf9531ea2faaad"
            ]
        ]
    },
    {
        "id": "8c96db8bf1700990",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "36e0a8d93e168eca",
        "name": "function 276",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nnode.warn(dadosPlc.diProductionCounter);\n\nif (dadosPlc.diProductionCounter!='0') {\n    return msg\n}\n\nlet cmdResetAtivo = flow.get(\"cmdResetAtivo\");\ncmdResetAtivo = false\nflow.set(\"cmdResetAtivo\", cmdResetAtivo);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 820,
        "wires": [
            [
                "fb972ba32da3d741",
                "90fd49340d710eda"
            ]
        ]
    },
    {
        "id": "90fd49340d710eda",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "36e0a8d93e168eca",
        "name": "debug 566",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1970,
        "y": 820,
        "wires": []
    },
    {
        "id": "2ad1c34864270579",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "36e0a8d93e168eca",
        "name": "function 277",
        "func": "const cmdResetAtivo = flow.get(\"cmdResetAtivo\");\nif (cmdResetAtivo) {\n    return msg\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 760,
        "wires": [
            [
                "fb972ba32da3d741"
            ]
        ]
    },
    {
        "id": "76a957f658ac723b",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "80be69b542072bc7",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.lastalm",
        "statusType": "msg",
        "x": 1050,
        "y": 240,
        "wires": []
    },
    {
        "id": "0a957346d34ec9b0",
        "type": "link out",
        "z": "efdf08540372187c",
        "g": "80be69b542072bc7",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "eb0a2148f0ff442c"
        ],
        "x": 995,
        "y": 300,
        "wires": []
    },
    {
        "id": "e4cf9531ea2faaad",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "a20be756120cb6cd",
        "name": "debug 570",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 2260,
        "wires": []
    },
    {
        "id": "eb0a2148f0ff442c",
        "type": "link in",
        "z": "efdf08540372187c",
        "g": "a20be756120cb6cd",
        "name": "link in 1",
        "links": [
            "0a957346d34ec9b0"
        ],
        "x": 635,
        "y": 2420,
        "wires": [
            [
                "a0c937f8f347a78b"
            ]
        ]
    },
    {
        "id": "a96b1b2ddd6fbcdf",
        "type": "link in",
        "z": "efdf08540372187c",
        "g": "532317e4f0ba9397",
        "name": "link in 4",
        "links": [
            "615e1f011ffb0b71"
        ],
        "x": 55,
        "y": 1420,
        "wires": [
            [
                "fdedbeec0bcfeb57"
            ]
        ]
    },
    {
        "id": "26c323568ce9b735",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "532317e4f0ba9397",
        "name": "anota inicio parada linha",
        "func": "const config = flow.get(\"config\");\nconst guilt = msg.payload[config.machine_name]\nlet name_var_global = \"plc\" + config.machine_name\n\n\n\nif (guilt) {\n    node.warn(\"my warning\");\n    //atualiza a hora da parada com a hora que a enchedora (gargalo) parou\n    let parada = flow.get(\"parada\");\n    const parada_linha = JSON.parse(JSON.stringify(parada))\n    parada_linha.hora = new Date().getTime()\n    parada_linha.machine_id = config.machine_id\n    parada_linha.machine_name = config.machine_name\n    parada_linha.active = true\n    global.set(\"parada_linha\", parada_linha)\n    return msg;\n\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1420,
        "wires": [
            [
                "7f4bd91c0c30504d"
            ]
        ]
    },
    {
        "id": "fdedbeec0bcfeb57",
        "type": "delay",
        "z": "efdf08540372187c",
        "g": "532317e4f0ba9397",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 1420,
        "wires": [
            [
                "26c323568ce9b735"
            ]
        ]
    },
    {
        "id": "dd3e50eecc1f178e",
        "type": "link in",
        "z": "efdf08540372187c",
        "g": "532317e4f0ba9397",
        "name": "link in 24",
        "links": [
            "31d753b6c2f98a0f"
        ],
        "x": 155,
        "y": 1560,
        "wires": [
            [
                "3673cbe35e88ddc7"
            ]
        ]
    },
    {
        "id": "3d996fa172a8d99e",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "4416956ce4d8ab76",
        "name": "debug 711",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 960,
        "wires": []
    },
    {
        "id": "3673cbe35e88ddc7",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "532317e4f0ba9397",
        "name": "fim parada linha",
        "func": "\n\n\nlet config = flow.get(\"config\");\nlet retorno = new Date()\nlet parada = global.get(\"parada_linha\");\n\nif (parada.machine_id == config.machine_id) {\n\n    let tParada = (retorno.getTime() - parada.hora) / 1000 / 60\n    //let paradasSoma = flow.get(\"paradasSoma\") || flow.set(\"paradasSoma\", { \"Prog\": 0, \"Nprog\": 0 })\n    let turno = global.get(\"turno_\" + config.factory)\n    let machine_event = {}\n\n    machine_event = {\n        \"timestamp(1i)\": retorno.getFullYear().toString(),\n        \"timestamp(2i)\": (retorno.getMonth() + 1).toString(),\n        \"timestamp(3i)\": retorno.getDate().toString(),\n        \"timestamp(4i)\": retorno.getHours().toString(),\n        \"timestamp(5i)\": retorno.getMinutes().toString(),\n        \"timestamp(6i)\": retorno.getSeconds().toString(),\n        \"event_type_id\": 4,\n        \"payload\": {\n            \"aux_id_falha\": parada.aux_id_falha,\n            \"InicioParada\": parada.hora,\n            \"FimParada\": new Date().getTime(),\n            \"tParada\": Number(tParada.toFixed(2)),\n            \"ID\": isNaN(Number(parada.statechanged_id)) ? 0 : Number(parada.statechanged_id), // Garantir que ID seja um número\n            \"Reason\": parada.statechanged_reason,\n            \"ModeReason\": parada.mode,\n            \"StateReason\": parada.state || 0,\n            \"Programada\": parada.programada,\n            \"turno_atual\": turno.turno,\n            \"equip\": config.machine_name,\n            \"machine_id\": config.machine_id,\n            \"guilt\": false\n        }\n    }\n\n    parada.active = false\n    msg.payload.machine_event = machine_event\n\n\n\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1480,
        "wires": [
            [
                "501d74f4edc2e3a0"
            ]
        ]
    },
    {
        "id": "fe2faa621a2610d9",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "532317e4f0ba9397",
        "name": "debug 712",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1480,
        "wires": []
    },
    {
        "id": "501d74f4edc2e3a0",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "532317e4f0ba9397",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n\n    //msg.payload.machine_event.payload.ID = 999;\n\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1480,
        "wires": [
            [
                "5f84dbbaf9c028a9"
            ]
        ]
    },
    {
        "id": "7f4bd91c0c30504d",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "532317e4f0ba9397",
        "name": "debug 713",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1420,
        "wires": []
    },
    {
        "id": "bc43ab727d89e1cf",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "532317e4f0ba9397",
        "name": "Update tempo parada linha",
        "func": "let parada_linha = global.get(\"parada_linha\");\n\nif (parada_linha.active) {\n    let retorno = new Date()\n    \n    let tParada = (retorno.getTime() - parada_linha.hora) / 1000 / 60\n    parada_linha.tParadaAtual = tParada\n\n\n\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "5f84dbbaf9c028a9",
        "type": "http request",
        "z": "efdf08540372187c",
        "g": "532317e4f0ba9397",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 1480,
        "wires": [
            [
                "fe2faa621a2610d9"
            ]
        ]
    },
    {
        "id": "d38d34395e52158a",
        "type": "modbustcp-read",
        "z": "efdf08540372187c",
        "g": "4038b5fda3e722e2",
        "name": "_1_UltimoPeso",
        "topic": "",
        "dataType": "HoldingRegister",
        "adr": "40001",
        "quantity": "100",
        "rate": "500",
        "rateUnit": "ms",
        "server": "4eef8aae49431f0c",
        "ieeeType": "single",
        "ieeeBE": "false",
        "x": 1600,
        "y": 2720,
        "wires": [
            [
                "61df3ead675a66b4"
            ]
        ]
    },
    {
        "id": "6155beca8ac90c6a",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "4038b5fda3e722e2",
        "name": "debug 577",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "msg",
        "x": 2750,
        "y": 2720,
        "wires": []
    },
    {
        "id": "61df3ead675a66b4",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "4038b5fda3e722e2",
        "name": "function 285",
        "func": "const array_ultimoPeso = [\n    msg.payload[0],\n    msg.payload[5],\n    msg.payload[10],\n    msg.payload[15],\n    msg.payload[20],\n    msg.payload[25],\n    msg.payload[30],\n    msg.payload[35],\n    msg.payload[40],\n    msg.payload[45],\n]\n\n\nconst soma = array_ultimoPeso.reduce((acc,val) => acc + val,0)\nconst media = soma / array_ultimoPeso.length\n\n\nmsg.payload = array_ultimoPeso\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 2720,
        "wires": [
            [
                "379eedac62f6364c",
                "a1a2e0ef82e753e6"
            ]
        ]
    },
    {
        "id": "d4bd4854c7d223b9",
        "type": "modbustcp-read",
        "z": "efdf08540372187c",
        "g": "4038b5fda3e722e2",
        "name": "_Parcial_PesoMedio",
        "topic": "",
        "dataType": "HoldingRegister",
        "adr": "43037",
        "quantity": "2",
        "rate": "500",
        "rateUnit": "ms",
        "server": "4eef8aae49431f0c",
        "ieeeType": "single",
        "ieeeBE": "false",
        "x": 1620,
        "y": 2840,
        "wires": [
            [
                "f504a92ff8c6b7c3"
            ]
        ]
    },
    {
        "id": "f504a92ff8c6b7c3",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "4038b5fda3e722e2",
        "name": "debug 591",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "msg",
        "x": 1950,
        "y": 2840,
        "wires": []
    },
    {
        "id": "379eedac62f6364c",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "4038b5fda3e722e2",
        "name": "function 359",
        "func": "// Obtém o array de pesos do payload da mensagem\nlet pesos = msg.payload;\n\n// Armazenar a versão anterior da FIFO no contexto do nó\nlet pesosAnteriores = context.get('pesosAnteriores') || [];\n\n// Flag para verificar se houve alteração\nlet mudou = false;\n\n// Compara o conteúdo atual da FIFO com o anterior\nif (pesos.length === pesosAnteriores.length) {\n    for (let i = 0; i < pesos.length; i++) {\n        if (pesos[i] !== pesosAnteriores[i]) {\n            mudou = true;\n            break; // Se encontrar qualquer diferença, interrompe a verificação\n        }\n    }\n} else {\n    mudou = true;  // Se o número de elementos mudou, também consideramos que houve alteração\n}\n\n// Se a FIFO foi modificada (novo peso adicionado), registra o novo peso\nif (mudou) {\n    // Atualiza a FIFO anterior\n    context.set('pesosAnteriores', pesos);\n\n    // Registra o novo peso (último peso da FIFO)\n    msg.payload = {\n        novoPeso: pesos[0],\n        mensagem: `Novo peso registrado: ${pesos[pesos.length - 1]}`\n    };\n    return msg;\n} else {\n    msg.payload = { mensagem: 'Nenhuma mudança detectada na FIFO' };\n}\n\n// Retorna a mensagem\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2720,
        "wires": [
            [
                "3fcce5d32ca1055c"
            ]
        ]
    },
    {
        "id": "a1a2e0ef82e753e6",
        "type": "debug",
        "z": "efdf08540372187c",
        "g": "4038b5fda3e722e2",
        "name": "debug 745",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 2760,
        "wires": []
    },
    {
        "id": "90a47b07b473049f",
        "type": "comment",
        "z": "efdf08540372187c",
        "g": "4038b5fda3e722e2",
        "name": "Registro de peso varpe",
        "info": "# Registro de paso na Varpe\n### o peso sera registrado nos eventos da enchedora",
        "x": 1640,
        "y": 2640,
        "wires": []
    },
    {
        "id": "7ebfade0124f2bb6",
        "type": "http request",
        "z": "efdf08540372187c",
        "g": "4038b5fda3e722e2",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2550,
        "y": 2720,
        "wires": [
            [
                "6155beca8ac90c6a"
            ]
        ]
    },
    {
        "id": "3fcce5d32ca1055c",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "4038b5fda3e722e2",
        "name": "config",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 2720,
        "wires": [
            [
                "eb981eae55805c2d"
            ]
        ]
    },
    {
        "id": "eb981eae55805c2d",
        "type": "function",
        "z": "efdf08540372187c",
        "g": "4038b5fda3e722e2",
        "name": "function 361",
        "func": " let agora = new Date()\nlet new_weigth = msg.payload.novoPeso\n\n msg.payload = {\n            \"machine_event\": {\n                \"timestamp(1i)\": agora.getFullYear().toString(),\n                \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n                \"timestamp(3i)\": agora.getDate().toString(),\n                \"timestamp(4i)\": agora.getHours().toString(),\n                \"timestamp(5i)\": agora.getMinutes().toString(),\n                \"event_type_id\": 9,\n                //        \"timestamp(3i)\": d.getDay(),\n                //        \"timestamp(2i)\": d.getMonth(),\n                //        \"timestamp(1i)\": d.getFullYear(),\n                //        \"timestamp(4i)\": d.getHours(),\n                //        \"timestamp(5i)\": d.getMinutes(),\n                \"payload\": {\n                    \"peso\": new_weigth\n                }\n            }\n        }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 2720,
        "wires": [
            [
                "7ebfade0124f2bb6"
            ]
        ]
    },
    {
        "id": "1e640f5c3bfcfa51",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "6e2695762a84bff2",
        "name": "find line",
        "func": "let config = flow.get(\"config\");\n\nlet name_var_global = \"plc\" + config.machine_name\n\n\nlet plc = msg.payload.value\n\nlet cod = msg.payload.value.aux_id_falha\n\nconst lista_falha = flow.get(\"alm_list\");\n\n\nconst lines = lista_falha.split('\\n');\n//node.warn(lines);\n\n\n// Percorrer cada linha e dividi-la em colunas\nlines.forEach(line => {\n    const columns = line.split(',');\n    if (columns.length > 1) {\n        var id = columns[0].trim();\n        var desc_alm = columns[1].trim();\n        var desc_classe = columns[2].trim();\n        var classe = columns[3].trim();\n        var programadada = columns[4].trim();\n    }\n\n    if (cod == id) {\n        let str_cod = desc_classe\n        let class_cod = classe\n        let programada = Boolean(Number(programadada))\n        plc.statechanged_id = class_cod\n        plc.statechanged_reason = str_cod\n        plc.programada = programada\n        plc.lastalm = desc_alm\n\n\n        if (columns[0].trim() == 72) { // maquina bloqueada por acumulo\n            plc.blocked = true\n        } else plc.blocked = false\n\n\n\n        return\n\n\n\n    }\n\n    \n\n});\n\n\n\nplc = JSON.parse(JSON.stringify(plc))\nglobal.set(name_var_global, plc);\nmsg.payload = plc\nreturn msg\n\n\n\n//return msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 60,
        "wires": [
            [
                "d7346c542a2ff6c0",
                "d28aaa8528f140fe",
                "2ddc9e90622be922",
                "df743026bca5940e",
                "e52ad49b4bd23f12"
            ]
        ]
    },
    {
        "id": "d7346c542a2ff6c0",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "6e2695762a84bff2",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.aux_id_falha",
        "statusType": "msg",
        "x": 1050,
        "y": 60,
        "wires": []
    },
    {
        "id": "bf873b1a91276807",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "2f78077adae6b21a",
        "name": "Turnos, Tempos Acumulados",
        "func": "\nlet msg1 = new Object()\nlet msg2 = new Object()\nlet msg3 = new Object()\nlet config = flow.get(\"config\");\nlet a\n\n\n\nlet turno = global.get(\"turno_\" + config.factory)\nlet memo_turno = flow.get(\"memo_turno\") || 0\n\n\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\n\nlet sm_atual = {\n    \"state\": dadosPlc.state || 2,\n    \"mode\": dadosPlc.mode || 2\n}\nflow.set(\"sm_atual\", sm_atual);\nlet sm_anterior = flow.get(\"sm_anterior\") || flow.set(\"sm_anterior\", sm_atual)\n\n\nlet tempoTranscorrido\nif (memo_turno == turno.turno) { //&& turno.turno != 0\n    a = 1\n\n\n    flow.set(\"tempoTranscorrido\", turno.tempoTranscorrido);\n    tempoTranscorrido = turno.tempoTranscorrido\n\n    calculosOEE()\n\n} else {\n\n    a = 2\n\n    tempoTranscorrido = flow.get(\"tempoTranscorrido\") || 0\n\n}\n\n\n\nlet parada = flow.get(\"parada\") || { \"hora\": 0, \"state\": \"0\", \"mode\": \"0\", \"active\": false, \"tParadaAtual\": 0 }\n\n\n\n// Atualiza o tempo da parada atual\nif ((sm_atual.state != 6 || sm_atual.mode != 2) && turno.turno != 0) {\n    let agora = new Date().getTime()\n    let tParadaAtual = agora - parada.hora\n    parada.tParadaAtual = tParadaAtual / 60 / 1000\n    flow.set(\"parada\", parada);\n    global.set(\"parada\" + name_var_global, parada);\n}\n\n\n\n\n// Aciona saida indicando que houve mudanca do modo de operacao\nif (sm_atual.mode != sm_anterior.mode || sm_atual.state != sm_anterior.state) {\n    //Verifica se a maquina saiu do estado Execute\n    //Sempre que a maquina sair de execute devemos anotar o horario da parada\n    if ((sm_anterior.state == 6 && sm_anterior.mode == 2) && (sm_atual.state != sm_anterior.state || sm_atual.mode != sm_anterior.mode)) {\n        console.log(\"NÃO PRODUZINDO\")\n        anotaInicioParada()\n        msg2 = null\n    } else if ((sm_anterior.state != 6 || sm_anterior.mode != 2) && (sm_atual.state == 6 && sm_atual.mode == 2)) {\n        console.log(\"PRODUZINDO\")\n        msg2.payload = consolidaParada()\n        calculosOEE()\n        flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n    }\n    flow.set(\"sm_anterior\", sm_atual)\n\n\n    return [null, msg2]\n}\n\n\n\n\n\n/// rotinas que devem ser executadas na troca de turno\nif (memo_turno != turno.turno) {\n    msg1 = null\n    msg2 = null\n\n    console.log(\"TrocaTurno\")\n    node.warn(\"TrocaTurno\")\n\n    if (memo_turno != 0) {\n        console.log(\"Fim turno \" + memo_turno)\n        msg1 = { payload: 1 }\n\n        if (parada.active == true) { // se no fim do turno estiver em parada consolida\n            msg2 = {}\n            msg2.payload = {}\n            msg2.payload = consolidaParada()\n\n            calculosOEE()\n\n            flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n            if (turno.turno != 0) { // se entrar em um novo turno reinicia a parada\n                console.log(\"Inicio turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n                anotaInicioParada()\n\n            }\n        } else {\n            if (turno.turno != 0) {\n                console.log(\"Iniccio Turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n            }\n        }\n\n\n        calculosOEE()\n        let calculoOEE = flow.get(\"calculoOEE\");\n        flow.set(\"fimTurnoOEE\", calculoOEE);\n        flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n\n\n\n    } else if (memo_turno == 0) {\n        msg1 = null\n        console.log(\"verificaAnotacaoTurno\") // verifica e cria msg2 se necssario e zera anotacao de parada\n\n        verificaAnotacaoInicioTurno()\n\n    } else {\n\n        msg1 = null\n    }\n\n    //anota registro de turno\n\n\n\n    flow.set(\"memo_turno\", turno.turno)\n\n    return [msg1, msg2]\n}\nmsg3.payload = calculosOEE()\nmsg3.payload.machine_event.event_type_id = 6\nreturn [null, null, msg3]\n\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n\nfunction anotaInicioParada() {\n\n    console.log(\"inicio parada\")\n    node.warn(name_var_global);\n\n    let iParada = global.get(name_var_global);\n    let parada = {\n        \"hora\": new Date(),\n        \"state\": sm_atual.state || 0,\n        \"mode\": sm_atual.mode\n    }\n    flow.set(\"parada\", {\n        \"aux_id_falha\": Number(dadosPlc.aux_id_falha),\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true,\n        \"statechanged_id\": iParada.statechanged_id,\n        \"statechanged_reason\": iParada.statechanged_reason,\n        \"programada\": new Boolean(iParada.programada),\n        \"justifica\": false\n\n    });\n    global.set(\"parada\" + name_var_global, {\n        \"aux_id_falha\": Number(dadosPlc.aux_id_falha),\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true,\n        \"statechanged_id\": iParada.statechanged_id,\n        \"statechanged_reason\": iParada.statechanged_reason,\n        \"programada\": new Boolean(iParada.programada),\n        \"justifica\": false,\n        \"machine_id\": config.machine_id,\n        \"Equip\": config.machine_name\n\n    });\n    //console.clear()\n    //console.log(\"Inicio da Parada:\" + parada.hora.getHours() + \":\" + parada.hora.getMinutes())\n    return {\n        \"InicioParada\": parada.hora.getTime(),\n        \"FimParada\": 0,\n        \"tParada\": 0,\n        \"ID\": \"ID\",\n        \"Reason\": null,\n        \"ModeReason\": new Number(parada.mode),\n        \"StateReason\": new Number(parada.state) || 0,\n        \"Programada\": null,\n        \"Equip\": name_var_global\n    }\n}\n\nfunction consolidaParada() {\n    //////////////////////////////////////////////////////////////////////\n    //GAMBIA PARA ATRASAR O REGISTRO//////////////////////////////////////\n    //////////////////////////////////////////////////////////////////////\n\n    flow.set(\"ignora_registro_linha\", 20);\n    flow.set(\"ignora_registro_maquina\", 20);\n\n    ////fim da gambia///////////////////////////////////////////////////\n\n\n    console.log(\"fim parada\")\n    let retorno = new Date()\n    let parada = flow.get(\"parada\") || 0\n    let tParada = (retorno.getTime() - parada.hora) / 1000 / 60\n    let paradasSoma = flow.get(\"paradasSoma\") || flow.set(\"paradasSoma\", { \"Prog\": 0, \"Nprog\": 0 })\n\n    if (dadosPlc.programada == \"true\") {\n        paradasSoma.Prog = paradasSoma.Prog + tParada\n    } else {\n        paradasSoma.Nprog = paradasSoma.Nprog + tParada\n    }\n    flow.set(\"paradasSoma\", paradasSoma);\n    parada.active = false\n    flow.set(\"parada\", parada);\n    global.set(\"parada\" + name_var_global, parada);\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    return {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 8,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": {\n                \"aux_id_falha\": parada.aux_id_falha,\n                \"InicioParada\": parada.hora,\n                \"FimParada\": retorno.getTime(),\n                \"tParada\": Number(tParada.toFixed(2)),\n                \"ID\": isNaN(Number(parada.statechanged_id)) ? 0 : Number(parada.statechanged_id), // Garantir que ID seja um número\n                \"Reason\": parada.statechanged_reason,\n                \"ModeReason\": parada.mode,\n                \"StateReason\": parada.state || 0,\n                \"Programada\": parada.programada,\n                \"turno_atual\": turno.turno,\n                \"equip\": config.machine_name,\n                \"machine_id\": config.machine_id\n            }\n        }\n    }\n}\n\nfunction calculosOEE() {\n\n\n    //msg.filename = \".\\supZIA\\registroTurno_\" + name_var_global + \".json\"\n\n    var sumProg_NProgr = flow.get(\"sumProg_NProgr\") || [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }];\n\n    let dados_oee = {}\n    let tNProg = Number(sumProg_NProgr[0].soma_nao_programada)\n    let tProg = Number(sumProg_NProgr[0].soma_programada)\n    let tProducao = Number(tempoTranscorrido - (tProg + tNProg))\n\n    node.status({ fill: \"red\", shape: \"ring\", text: dados_oee.percDisp });\n\n    if (dadosPlc.mode == 2 && dadosPlc.state == 6) {\n        dados_oee.statusMachine = \"Rodando\"\n    } else dados_oee.statusMachine = \"Parada\"\n\n    ////////////\n    dados_oee.statusConexao = true\n    dados_oee.mode = Number(dadosPlc.mode)\n    dados_oee.state = Number(dadosPlc.state) || 0\n    dados_oee.rNominalSpeed = Number(dadosPlc.rNominalSpeed)\n    dados_oee.rSetSpeed = Number(dadosPlc.rSetSpeed)\n    dados_oee.rActualSpeed = Number(dadosPlc.rActualSpeed)\n    dados_oee.strRecipeName = String(dadosPlc.strRecipeName)\n    dados_oee.strBottle = String(dadosPlc.strBottle)\n    dados_oee.strCap = String(dadosPlc.strCap)\n    dados_oee.diProductionCounter = Number(dadosPlc.diProductionCounter)\n    dados_oee.diCounterReject_r1 = Number(dadosPlc.diCounterReject_r1)\n    dados_oee.diCounterReject_r2 = Number(dadosPlc.diCounterReject_r2)\n    dados_oee.iActualRecipe = Number(dadosPlc.iActualRecipe)\n    dados_oee.tempoTranscorrido = Number(tempoTranscorrido.toFixed(2))\n    dados_oee.percDisp = (tProducao) / (tempoTranscorrido - tProg) * 100\n\n    var teste = {\n        tProducao: tProducao,\n        tempoTranscorrido: tempoTranscorrido,\n        tProg: tProg,\n        tNProg: tNProg,\n\n\n\n    }\n    dados_oee.teste = teste;\n\n    node.status({ fill: \"red\", shape: \"ring\", text: JSON.stringify(teste) });\n\n    dados_oee.percDisp = Number(dados_oee.percDisp.toFixed(2))\n    dados_oee.percEfic = (dados_oee.diProductionCounter) / ((tProducao * dados_oee.rNominalSpeed) / 60) * 100\n    dados_oee.percEfic = Number(dados_oee.percEfic.toFixed(2))\n    dados_oee.percQual = (((dados_oee.diProductionCounter) - (dados_oee.diCounterReject_r1 + dados_oee.diCounterReject_r2)) / dados_oee.diProductionCounter) * 100\n    dados_oee.percQual = isNaN(Number(dados_oee.percQual)) ? 0 : Number(Number(dados_oee.percQual).toFixed(2));\n    dados_oee.percOEE = dados_oee.percDisp * dados_oee.percEfic * dados_oee.percQual / 10000\n    dados_oee.percOEE = Number(dados_oee.percOEE.toFixed(2))\n    dados_oee.turno = Number(turno.turno)\n    dados_oee.tempoParadaProgramada = Number(tProg.toFixed(2))\n    dados_oee.tempoParadaNaoProgramada = Number(tNProg.toFixed(2))\n    dados_oee.dimetaProduzidos = 100000\n    dados_oee.rmetaPerf = 95.00\n    dados_oee.rmetaDisp = 90.00\n    dados_oee.rmetaQual = 99.00\n    dados_oee.rmetaOEE = 90.00\n    dados_oee.equip = String(config.machine_name)\n\n    ////teste limites - ocorre quando o node é desligado\n    if (dados_oee.percDisp < 0) {\n        dados_oee.percDisp = 0\n    } else if (dados_oee.percDisp > 100) {\n        dados_oee.percDisp = 100\n    }\n\n    if (dados_oee.percEfic < 0) {\n        dados_oee.percEfic = 0\n    } else if (dados_oee.percEfic > 100) {\n        dados_oee.percEfic = 100\n    }\n\n    if (dados_oee.percQual < 0) {\n        dados_oee.percQual = 0\n    } else if (dados_oee.percQual > 100) {\n        dados_oee.percQual = 100\n    }\n\n    if (dados_oee.percOEE < 0) {\n        dados_oee.percOEE = 0\n    } else if (dados_oee.percOEE > 100) {\n        dados_oee.percOEE = 100\n    }\n\n\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    let calculo = {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 3,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": dados_oee\n        }\n    }\n\n    flow.set(\"calculoOEE\", calculo);\n\n\n    return calculo\n\n\n\n}\n\nfunction verificaAnotacao() {\n\n}\n\n\nfunction verificaAnotacaoInicioTurno() {\n    console.log(\"Inicio Turno \" + turno.turno)\n    ////Zera os valores para iniciar novo turno\n    flow.set(\"sumProg_NProgr\", [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }]);\n    if (sm_atual.state == 6 && sm_atual.mode == 2) {\n        //PRODUZINDO\n    } else {\n        //NAO PRODUZINDO\n        anotaInicioParada()\n        msg2 = null\n    }\n\n\n\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 980,
        "wires": [
            [
                "66902439cec4eb3d"
            ],
            [
                "c37f93d5e6bbf487"
            ],
            [
                "995f7971412843d8",
                "901c46a4c1c87838"
            ]
        ]
    },
    {
        "id": "88bf93e95e7e42d5",
        "type": "inject",
        "z": "9063753adeaed04a",
        "g": "2f78077adae6b21a",
        "name": "cycle",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1060,
        "wires": [
            [
                "bf873b1a91276807",
                "d6d51a4a9c4e3f5d",
                "13dafc203bfb9604"
            ]
        ]
    },
    {
        "id": "66902439cec4eb3d",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "4093c33ac4d2ade3",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 820,
        "wires": [
            [
                "da55900bff16a211"
            ]
        ]
    },
    {
        "id": "492aa1beabacf2c6",
        "type": "comment",
        "z": "9063753adeaed04a",
        "g": "4093c33ac4d2ade3",
        "name": "Registro Troca de Turno",
        "info": "",
        "x": 1040,
        "y": 720,
        "wires": []
    },
    {
        "id": "1b072f6561ecb68b",
        "type": "http request",
        "z": "9063753adeaed04a",
        "g": "4093c33ac4d2ade3",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "",
                "valueType": "other",
                "valueValue": ""
            }
        ],
        "x": 1730,
        "y": 820,
        "wires": [
            [
                "94ed20e9f1137568"
            ]
        ]
    },
    {
        "id": "94ed20e9f1137568",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "4093c33ac4d2ade3",
        "name": "debug 442",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 1950,
        "y": 820,
        "wires": []
    },
    {
        "id": "be1b6e7dcd9fda67",
        "type": "comment",
        "z": "9063753adeaed04a",
        "g": "4093c33ac4d2ade3",
        "name": "Turno + Tempo Transcorrido",
        "info": "",
        "x": 1060,
        "y": 880,
        "wires": []
    },
    {
        "id": "da55900bff16a211",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "4093c33ac4d2ade3",
        "name": "Get fimTurnoOEE",
        "func": "msg.payload = flow.get(\"fimTurnoOEE\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 820,
        "wires": [
            [
                "4a59232e7bf4e769",
                "10ccfe054e44d8ab"
            ]
        ]
    },
    {
        "id": "4a59232e7bf4e769",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "4093c33ac4d2ade3",
        "name": "statusMachineId",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.machine_event.payload.statusMachineId = 2\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.machine_event.payload.statusMachineId = 2\n            break;\n        case 5:\n            msg.payload.machine_event.payload.statusMachineId = 5\n            break;\n        case 6:\n            msg.payload.machine_event.payload.statusMachineId = 1\n            break;\n        case 9:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 820,
        "wires": [
            [
                "1b072f6561ecb68b"
            ]
        ]
    },
    {
        "id": "995f7971412843d8",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "4faeae360b4dc114",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1500,
        "wires": [
            [
                "a1a00ffedd643962",
                "7defd8ee9170caeb"
            ]
        ]
    },
    {
        "id": "9a3f1f128e784937",
        "type": "http request",
        "z": "9063753adeaed04a",
        "g": "4faeae360b4dc114",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1910,
        "y": 1520,
        "wires": [
            [
                "b7587cde2106aaa8"
            ]
        ]
    },
    {
        "id": "b7587cde2106aaa8",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "4faeae360b4dc114",
        "name": "debug 443",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2130,
        "y": 1520,
        "wires": []
    },
    {
        "id": "a1a00ffedd643962",
        "type": "delay",
        "z": "9063753adeaed04a",
        "g": "4faeae360b4dc114",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "120",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1400,
        "y": 1480,
        "wires": [
            [
                "a091ff8d1c0f1be6"
            ]
        ]
    },
    {
        "id": "8aaaac840932b674",
        "type": "comment",
        "z": "9063753adeaed04a",
        "g": "4093c33ac4d2ade3",
        "name": "Reset Counters",
        "info": "",
        "x": 1220,
        "y": 1020,
        "wires": []
    },
    {
        "id": "0b8ab66aeb7555a9",
        "type": "eth-ip out",
        "z": "9063753adeaed04a",
        "g": "4093c33ac4d2ade3",
        "endpoint": "8d756ed66187c2a2",
        "variable": "cmdZIA",
        "program": "",
        "name": "",
        "x": 1740,
        "y": 900,
        "wires": []
    },
    {
        "id": "a091ff8d1c0f1be6",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "4faeae360b4dc114",
        "name": "statusMachineId",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.machine_event.payload.statusMachineId = 3\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        case 5:\n            msg.payload.machine_event.payload.statusMachineId = 5\n            break;\n        case 6:\n            msg.payload.machine_event.payload.statusMachineId = 1\n            break;\n        case 9:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1520,
        "wires": [
            [
                "9a3f1f128e784937"
            ]
        ]
    },
    {
        "id": "7defd8ee9170caeb",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "4faeae360b4dc114",
        "name": "imediato na troca de estado - com filtro****",
        "func": "let ignora_registro_maquina = flow.get(\"ignora_registro_maquina\");\n\nif (ignora_registro_maquina == 0) {\n\n\n    let ant_mode = context.get(\"ant_mode\") || 0;\n    let ant_state = context.get(\"ant_state\") || 0;\n    let config = flow.get(\"config\");\n    let name_var_global = \"plc\" + config.machine_name\n    let dadosPlc = global.get(name_var_global)\n    let mode = dadosPlc.mode\n    let state = dadosPlc.state\n\n    if (ant_mode != mode || ant_state != state) {\n        context.set(\"ant_mode\", mode);\n        context.set(\"ant_state\", state);\n        return msg\n    }\n\n\n} else {\n\n    ignora_registro_maquina = ignora_registro_maquina - 1\n    flow.set(\"ignora_registro_maquina\", ignora_registro_maquina);\n\n}\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 1560,
        "wires": [
            [
                "a091ff8d1c0f1be6"
            ]
        ]
    },
    {
        "id": "93ed1c8e26c4a2df",
        "type": "file in",
        "z": "9063753adeaed04a",
        "g": "6e2695762a84bff2",
        "name": "Lista Falhas",
        "filename": "alm_list_02",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": true,
        "x": 370,
        "y": 140,
        "wires": [
            [
                "43d25837214b40ec"
            ]
        ]
    },
    {
        "id": "8f29cebc30eb13a1",
        "type": "inject",
        "z": "9063753adeaed04a",
        "g": "6e2695762a84bff2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "93ed1c8e26c4a2df"
            ]
        ]
    },
    {
        "id": "7075595efe4ffad0",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "6e2695762a84bff2",
        "name": "debug 492",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 140,
        "wires": []
    },
    {
        "id": "901c46a4c1c87838",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "monitor troca de estado",
        "func": "let config = flow.get(\"config\");\n//msg.config = config\n\n\n\nlet sm_atual = flow.get(\"sm_atual\");\nlet sm_anterior = flow.get(\"sm_anterior_iot\") || { mode: \"0\", state: \"0\" };\n\nif ((sm_atual.mode != sm_anterior.mode) || (sm_atual.state != sm_anterior.state)) {\n\n    //node.warn(\"mudou\");\n    flow.set(\"sm_anterior_iot\", sm_atual);\n\n    msg.machine_id = config.machine_id\n\n    return msg;\n\n\n\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1840,
        "wires": [
            [
                "b19cf681a94fbfe8"
            ]
        ]
    },
    {
        "id": "b19cf681a94fbfe8",
        "type": "json",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1270,
        "y": 1840,
        "wires": [
            [
                "0d6f2d4d5895ebad"
            ]
        ]
    },
    {
        "id": "c598830276fabfcd",
        "type": "inject",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "60 segundos",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1420,
        "y": 1760,
        "wires": [
            [
                "99844bc9eb83c843"
            ]
        ]
    },
    {
        "id": "99844bc9eb83c843",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "consulta turno e ajsute de filtro",
        "func": "const config = flow.get(\"config\");\nmsg.machine_id = config.machine_id\n// Recupera a lista de horários de turnos a partir de uma variável global e o índice do turno desejado da variável de fluxo.\nlet horarios_turnos = global.get(\"turnos_times\");\nlet turno = flow.get(\"memo_turno\");\n\n// Faz uma cópia da lista de horários para evitar modificar o valor original na variável global.\nlet turnos_times = JSON.parse(JSON.stringify(horarios_turnos));\n\n// Obtém a data e hora atuais.\nconst today = new Date();\n// Define o início do dia (00:00:00) para a data atual. Essa data será usada para calcular o tempo em segundos desde a meia-noite.\nconst startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n// Converte o início do dia em formato epoch (segundos desde 1 de janeiro de 1970).\nconst epochTime = Math.floor(startOfDay.getTime() / 1000);\n\n\n\n\n\n// Define o ajuste de fuso horário em segundos. Neste caso, são 10800 segundos (ou 3 horas).\nconst timezoneOffset = -7200; // 2 horas em segundos\n\n// Define a quantidade de segundos em um dia, para lidar com turnos que ultrapassam a meia-noite.\nconst secondsInDay = 86400; // 24 horas em segundos\n\n// Itera sobre cada turno para calcular e ajustar os horários de início e fim.\nfor (let index = 0; index < turnos_times.length; index++) {\n    // Remove propriedades desnecessárias de cada turno para simplificar os dados.\n    delete turnos_times[index].created_at;\n    delete turnos_times[index].updated_at;\n    delete turnos_times[index].id;\n\n    // Extrai a parte do horário de início do turno (no formato 'HH:MM:SS') para conversão em segundos.\n    const [hours_s, minutes_s, seconds_s] = turnos_times[index].start_time.substring(11, 19).split(':').map(Number);\n    // Converte o horário de início em segundos: (horas * 3600) + (minutos * 60) + segundos.\n    const totalSecondsStart = hours_s * 3600 + minutes_s * 60 + seconds_s;\n\n    // Extrai a parte do horário de fim do turno (também no formato 'HH:MM:SS') para conversão em segundos.\n    const [hours_e, minutes_e, seconds_e] = turnos_times[index].end_time.substring(11, 19).split(':').map(Number);\n    // Converte o horário de fim em segundos: (horas * 3600) + (minutos * 60) + segundos.\n    const totalSecondsEnd = hours_e * 3600 + minutes_e * 60 + seconds_e;\n\n    // Calcula o horário de início absoluto do turno, somando o epoch do dia, o horário de início em segundos e o ajuste de fuso horário.\n    let start_time = new Date((epochTime + totalSecondsStart + timezoneOffset) * 1000);\n    // Calcula o horário de fim absoluto do turno da mesma forma.\n    let end_time = new Date((epochTime + totalSecondsEnd + timezoneOffset) * 1000);\n\n    // Verifica se o horário de início é maior que o horário de fim, indicando que o turno ultrapassa a meia-noite.\n    if (start_time > end_time) {\n        // Ajusta o horário de fim, somando um dia (em segundos) para representar corretamente um turno que termina no dia seguinte.\n        end_time = new Date((epochTime + totalSecondsEnd + timezoneOffset + secondsInDay) * 1000);\n    }\n\n    // Converte os horários de início e fim ajustados para o formato ISO e atualiza no objeto do turno.\n    turnos_times[index].start_time = start_time.toISOString();\n    turnos_times[index].end_time = end_time.toISOString();\n}\n\n// Define a saída da mensagem como o turno específico desejado (indexado com base no número do turno menos 1).\nmsg.payload = turnos_times[turno - 1];\nmsg.machine_id = config.machine_id\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 1840,
        "wires": [
            [
                "21896c84495470b1",
                "809336a51a7ef547",
                "ecb0d1b9e414f042",
                "f0e88d4d2ce38011",
                "1b3ac63b1bca68f7"
            ]
        ]
    },
    {
        "id": "2cd8f969605e22d0",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "monta resumo de tempos",
        "func": "const data = msg.payload;\n\n// Converte para o formato desejado, agrupando por `mode` e `state`\nconst result = data.reduce((acc, { mode, state, total_active_duration }) => {\n  if (!acc[mode]) acc[mode] = {}; // Cria a entrada para o mode se não existir\n  acc[mode][state] = (acc[mode][state] || 0) + Number(parseFloat(total_active_duration)); // Soma o total_active_duration\n  return acc;\n}, {});\n\n// verifica se a soma de todos os estados esta consistente com o tempo de turno transcorrifo\nlet config = flow.get(\"config\");\nlet turno = global.get(\"turno_\" + config.factory)\n//node.warn(turno);\n\n\n\n\n// Inicializa `msg.payload` com o objeto `omac`\nmsg.payload = { omac: result };\n\n\n\n// verifica o estado atual e altera o omac\nlet lastState = flow.get(\"lastState\");\n\nif (lastState && lastState[0] && lastState[0].payload) {\n  const mode = lastState[0].payload.machine_event.payload.mode;\n  const state = lastState[0].payload.machine_event.payload.state;\n\n  // Verifica se mode e state existem em msg.payload.omac antes de somar\n  if (msg.payload.omac[mode] && msg.payload.omac[mode][state] !== undefined) {\n    msg.payload.omac[mode][state] =\n      Number(parseFloat(msg.payload.omac[mode][state])) + Number(parseFloat(lastState[1]));\n  }\n}\n\n\n\n\nlet totalProductive = 0;\nlet totalNonProductive = 0;\n\n// Calcula os totais produtivos e não produtivos\nObject.entries(result).forEach(([mode, states]) => {\n  Object.entries(states).forEach(([state, activeMinutes]) => {\n    const minutes = Number(parseFloat(activeMinutes));\n\n    if (state === \"6\" && mode === \"2\") {\n      totalProductive += minutes;\n    } else {\n      totalNonProductive += minutes;\n    }\n  });\n});\n\n\n\n// Armazena `msg.payload` no fluxo para acesso posterior\nflow.set(\"temposOEE_parcial\", msg.payload);\n\n\n\n// Adiciona os somatórios ao `msg.payload`\nmsg.payload.somas = {\n  totalProductive: totalProductive,\n  totalNonProductive: totalNonProductive\n};\n\n\n\n// Retorna `msg` atualizado\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1840,
        "wires": [
            [
                "e4beced3c9231be7"
            ]
        ]
    },
    {
        "id": "8dd45892c10afa83",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "debug 515",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 1920,
        "wires": []
    },
    {
        "id": "38be4aa70f59ca2f",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "consulta ultimo registro",
        "func": "msg.payload[0].payload = JSON.parse(msg.payload[0].payload)\nflow.set(\"lastState\", msg.payload);\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 1900,
        "wires": [
            [
                "8dd45892c10afa83"
            ]
        ]
    },
    {
        "id": "183892fd2cecca83",
        "type": "inject",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2120,
        "y": 2040,
        "wires": [
            [
                "602a24c25b2de664"
            ]
        ]
    },
    {
        "id": "e1c39a9b647e838c",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "debug 516",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2750,
        "y": 2040,
        "wires": []
    },
    {
        "id": "602a24c25b2de664",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "function 267",
        "func": "let horarios_turnos = global.get(\"turnos_times\");\nlet turno = flow.get(\"memo_turno\");\n\nlet turnos_times = JSON.stringify(horarios_turnos)\nturnos_times = JSON.parse(turnos_times);\n//node.warn(turnos_times);\n\nconst today = new Date();\nconst startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\nconst epochTime = Math.floor(startOfDay.getTime() / 1000); // Converte de milissegundos para segundos\n//node.warn(epochTime); // Exibe a data de hoje às 00:00 em epoch (segundos)\n\nfor (let index = 0; index < turnos_times.length; index++) {\n    delete turnos_times[index].created_at\n    delete turnos_times[index].updated_at\n    delete turnos_times[index].id\n\n    const timePart_start = turnos_times[index].start_time.substring(11, 19); // '06:00:00'\n    // Divide a hora, minuto e segundo\n    const [hours_s, minutes_s, seconds_s] = timePart_start.split(':').map(Number);\n    // Converte para segundos\n    const totalMinutes_start = ((hours_s * 3600) + (minutes_s * 60) + (seconds_s));\n\n\n    const timePart_end = turnos_times[index].end_time.substring(11, 19); // '06:00:00'\n    // Divide a hora, minuto e segundo\n    const [hours_e, minutes_e, seconds_e] = timePart_end.split(':').map(Number);\n    // Converte para segundos\n    const totalMinutes_end = ((hours_e * 3600) + (minutes_e * 60) + (seconds_e));\n\n    //node.warn(totalMinutes_start);\n    //node.warn(totalMinutes_end);\n\n    const start_time = new Date((epochTime + totalMinutes_start)*1000)\n    const end_time = new Date((epochTime + totalMinutes_end)*1000)\n\n  \n\n    turnos_times[index].start_time = start_time.toISOString()\n    turnos_times[index].end_time = end_time.toISOString()\n\n\n\n  \n\n}\n\nmsg.payload = turnos_times[turno-1]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 2040,
        "wires": [
            [
                "9828456fcd425d53"
            ]
        ]
    },
    {
        "id": "eb92700b8254effb",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "debug 519",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 1980,
        "wires": []
    },
    {
        "id": "e4beced3c9231be7",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "debug 524",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 1840,
        "wires": []
    },
    {
        "id": "0d6f2d4d5895ebad",
        "type": "postgresql",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "",
        "query": "INSERT INTO public.machine_events\n(id_machine, payload)\nVALUES({{{msg.machine_id}}}, '{{{msg.payload}}}');",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1430,
        "y": 1840,
        "wires": [
            [
                "99844bc9eb83c843"
            ]
        ]
    },
    {
        "id": "21896c84495470b1",
        "type": "postgresql",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n),\nfiltered_intervals AS (\n    SELECT \n        id_machine,\n        mode,\n        state,\n        \n        -- Calcula o início e o fim ajustados do evento, limitados pelo intervalo de filtro\n        GREATEST(timestamp at time zone 'UTC' at time zone 'GMT-3', '{{{msg.payload.start_time}}}'::timestamp) AS adjusted_start,\n        LEAST(next_timestamp at time zone 'UTC' at time zone 'GMT-3', '{{{msg.payload.end_time}}}'::timestamp) AS adjusted_end\n        \n    FROM \n        state_intervals\n    WHERE \n        next_timestamp at time zone 'UTC' at time zone 'GMT-3' > '{{{msg.payload.start_time}}}'::timestamp  -- start_filter\n        AND timestamp at time zone 'UTC' at time zone 'GMT-3' <'{{{msg.payload.end_time}}}'::timestamp     -- end_filter\n        AND id_machine = 2  -- substitua 1 pelo id_machine desejado\n)\nSELECT \n    id_machine,\n    mode,\n    state,\n    \n    -- Calcula o tempo ativo total ajustado dentro do intervalo\n    SUM(\n        CASE \n            WHEN adjusted_end > adjusted_start THEN \n                EXTRACT(EPOCH FROM (adjusted_end - adjusted_start)) / 60  -- Tempo em minutos\n            ELSE \n                0\n        END\n    ) AS total_active_duration\nFROM \n    filtered_intervals\nGROUP BY \n    id_machine,\n    mode,\n    state\nORDER BY \n    id_machine,\n    mode,\n    state;\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2110,
        "y": 1840,
        "wires": [
            [
                "b9924f58433b76ad"
            ]
        ]
    },
    {
        "id": "9828456fcd425d53",
        "type": "postgresql",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n)\nSELECT \n    id,\n    timestamp,\n    id_machine,\n    payload,\n    mode,\n    state,\n    next_timestamp,\n    -- Calcula o tempo que o estado ficou ativo\n    CASE \n        WHEN next_timestamp IS NOT NULL THEN \n            AGE(next_timestamp, timestamp)\n        ELSE \n            NULL\n    END AS active_duration\nFROM \n    state_intervals\nORDER BY \n    timestamp;",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2530,
        "y": 2040,
        "wires": [
            [
                "e1c39a9b647e838c"
            ]
        ]
    },
    {
        "id": "809336a51a7ef547",
        "type": "postgresql",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "",
        "query": "SELECT *\nFROM machine_events\nWHERE id_machine =2\nORDER BY timestamp DESC\nlimit 1\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2110,
        "y": 1900,
        "wires": [
            [
                "38be4aa70f59ca2f"
            ]
        ]
    },
    {
        "id": "ecb0d1b9e414f042",
        "type": "postgresql",
        "z": "9063753adeaed04a",
        "d": true,
        "g": "65424dc5934d4cf3",
        "name": "Lista FIltrada Tempo e Maquina",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n)\nSELECT \n    id,\n    timestamp AS start_time,       -- Hora inicial do estado\n    next_timestamp AS end_time,    -- Hora final do estado\n    id_machine,\n    payload,\n    mode,\n    state,\n    -- Calcula o tempo que o estado ficou ativo em minutos\n    CASE \n        WHEN next_timestamp IS NOT NULL THEN \n            EXTRACT(EPOCH FROM (next_timestamp - timestamp)) / 60  -- Tempo em minutos\n        ELSE \n            NULL\n    END AS active_duration\nFROM \n    state_intervals\nWHERE \n    -- Filtros aplicados na tabela de saída\n    next_timestamp > '{{{msg.payload.start_time}}}'::timestamp  -- start_filter\n    AND timestamp < '{{{msg.payload.end_time}}}'::timestamp   -- end_filter\n    AND id_machine = 1  -- substitua 123 pelo id_machine desejado\nORDER BY \n    timestamp;\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2170,
        "y": 1980,
        "wires": [
            [
                "eb92700b8254effb"
            ]
        ]
    },
    {
        "id": "992e14116b8639fc",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "f63963f02b960014",
        "name": "debug 517",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 1200,
        "wires": []
    },
    {
        "id": "d6d51a4a9c4e3f5d",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "f63963f02b960014",
        "name": "Calc Actual Stop",
        "func": "const lastState = flow.get(\"lastState\");\n\nconst lastTime = new Date(lastState[0].timestamp);\nconst currentTime = new Date();\n\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  AJUSTE DE TEMPO xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//const timezoneOffset = currentTime.getTimezoneOffset();\nconst timezoneOffset = 0\n\n\n\nlastTime.setHours(lastTime.getHours() - timezoneOffset / 60);\n\nnode.status({ fill: \"red\", shape: \"ring\", text: lastState[1] });\n\n\n\n\n// Converte para segundos\nconst lastTimeInSeconds = Math.floor(lastTime.getTime() / 1000);\nconst currentTimeInSeconds = Math.floor(currentTime.getTime() / 1000);\n\nconst timeDifference = (currentTimeInSeconds - lastTimeInSeconds) / 60;\n\nmsg.payload = {}\n\nmsg.payload.actualDuration = lastState[1] = timeDifference\nmsg.payload.actualState = lastState[0].payload.machine_event.payload.state\nmsg.payload.actualMode = lastState[0].payload.machine_event.payload.mode\n\n\nconst tempoTranscorrido = flow.get(\"tempoTranscorrido\");\n\nif (lastState[1] > tempoTranscorrido) {\n    lastState[1] = tempoTranscorrido\n\n}\nflow.set(\"lastState\", lastState);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar sumProg_NProgr_parcial = flow.get(\"sumProg_NProgr_parcial\");\nlet parada = flow.get(\"parada\");\nif (!isNaN(parada.tParadaAtual)) {\n    //node.warn(parada.active);\n    \n    var calcSumProg_NProgr = JSON.parse(JSON.stringify(sumProg_NProgr_parcial))\n    if (parada.active) {\n\n        if (parada.programada == 'true') {\n            //node.warn(\"Programada\");\n            calcSumProg_NProgr[0].soma_programada = Number(sumProg_NProgr_parcial[0].soma_programada) + Number(parada.tParadaAtual)\n            calcSumProg_NProgr[0].soma_nao_programada = Number(sumProg_NProgr_parcial[0].soma_nao_programada)\n\n            //node.warn(sumProg_NProgr[0].soma_programada);\n        } else {\n            \n            //node.warn(\"Nao Programada\");\n            //node.warn(Number(sumProg_NProgr_parcial[0].soma_nao_programada));\n            //node.warn(Number(parada.tParadaAtual));\n            calcSumProg_NProgr[0].soma_programada = Number(sumProg_NProgr_parcial[0].soma_programada)\n            calcSumProg_NProgr[0].soma_nao_programada = Number(sumProg_NProgr_parcial[0].soma_nao_programada) + Number(parada.tParadaAtual)\n            //node.warn(sumProg_NProgr[0].soma_nao_programada);\n        }\n    } else {\n        calcSumProg_NProgr = sumProg_NProgr_parcial\n\n    }\n} else {\n    calcSumProg_NProgr = sumProg_NProgr_parcial\n    \n}\n\nflow.set(\"sumProg_NProgr\", calcSumProg_NProgr) || [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1200,
        "wires": [
            [
                "992e14116b8639fc"
            ]
        ]
    },
    {
        "id": "542be7fdf63870db",
        "type": "comment",
        "z": "9063753adeaed04a",
        "g": "e0a206f97c1145a2",
        "name": "Registro Fim da Parada de Linha",
        "info": "",
        "x": 1110,
        "y": 1420,
        "wires": []
    },
    {
        "id": "f2fc253e71a948ab",
        "type": "http request",
        "z": "9063753adeaed04a",
        "g": "e0a206f97c1145a2",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1750,
        "y": 1260,
        "wires": [
            [
                "afaeb3029d5ec669"
            ]
        ]
    },
    {
        "id": "afaeb3029d5ec669",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "e0a206f97c1145a2",
        "name": "debug 277",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2050,
        "y": 1280,
        "wires": []
    },
    {
        "id": "c37f93d5e6bbf487",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "e0a206f97c1145a2",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n\n    //msg.payload.machine_event.payload.ID = 999;\n\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1280,
        "wires": [
            [
                "9544994253373941"
            ]
        ]
    },
    {
        "id": "9544994253373941",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "e0a206f97c1145a2",
        "name": "function 257",
        "func": "\nif (msg.payload != null) {\n\n    if (msg.payload.machine_event.payload.ID != 8888) {\n        return [msg, msg]\n    } else return [msg, msg];\n\n\n\n\n} else {\n\n    node.warn(\"Mudanca de estado sem registro\");\n\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 1280,
        "wires": [
            [
                "f2fc253e71a948ab"
            ],
            [
                "9613353794219ddc"
            ]
        ]
    },
    {
        "id": "aff41d1fece07bf7",
        "type": "postgresql",
        "z": "9063753adeaed04a",
        "g": "e0a206f97c1145a2",
        "name": "",
        "query": "INSERT INTO public.appoint\n(payload)\nVALUES('{{{msg.payload}}}');",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1810,
        "y": 1340,
        "wires": [
            [
                "3fec7f60bc777412"
            ]
        ]
    },
    {
        "id": "3fec7f60bc777412",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "e0a206f97c1145a2",
        "name": "debug 494",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 1340,
        "wires": []
    },
    {
        "id": "9613353794219ddc",
        "type": "json",
        "z": "9063753adeaed04a",
        "g": "e0a206f97c1145a2",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1630,
        "y": 1340,
        "wires": [
            [
                "aff41d1fece07bf7"
            ]
        ]
    },
    {
        "id": "cdf0f27c43361963",
        "type": "link in",
        "z": "9063753adeaed04a",
        "g": "e0a206f97c1145a2",
        "name": "apontamento maquina",
        "links": [
            "1cb0626107b66fbc"
        ],
        "x": 955,
        "y": 1380,
        "wires": [
            [
                "52ee652e50bc272c"
            ]
        ]
    },
    {
        "id": "495b23f90daa60a0",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "e0a206f97c1145a2",
        "name": "debug 508",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 1380,
        "wires": []
    },
    {
        "id": "b9924f58433b76ad",
        "type": "delay",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2360,
        "y": 1840,
        "wires": [
            [
                "2cd8f969605e22d0"
            ]
        ]
    },
    {
        "id": "d9200338c7771585",
        "type": "file in",
        "z": "9063753adeaed04a",
        "g": "6e2695762a84bff2",
        "name": "",
        "filename": "alm_list_02",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 350,
        "y": 200,
        "wires": [
            [
                "e6ddaf0ca992fbf9"
            ]
        ]
    },
    {
        "id": "81ddf1839c7c21f6",
        "type": "inject",
        "z": "9063753adeaed04a",
        "g": "6e2695762a84bff2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "d9200338c7771585"
            ]
        ]
    },
    {
        "id": "e6ddaf0ca992fbf9",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "6e2695762a84bff2",
        "name": "debug 530",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 200,
        "wires": []
    },
    {
        "id": "d28aaa8528f140fe",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "6e2695762a84bff2",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.statechanged_id",
        "statusType": "msg",
        "x": 1050,
        "y": 140,
        "wires": []
    },
    {
        "id": "2ddc9e90622be922",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "6e2695762a84bff2",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.statechanged_reason",
        "statusType": "msg",
        "x": 1050,
        "y": 200,
        "wires": []
    },
    {
        "id": "6e0751f8ead1a525",
        "type": "http request",
        "z": "9063753adeaed04a",
        "g": "40d038f0a15888f0",
        "name": "GET StopReasons",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1670,
        "y": 60,
        "wires": [
            [
                "da5fe2e1e07c9e63"
            ]
        ]
    },
    {
        "id": "da5fe2e1e07c9e63",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "40d038f0a15888f0",
        "name": "function 269",
        "func": "const data = JSON.parse(msg.payload)\nlet id = Math.floor(msg.id_maq)\n\nif (Number.isNaN(id)) {\n    id = null\n}\n\n\nmsg.payload = {}\n\n\nfunction StopsByMachine(data, selectedId = null) {\n    const machineMap = new Map();\n    data.forEach(event => {\n        event.machines.forEach(machine => {\n            if (!machineMap.has(machine.id)) {\n                machineMap.set(machine.id, { id: machine.id, name: machine.name, stopReasons: [] });\n            }\n            machineMap.get(machine.id).stopReasons.push([event.plc_code, event.name, event.expected]);\n        });\n    });\n\n    if (selectedId !== null) {\n        return machineMap.has(selectedId) ? machineMap.get(selectedId) : null;\n    }\n\n    return Array.from(machineMap.values());\n}\n\n\n\nfunction listUniqueMachineNames(data) {\n\n    const machines = new Map();\n    data.forEach(event => {\n        event.machines.forEach(machine => {\n            machines.set(machine.id, machine.name);\n        });\n    });\n\n    const result = Array.from(machines).map(([id, name]) => ({ id, name }));\n\n    return result\n\n\n}\n\n\n\n// Chamar a função e imprimir o resultado\nmsg.payload.maquinas = listUniqueMachineNames(data);\n\n\n\n// Executar a função e imprimir o resultado\nmsg.payload.stopreasons = StopsByMachine(data, id);\n\nflow.set(\"stopreasons\", msg.payload.stopreasons);\n\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 60,
        "wires": [
            [
                "5b770ca6dea7cf38"
            ]
        ]
    },
    {
        "id": "5cbbccc3f9ec8cfa",
        "type": "inject",
        "z": "9063753adeaed04a",
        "g": "40d038f0a15888f0",
        "name": "",
        "props": [],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1330,
        "y": 60,
        "wires": [
            [
                "76b8fa3af4463840"
            ]
        ]
    },
    {
        "id": "5b770ca6dea7cf38",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "40d038f0a15888f0",
        "name": "debug 534",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 60,
        "wires": []
    },
    {
        "id": "76b8fa3af4463840",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "40d038f0a15888f0",
        "name": "Config",
        "func": "\nlet config = flow.get(\"config\")\n\n//msg.id_maq = msg.req.params.id_maq\nmsg.id_maq = config.machine_id\n\n//node.warn(\"Aqui\");\n\nif (config.send == true) {\n  \n\n    msg.url = config.url + \"/stop_reasons.json\"\n    msg.headers = {}\n    msg.headers['Authorization'] = config.token_line\n    msg.payload = {}\n\n\nreturn msg\n\n\n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 60,
        "wires": [
            [
                "6e0751f8ead1a525"
            ]
        ]
    },
    {
        "id": "3158a8dd942d5e14",
        "type": "inject",
        "z": "9063753adeaed04a",
        "d": true,
        "g": "40d038f0a15888f0",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "100",
        "topic": "",
        "x": 1330,
        "y": 120,
        "wires": [
            [
                "5610619081cbede9"
            ]
        ]
    },
    {
        "id": "5610619081cbede9",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "40d038f0a15888f0",
        "name": "lista paradas",
        "func": "msg.payload = {}\n\n\nlet lista_paradas = [\n    {\n        \"id\": 2,\n        \"descr\": \"\",\n        \"cod_class\": 0, \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    }\n]\n\n\nconst paradas = flow.get(\"stopreasons\");\n\nnode.warn(lista_paradas);\nnode.warn(paradas);\n\nfor (let index = 0; index < paradas.stopReasons.length; index++) {\n    //node.warn(paradas.stopReasons[index][0]);\n    lista_paradas[index].id = 9999\n    lista_paradas[index].descr = paradas.stopReasons[index][1]\n    lista_paradas[index].cod_class = paradas.stopReasons[index][0]\n    lista_paradas[index].ZZZZZZZZZZudtZIA_Par3 = 5\n    lista_paradas[index].progr = paradas.stopReasons[index][2]\n}\n\n\nnode.warn(lista_paradas);\n\nmsg.payload.paradas = lista_paradas\n\nreturn msg\n\n\n// msg.payload = {\n//     \"id\": 23,\n//     \"descr\": \"\",\n//     \"cod_class\": 0,\n//     \"ZZZZZZZZZZudtZIA_Par3\": 0,\n//     \"progr\": false\n// }\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 120,
        "wires": [
            [
                "a86a734c417b3ef9",
                "9e7883a9d622b9e9"
            ]
        ]
    },
    {
        "id": "a86a734c417b3ef9",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "40d038f0a15888f0",
        "name": "debug 538",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1910,
        "y": 180,
        "wires": []
    },
    {
        "id": "36c0cb61a1a3a73d",
        "type": "inject",
        "z": "9063753adeaed04a",
        "g": "1002ba0a1a09732b",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "204363b287930f66"
            ]
        ]
    },
    {
        "id": "204363b287930f66",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "1002ba0a1a09732b",
        "name": "CONFIG",
        "func": "//configuracaao de linha\n\nlet config = {}\n\nconfig.machine_name = \"envolvedora\"\n\nconfig.factory = 1\nconfig.machine_id = 2\nconfig.token_machine = \"Bearer \" + \"12fbf6376133215fee1331cfc463f19851a9bdf2\"\nconfig.token_line = \"Bearer \" + \"00bc757a398cc98d299fd6fc2119929c48647db9\"\nconfig.url = \"http://127.0.0.1:3003\"\nconfig.url_machine = config.url + \"/machine_events\"\nconfig.url_line = config.url + \"/production_line_events\"\nconfig.send = true /// habilita POST\n\nflow.set(\"config\", config);\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 300,
        "wires": [
            [
                "ad001c9270cc1673"
            ]
        ]
    },
    {
        "id": "ad001c9270cc1673",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "1002ba0a1a09732b",
        "name": "debug 439",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 300,
        "wires": []
    },
    {
        "id": "f0e88d4d2ce38011",
        "type": "postgresql",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "",
        "query": "SELECT\n    SUM(CASE \n            WHEN (payload::jsonb->'machine_event'->'payload'->>'Programada')::boolean = true THEN \n                (payload::jsonb->'machine_event'->'payload'->>'tParada')::numeric \n            ELSE 0 \n        END) AS soma_programada,\n    SUM(CASE \n            WHEN (payload::jsonb->'machine_event'->'payload'->>'Programada')::boolean = false THEN \n                (payload::jsonb->'machine_event'->'payload'->>'tParada')::numeric \n            ELSE 0 \n        END) AS soma_nao_programada\nFROM public.appoint\nWHERE \n    to_timestamp((payload::jsonb->'machine_event'->'payload'->>'InicioParada')::bigint / 1000) AT TIME ZONE 'UTC' >= '{{{msg.payload.start_time}}}'\n    AND to_timestamp((payload::jsonb->'machine_event'->'payload'->>'FimParada')::bigint / 1000) AT TIME ZONE 'UTC' <= '{{{msg.payload.end_time}}}'\n    AND ((payload::jsonb->'machine_event'->'payload'->>'machine_id')::int) = 2\n    ",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2110,
        "y": 1780,
        "wires": [
            [
                "db264ea208b3416e"
            ]
        ]
    },
    {
        "id": "2d951c2179c3c646",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "debug 540",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 1780,
        "wires": []
    },
    {
        "id": "db264ea208b3416e",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "SET Prog e Nao Pog",
        "func": "const soma_programada = Number(msg.payload[0].soma_programada) || 0\nconst soma_nao_programada = Number(msg.payload[0].soma_nao_programada) || 0\n\nconst sumProg_NProgr_parcial = [{\n    \"soma_programada\":soma_programada,\n    \"soma_nao_programada\": soma_nao_programada\n}]\n\nflow.set(\"sumProg_NProgr_parcial\", sumProg_NProgr_parcial);\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2580,
        "y": 1780,
        "wires": [
            [
                "2d951c2179c3c646"
            ]
        ]
    },
    {
        "id": "43d25837214b40ec",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "6e2695762a84bff2",
        "name": "function 271",
        "func": "flow.set(\"alm_list\", msg.payload);\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 140,
        "wires": [
            [
                "7075595efe4ffad0"
            ]
        ]
    },
    {
        "id": "df743026bca5940e",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "6e2695762a84bff2",
        "name": "debug 555",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload.lastalm",
        "statusType": "msg",
        "x": 1050,
        "y": 260,
        "wires": []
    },
    {
        "id": "bd8b4378c391e95e",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "6e2695762a84bff2",
        "name": "debug 558",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 100,
        "wires": []
    },
    {
        "id": "f9fa8487358a0559",
        "type": "eth-ip in",
        "z": "9063753adeaed04a",
        "g": "6e2695762a84bff2",
        "endpoint": "8d756ed66187c2a2",
        "mode": "single",
        "variable": "dados_ZIA",
        "program": "",
        "name": "",
        "gatherMetrics": true,
        "includeTimestamp": true,
        "x": 140,
        "y": 60,
        "wires": [
            [
                "bd8b4378c391e95e",
                "1e640f5c3bfcfa51"
            ]
        ]
    },
    {
        "id": "9e7883a9d622b9e9",
        "type": "eth-ip out",
        "z": "9063753adeaed04a",
        "g": "40d038f0a15888f0",
        "endpoint": "8d756ed66187c2a2",
        "variable": "cmdZIA",
        "program": "",
        "name": "",
        "x": 2140,
        "y": 140,
        "wires": []
    },
    {
        "id": "1b3ac63b1bca68f7",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "65424dc5934d4cf3",
        "name": "debug 559",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 2000,
        "wires": []
    },
    {
        "id": "52ee652e50bc272c",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "e0a206f97c1145a2",
        "name": "Atualiza Parada - Apontamento",
        "func": "const config = flow.get(\"config\");\n\nlet parada = flow.get(\"parada\");\n\nparada.statechanged_id = msg.payload.newStopReason[1]\nparada.statechanged_reason = msg.payload.newStopReason[0]\nparada.programada = msg.payload.newStopReason[2]\nparada.justifica = true\n\n\nflow.set(\"parada\", parada);\nglobal.set(\"parada\" + config.machine_name, parada);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1380,
        "wires": [
            [
                "495b23f90daa60a0"
            ]
        ]
    },
    {
        "id": "c4feb6eb174b60f3",
        "type": "inject",
        "z": "9063753adeaed04a",
        "g": "4093c33ac4d2ade3",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1050,
        "y": 960,
        "wires": [
            [
                "4e1883cb4326b32c"
            ]
        ]
    },
    {
        "id": "4e1883cb4326b32c",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "4093c33ac4d2ade3",
        "name": "function 278",
        "func": "const cmdResetAtivo = flow.get(\"cmdResetAtivo\");\nif (cmdResetAtivo) {\n    return msg\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 960,
        "wires": [
            [
                "10ccfe054e44d8ab"
            ]
        ]
    },
    {
        "id": "c744bd20adbcc337",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "4093c33ac4d2ade3",
        "name": "function 279",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nnode.warn(dadosPlc.diProductionCounter);\n\nif (dadosPlc.diProductionCounter!='0') {\n    return msg\n}\n\nlet cmdResetAtivo = flow.get(\"cmdResetAtivo\");\ncmdResetAtivo = false\nflow.set(\"cmdResetAtivo\", cmdResetAtivo);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 1000,
        "wires": [
            [
                "10ccfe054e44d8ab",
                "d4b2e6a7ef84134d"
            ]
        ]
    },
    {
        "id": "10ccfe054e44d8ab",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "4093c33ac4d2ade3",
        "name": "set reset Counters",
        "func": "let cmdResetAtivo = true\nflow.set(\"cmdResetAtivo\", cmdResetAtivo);\n\nmsg.payload ={}\nmsg.payload.xResetCounter = 1\nmsg.payload.xResetReject_r1 = 1\nmsg.payload.xResetReject_r2 = 1\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 900,
        "wires": [
            [
                "c744bd20adbcc337",
                "0b8ab66aeb7555a9"
            ]
        ]
    },
    {
        "id": "d4b2e6a7ef84134d",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "4093c33ac4d2ade3",
        "name": "debug 568",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 1000,
        "wires": []
    },
    {
        "id": "f0a03b7fa9232e0f",
        "type": "debug",
        "z": "9063753adeaed04a",
        "name": "debug 571",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 2260,
        "wires": []
    },
    {
        "id": "962981e8f5ac0fdc",
        "type": "link in",
        "z": "9063753adeaed04a",
        "name": "link in 2",
        "links": [
            "e52ad49b4bd23f12"
        ],
        "x": 455,
        "y": 2380,
        "wires": [
            [
                "61bf4bdba1a6aef5"
            ]
        ]
    },
    {
        "id": "61bf4bdba1a6aef5",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "bae89ab498b0f1b4",
        "name": "Alarme",
        "func": "let memo_aux_id_falha = context.get(\"aux_id_falha\");\nif (msg.payload.aux_id_falha != memo_aux_id_falha) {\n    if (msg.payload.aux_id_falha != 0 && msg.payload.aux_id_falha != 9999) {\n        let config = flow.get(\"config\");\n        let dados_alm = {\n            TimeStamp: new Date(),\n            nameMachine: config.machine_name,\n            ID: msg.payload.aux_id_falha,\n            reason: msg.payload.lastalm\n        };\n        const d = new Date();\n        let minutes = d.getMinutes();\n        let agora = new Date()\n        msg.payload = {\n            \"authenticity_token\": \"L3uhfD4yxArDD6++xrFmFX9LLKfX5PyMstpcUL0zi6SRrHAzTqfBCj1iKfYp4o6GLK9emMZYiAmxF1T9C7BQ==\",\n            \"machine_event\": {\n                \"timestamp(1i)\": agora.getFullYear().toString(),\n                \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n                \"timestamp(3i)\": agora.getDate().toString(),\n                \"timestamp(4i)\": agora.getHours().toString(),\n                \"timestamp(5i)\": agora.getMinutes().toString(),\n                \"event_type_id\": 5,\n                //        \"timestamp(3i)\": d.getDay(),\n                //        \"timestamp(2i)\": d.getMonth(),\n                //        \"timestamp(1i)\": d.getFullYear(),\n                //        \"timestamp(4i)\": d.getHours(),\n                //        \"timestamp(5i)\": d.getMinutes(),\n                \"payload\": dados_alm\n            }\n        }\n        context.set(\"aux_id_falha\", dados_alm.ID);\n        return msg\n    }\n}\ncontext.set(\"aux_id_falha\", msg.payload.aux_id_falha);\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 2400,
        "wires": [
            [
                "06f760473549990e"
            ]
        ]
    },
    {
        "id": "e65485a90b4b9e18",
        "type": "http request",
        "z": "9063753adeaed04a",
        "g": "bae89ab498b0f1b4",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1490,
        "y": 2400,
        "wires": [
            [
                "8a5b79d428b2a842"
            ]
        ]
    },
    {
        "id": "8a5b79d428b2a842",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "bae89ab498b0f1b4",
        "name": "debug 572",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1910,
        "y": 2400,
        "wires": []
    },
    {
        "id": "06f760473549990e",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "bae89ab498b0f1b4",
        "name": "function 282",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 2400,
        "wires": [
            [
                "e65485a90b4b9e18",
                "f0a03b7fa9232e0f"
            ]
        ]
    },
    {
        "id": "e52ad49b4bd23f12",
        "type": "link out",
        "z": "9063753adeaed04a",
        "g": "6e2695762a84bff2",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "962981e8f5ac0fdc"
        ],
        "x": 985,
        "y": 320,
        "wires": []
    },
    {
        "id": "bfc928f72bf9e753",
        "type": "link in",
        "z": "9063753adeaed04a",
        "g": "179c234eb021281d",
        "name": "link in 25",
        "links": [
            "615e1f011ffb0b71"
        ],
        "x": 105,
        "y": 1660,
        "wires": [
            [
                "0a7cfc064ed78482"
            ]
        ]
    },
    {
        "id": "b4e214b340d60b58",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "179c234eb021281d",
        "name": "anota inicio parada linha",
        "func": "const config = flow.get(\"config\");\nconst guilt = msg.payload[config.machine_name]\nlet name_var_global = \"plc\" + config.machine_name\n\n\n\nif (guilt) {\n    node.warn(\"my warning\");\n    //atualiza a hora da parada com a hora que a enchedora (gargalo) parou\n    let parada = flow.get(\"parada\");\n    const parada_linha = JSON.parse(JSON.stringify(parada))\n    parada_linha.hora = new Date().getTime()\n    parada_linha.machine_id = config.machine_id\n    parada_linha.machine_name = config.machine_name\n    parada_linha.active = true\n    global.set(\"parada_linha\", parada_linha )\n    return msg;\n\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1660,
        "wires": [
            [
                "b2de4dc9ec93b8bc"
            ]
        ]
    },
    {
        "id": "0a7cfc064ed78482",
        "type": "delay",
        "z": "9063753adeaed04a",
        "g": "179c234eb021281d",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 1660,
        "wires": [
            [
                "b4e214b340d60b58"
            ]
        ]
    },
    {
        "id": "20f168cd2c974463",
        "type": "link in",
        "z": "9063753adeaed04a",
        "g": "179c234eb021281d",
        "name": "link in 26",
        "links": [
            "31d753b6c2f98a0f"
        ],
        "x": 95,
        "y": 1760,
        "wires": [
            [
                "3e3a7f4521cee0c0"
            ]
        ]
    },
    {
        "id": "3e3a7f4521cee0c0",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "179c234eb021281d",
        "name": "registra fim parada linha",
        "func": "let config = flow.get(\"config\");\nlet retorno = new Date()\nlet parada = global.get(\"parada_linha\");\n\nif (parada.machine_id == config.machine_id) {\n\n    let tParada = (retorno.getTime() - parada.hora) / 1000 / 60\n    //let paradasSoma = flow.get(\"paradasSoma\") || flow.set(\"paradasSoma\", { \"Prog\": 0, \"Nprog\": 0 })\n    let turno = global.get(\"turno_\" + config.factory)\n    let machine_event = {}\n\n    machine_event = {\n        \"timestamp(1i)\": retorno.getFullYear().toString(),\n        \"timestamp(2i)\": (retorno.getMonth() + 1).toString(),\n        \"timestamp(3i)\": retorno.getDate().toString(),\n        \"timestamp(4i)\": retorno.getHours().toString(),\n        \"timestamp(5i)\": retorno.getMinutes().toString(),\n        \"timestamp(6i)\": retorno.getSeconds().toString(),\n        \"event_type_id\": 4,\n        \"payload\": {\n            \"aux_id_falha\": parada.aux_id_falha,\n            \"InicioParada\": parada.hora,\n            \"FimParada\": new Date().getTime(),\n            \"tParada\": Number(tParada.toFixed(2)),\n            \"ID\": isNaN(Number(parada.statechanged_id)) ? 0 : Number(parada.statechanged_id), // Garantir que ID seja um número\n            \"Reason\": parada.statechanged_reason,\n            \"ModeReason\": parada.mode,\n            \"StateReason\": parada.state || 0,\n            \"Programada\": parada.programada,\n            \"turno_atual\": turno.turno,\n            \"equip\": config.machine_name,\n            \"machine_id\": config.machine_id,\n            \"guilt\": false\n        }\n    }\n\n    parada.active = false\n    msg.payload.machine_event = machine_event\n\n\n\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1760,
        "wires": [
            [
                "df87dc68a1cbe8c9"
            ]
        ]
    },
    {
        "id": "50f9bf3a8b09a786",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "179c234eb021281d",
        "name": "debug 714",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1760,
        "wires": []
    },
    {
        "id": "df87dc68a1cbe8c9",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "179c234eb021281d",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n\n    //msg.payload.machine_event.payload.ID = 999;\n\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1760,
        "wires": [
            [
                "48c3440d04b95f2f"
            ]
        ]
    },
    {
        "id": "b2de4dc9ec93b8bc",
        "type": "debug",
        "z": "9063753adeaed04a",
        "g": "179c234eb021281d",
        "name": "debug 715",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 1660,
        "wires": []
    },
    {
        "id": "13dafc203bfb9604",
        "type": "function",
        "z": "9063753adeaed04a",
        "g": "179c234eb021281d",
        "name": "Update tempo parada linha",
        "func": "let parada_linha = global.get(\"parada_linha\");\n\nif (parada_linha.active) {\n    let retorno = new Date()\n    \n    let tParada = (retorno.getTime() - parada_linha.hora) / 1000 / 60\n    parada_linha.tParadaAtual = tParada\n\n\n\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "48c3440d04b95f2f",
        "type": "http request",
        "z": "9063753adeaed04a",
        "g": "179c234eb021281d",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 1760,
        "wires": [
            [
                "50f9bf3a8b09a786"
            ]
        ]
    },
    {
        "id": "0d2122c2dfe6b16f",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "6ebe228893194f88",
        "name": "find line",
        "func": "let config = flow.get(\"config\");\n\nlet name_var_global = \"plc\" + config.machine_name\n\n\nlet plc = msg.payload.value\n\nlet cod = msg.payload.value.aux_id_falha\n\nconst lista_falha = flow.get(\"alm_list\");\n\n\nconst lines = lista_falha.split('\\n');\n//node.warn(lines);\n\n\n// Percorrer cada linha e dividi-la em colunas\nlines.forEach(line => {\n    const columns = line.split(',');\n    if (columns.length > 1) {\n        var id = columns[0].trim();\n        var desc_alm = columns[1].trim();\n        var desc_classe = columns[2].trim();\n        var classe = columns[3].trim();\n        var programadada = columns[4].trim();\n    }\n\n    if (cod == id) {\n        let str_cod = desc_classe\n        let class_cod = classe\n        let programada = Boolean(Number(programadada))\n        plc.statechanged_id = class_cod\n        plc.statechanged_reason = str_cod\n        plc.programada = programada\n        plc.lastalm = desc_alm\n\n        return\n\n\n\n    }\n\n\n\n});\n\nif (plc.mode == 2 && plc.state == 5) {\n    plc.blocked = true\n\n} else {\n    plc.blocked = false\n}\n\n\n\nplc = JSON.parse(JSON.stringify(plc))\nglobal.set(name_var_global, plc);\nmsg.payload = plc\nreturn msg\n\n\n\n//return msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 60,
        "wires": [
            [
                "f27ed33f1ae61e1b",
                "0211ef5c159646ab",
                "eda9634d7f289d80",
                "da1b12806d401636",
                "e8d9e95c6f28a184"
            ]
        ]
    },
    {
        "id": "f27ed33f1ae61e1b",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "6ebe228893194f88",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.aux_id_falha",
        "statusType": "msg",
        "x": 1050,
        "y": 60,
        "wires": []
    },
    {
        "id": "13d8c5a535d80129",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "20c28ca51f1a8dc6",
        "name": "Turnos, Tempos Acumulados",
        "func": "\nlet msg1 = new Object()\nlet msg2 = new Object()\nlet msg3 = new Object()\nlet config = flow.get(\"config\");\nlet a\n\n\n\nlet turno = global.get(\"turno_\" + config.factory)\nlet memo_turno = flow.get(\"memo_turno\") || 0\n\n\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\n\nlet sm_atual = {\n    \"state\": dadosPlc.state || 2,\n    \"mode\": dadosPlc.mode || 2\n}\nflow.set(\"sm_atual\", sm_atual);\nlet sm_anterior = flow.get(\"sm_anterior\") || flow.set(\"sm_anterior\", sm_atual)\n\n\nlet tempoTranscorrido\nif (memo_turno == turno.turno) { //&& turno.turno != 0\n    a = 1\n\n\n    flow.set(\"tempoTranscorrido\", turno.tempoTranscorrido);\n    tempoTranscorrido = turno.tempoTranscorrido\n    \n    calculosOEE()\n\n} else {\n    \n    a = 2\n\n    tempoTranscorrido = flow.get(\"tempoTranscorrido\") || 0\n\n}\n\n\n\nlet parada = flow.get(\"parada\") || { \"hora\": 0, \"state\": \"0\", \"mode\": \"0\", \"active\": false, \"tParadaAtual\": 0 }\n\n\n\n// Atualiza o tempo da parada atual\nif ((sm_atual.state != 6 || sm_atual.mode != 2) && turno.turno != 0) {\n    let agora = new Date().getTime()\n    let tParadaAtual = agora - parada.hora\n    parada.tParadaAtual = tParadaAtual / 60 / 1000\n    flow.set(\"parada\", parada);\n    global.set(\"parada\" + name_var_global, parada);\n}\n\n\n\n\n// Aciona saida indicando que houve mudanca do modo de operacao\nif (sm_atual.mode != sm_anterior.mode || sm_atual.state != sm_anterior.state) {\n    //Verifica se a maquina saiu do estado Execute\n    //Sempre que a maquina sair de execute devemos anotar o horario da parada\n    if ((sm_anterior.state == 6 && sm_anterior.mode == 2) && (sm_atual.state != sm_anterior.state || sm_atual.mode != sm_anterior.mode)) {\n        console.log(\"NÃO PRODUZINDO\")\n        anotaInicioParada()\n        msg2 = null\n    } else if ((sm_anterior.state != 6 || sm_anterior.mode != 2) && (sm_atual.state == 6 && sm_atual.mode == 2)) {\n        console.log(\"PRODUZINDO\")\n        msg2.payload = consolidaParada()\n        calculosOEE()\n        flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n    }\n    flow.set(\"sm_anterior\", sm_atual)\n\n\n    return [null, msg2]\n}\n\n\n\n\n\n/// rotinas que devem ser executadas na troca de turno\nif (memo_turno != turno.turno) {\n    msg1 = null\n    msg2 = null\n\n    console.log(\"TrocaTurno\")\n    node.warn(\"TrocaTurno\")\n    \n    if (memo_turno != 0) {\n        console.log(\"Fim turno \" + memo_turno)\n        msg1 = { payload: 1 }\n\n        if (parada.active == true) { // se no fim do turno estiver em parada consolida\n            msg2 = {}\n            msg2.payload = {}\n            msg2.payload = consolidaParada()\n            \n            calculosOEE()\n\n            flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n            if (turno.turno != 0) { // se entrar em um novo turno reinicia a parada\n                console.log(\"Inicio turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n                anotaInicioParada()\n\n            }\n        } else {\n            if (turno.turno != 0) {\n                console.log(\"Iniccio Turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n            }\n        }\n\n\n        calculosOEE()\n        let calculoOEE = flow.get(\"calculoOEE\");\n        flow.set(\"fimTurnoOEE\", calculoOEE);\n        flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n\n\n\n    } else if (memo_turno == 0) {\n        msg1 = null\n        console.log(\"verificaAnotacaoTurno\") // verifica e cria msg2 se necssario e zera anotacao de parada\n\n        verificaAnotacaoInicioTurno()\n\n    } else {\n\n        msg1 = null\n    }\n\n    //anota registro de turno\n\n    \n\n    flow.set(\"memo_turno\", turno.turno)\n\n    return [msg1, msg2]\n}\nmsg3.payload = calculosOEE()\nmsg3.payload.machine_event.event_type_id = 6\nreturn [null, null, msg3]\n\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n\nfunction anotaInicioParada() {\n    \n    console.log(\"inicio parada\")\n    node.warn(name_var_global);\n\n    let iParada = global.get(name_var_global);\n    let parada = {\n        \"hora\": new Date(),\n        \"state\": sm_atual.state || 0,\n        \"mode\": sm_atual.mode\n    }\n    flow.set(\"parada\", {\n        \"aux_id_falha\": Number(dadosPlc.aux_id_falha),\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true,\n        \"statechanged_id\": iParada.statechanged_id,\n        \"statechanged_reason\": iParada.statechanged_reason,\n        \"programada\": new Boolean(iParada.programada),\n        \"justifica\": false\n\n    });\n    global.set(\"parada\" + name_var_global, {\n        \"aux_id_falha\": Number(dadosPlc.aux_id_falha),\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true,\n        \"statechanged_id\": iParada.statechanged_id,\n        \"statechanged_reason\": iParada.statechanged_reason,\n        \"programada\": new Boolean(iParada.programada),\n        \"justifica\": false,\n        \"machine_id\": config.machine_id,\n        \"Equip\": config.machine_name\n\n    });\n    //console.clear()\n    //console.log(\"Inicio da Parada:\" + parada.hora.getHours() + \":\" + parada.hora.getMinutes())\n    return {\n        \"InicioParada\": parada.hora.getTime(),\n        \"FimParada\": 0,\n        \"tParada\": 0,\n        \"ID\": \"ID\",\n        \"Reason\": null,\n        \"ModeReason\": new Number(parada.mode),\n        \"StateReason\": new Number(parada.state) || 0,\n        \"Programada\": null,\n        \"Equip\": name_var_global\n    }\n}\n\nfunction consolidaParada() {\n    //////////////////////////////////////////////////////////////////////\n    //GAMBIA PARA ATRASAR O REGISTRO//////////////////////////////////////\n    //////////////////////////////////////////////////////////////////////\n\n    flow.set(\"ignora_registro_linha\", 20);\n    flow.set(\"ignora_registro_maquina\", 20);\n\n    ////fim da gambia///////////////////////////////////////////////////\n\n\n    console.log(\"fim parada\")\n    let retorno = new Date()\n    let parada = flow.get(\"parada\") || 0\n    let tParada = (retorno.getTime() - parada.hora) / 1000 / 60\n    let paradasSoma = flow.get(\"paradasSoma\") || flow.set(\"paradasSoma\", { \"Prog\": 0, \"Nprog\": 0 })\n\n    if (dadosPlc.programada == \"true\") {\n        paradasSoma.Prog = paradasSoma.Prog + tParada\n    } else {\n        paradasSoma.Nprog = paradasSoma.Nprog + tParada\n    }\n    flow.set(\"paradasSoma\", paradasSoma);\n    parada.active = false\n    flow.set(\"parada\", parada);\n    global.set(\"parada\" + name_var_global, parada);\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    return {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 8,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": {\n                \"aux_id_falha\": parada.aux_id_falha,\n                \"InicioParada\": parada.hora,\n                \"FimParada\": retorno.getTime(),\n                \"tParada\": Number(tParada.toFixed(2)),\n                \"ID\": isNaN(Number(parada.statechanged_id)) ? 0 : Number(parada.statechanged_id), // Garantir que ID seja um número\n                \"Reason\": parada.statechanged_reason,\n                \"ModeReason\": parada.mode,\n                \"StateReason\": parada.state || 0,\n                \"Programada\": parada.programada,\n                \"turno_atual\": turno.turno,\n                \"equip\": config.machine_name,\n                \"machine_id\": config.machine_id\n            }\n        }\n    }\n}\n\nfunction calculosOEE() {\n\n\n    //msg.filename = \".\\supZIA\\registroTurno_\" + name_var_global + \".json\"\n\n    var sumProg_NProgr = flow.get(\"sumProg_NProgr\")   || [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }];\n\n    let dados_oee = {}\n    let tNProg = Number(sumProg_NProgr[0].soma_nao_programada)\n    let tProg = Number(sumProg_NProgr[0].soma_programada)\n    let tProducao = Number(tempoTranscorrido - (tProg + tNProg))\n\n    node.status({ fill: \"red\", shape: \"ring\", text: dados_oee.percDisp });\n\n    if (dadosPlc.mode == 2 && dadosPlc.state == 6) {\n        dados_oee.statusMachine = \"Rodando\"\n    } else dados_oee.statusMachine = \"Parada\"\n\n    ////////////\n    dados_oee.statusConexao = true\n    dados_oee.mode = Number(dadosPlc.mode)\n    dados_oee.state = Number(dadosPlc.state) || 0\n    dados_oee.rNominalSpeed = Number(dadosPlc.rNominalSpeed)\n    dados_oee.rSetSpeed = Number(dadosPlc.rSetSpeed)\n    dados_oee.rActualSpeed = Number(dadosPlc.rActualSpeed)\n    dados_oee.strRecipeName = String(dadosPlc.strRecipeName)\n    dados_oee.strBottle = String(dadosPlc.strBottle)\n    dados_oee.strCap = String(dadosPlc.strCap)\n    dados_oee.diProductionCounter = Number(dadosPlc.diProductionCounter)\n    dados_oee.diCounterReject_r1 = Number(dadosPlc.diCounterReject_r1)\n    dados_oee.diCounterReject_r2 = Number(dadosPlc.diCounterReject_r2)\n    dados_oee.iActualRecipe = Number(dadosPlc.iActualRecipe)\n    dados_oee.tempoTranscorrido = Number(tempoTranscorrido.toFixed(2))\n    dados_oee.percDisp = (tProducao) / (tempoTranscorrido - tProg) * 100\n\n    var teste = {\n        tProducao: tProducao,\n        tempoTranscorrido: tempoTranscorrido,\n        tProg: tProg,\n        tNProg: tNProg,\n\n\n\n    }\n    dados_oee.teste = teste;\n\n    node.status({ fill: \"red\", shape: \"ring\", text: JSON.stringify(teste) });\n\n    dados_oee.percDisp = Number(dados_oee.percDisp.toFixed(2))\n    dados_oee.percEfic = (dados_oee.diProductionCounter) / ((tProducao * dados_oee.rNominalSpeed) / 60) * 100\n    dados_oee.percEfic = Number(dados_oee.percEfic.toFixed(2))\n    dados_oee.percQual = (((dados_oee.diProductionCounter) - (dados_oee.diCounterReject_r1 + dados_oee.diCounterReject_r2)) / dados_oee.diProductionCounter) * 100\n    dados_oee.percQual = isNaN(Number(dados_oee.percQual)) ? 0 : Number(Number(dados_oee.percQual).toFixed(2));\n    dados_oee.percOEE = dados_oee.percDisp * dados_oee.percEfic * dados_oee.percQual / 10000\n    dados_oee.percOEE = Number(dados_oee.percOEE.toFixed(2))\n    dados_oee.turno = Number(turno.turno)\n    dados_oee.tempoParadaProgramada = Number(tProg.toFixed(2))\n    dados_oee.tempoParadaNaoProgramada = Number(tNProg.toFixed(2))\n    dados_oee.dimetaProduzidos = 100000\n    dados_oee.rmetaPerf = 95.00\n    dados_oee.rmetaDisp = 90.00\n    dados_oee.rmetaQual = 99.00\n    dados_oee.rmetaOEE = 90.00\n    dados_oee.equip = String(config.machine_name)\n\n    ////teste limites - ocorre quando o node é desligado\n    if (dados_oee.percDisp < 0) {\n        dados_oee.percDisp = 0\n    } else if (dados_oee.percDisp > 100) {\n        dados_oee.percDisp = 100\n    }\n\n    if (dados_oee.percEfic < 0) {\n        dados_oee.percEfic = 0\n    } else if (dados_oee.percEfic > 100) {\n        dados_oee.percEfic = 100\n    }\n\n    if (dados_oee.percQual < 0) {\n        dados_oee.percQual = 0\n    } else if (dados_oee.percQual > 100) {\n        dados_oee.percQual = 100\n    }\n\n    if (dados_oee.percOEE < 0) {\n        dados_oee.percOEE = 0\n    } else if (dados_oee.percOEE > 100) {\n        dados_oee.percOEE = 100\n    }\n\n\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    let calculo = {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 3,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": dados_oee\n        }\n    }\n\n    flow.set(\"calculoOEE\", calculo);\n\n\n    return calculo\n\n\n\n}\n\nfunction verificaAnotacao() {\n\n}\n\n\nfunction verificaAnotacaoInicioTurno() {\n    console.log(\"Inicio Turno \" + turno.turno)\n    ////Zera os valores para iniciar novo turno\n    flow.set(\"sumProg_NProgr\", [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }]);\n    if (sm_atual.state == 6 && sm_atual.mode == 2) {\n        //PRODUZINDO\n    } else {\n        //NAO PRODUZINDO\n        anotaInicioParada()\n        msg2 = null\n    }\n\n\n\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 980,
        "wires": [
            [
                "de5ee43edab00781"
            ],
            [
                "3ad6874856fa5f06"
            ],
            [
                "a54ef2d4fe5e167b",
                "644c8684da712876"
            ]
        ]
    },
    {
        "id": "c34a4f02c73f1276",
        "type": "inject",
        "z": "8149f2bb97277fa5",
        "g": "20c28ca51f1a8dc6",
        "name": "cycle",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1060,
        "wires": [
            [
                "13d8c5a535d80129",
                "b553f6944010a3b1",
                "68b4474febf08f34"
            ]
        ]
    },
    {
        "id": "de5ee43edab00781",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "3a68b2a802a75264",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 820,
        "wires": [
            [
                "2fd9978d9166e29e"
            ]
        ]
    },
    {
        "id": "8c397f90de7b33af",
        "type": "comment",
        "z": "8149f2bb97277fa5",
        "g": "3a68b2a802a75264",
        "name": "Registro Troca de Turno",
        "info": "",
        "x": 1040,
        "y": 720,
        "wires": []
    },
    {
        "id": "b03e9c7638862827",
        "type": "http request",
        "z": "8149f2bb97277fa5",
        "g": "3a68b2a802a75264",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "",
                "valueType": "other",
                "valueValue": ""
            }
        ],
        "x": 1730,
        "y": 820,
        "wires": [
            [
                "9cdcdffa6a6defa0"
            ]
        ]
    },
    {
        "id": "9cdcdffa6a6defa0",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "3a68b2a802a75264",
        "name": "debug 442",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 1950,
        "y": 820,
        "wires": []
    },
    {
        "id": "8270dc0916f68678",
        "type": "comment",
        "z": "8149f2bb97277fa5",
        "g": "3a68b2a802a75264",
        "name": "Turno + Tempo Transcorrido",
        "info": "",
        "x": 1060,
        "y": 880,
        "wires": []
    },
    {
        "id": "2fd9978d9166e29e",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "3a68b2a802a75264",
        "name": "Get fimTurnoOEE",
        "func": "msg.payload = flow.get(\"fimTurnoOEE\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 820,
        "wires": [
            [
                "c12d7b72d6a6c08a",
                "1a5fe91b7fcef20c"
            ]
        ]
    },
    {
        "id": "c12d7b72d6a6c08a",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "3a68b2a802a75264",
        "name": "statusMachineId",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.machine_event.payload.statusMachineId = 2\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.machine_event.payload.statusMachineId = 2\n            break;\n        case 5:\n            msg.payload.machine_event.payload.statusMachineId = 5\n            break;\n        case 6:\n            msg.payload.machine_event.payload.statusMachineId = 1\n            break;\n        case 9:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 820,
        "wires": [
            [
                "b03e9c7638862827"
            ]
        ]
    },
    {
        "id": "a54ef2d4fe5e167b",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "9a1d6ca184b4cc04",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1540,
        "wires": [
            [
                "25fc29838838afd7",
                "97394c26e1dbc61c"
            ]
        ]
    },
    {
        "id": "2280d4f025f20da4",
        "type": "http request",
        "z": "8149f2bb97277fa5",
        "g": "9a1d6ca184b4cc04",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1910,
        "y": 1560,
        "wires": [
            [
                "844fe5a3120ff9d6"
            ]
        ]
    },
    {
        "id": "844fe5a3120ff9d6",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "9a1d6ca184b4cc04",
        "name": "debug 443",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2130,
        "y": 1560,
        "wires": []
    },
    {
        "id": "25fc29838838afd7",
        "type": "delay",
        "z": "8149f2bb97277fa5",
        "g": "9a1d6ca184b4cc04",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "120",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1400,
        "y": 1520,
        "wires": [
            [
                "7664efad51105ff7"
            ]
        ]
    },
    {
        "id": "b2aa7834a0399e9e",
        "type": "comment",
        "z": "8149f2bb97277fa5",
        "g": "3a68b2a802a75264",
        "name": "Reset Counters",
        "info": "",
        "x": 1100,
        "y": 1000,
        "wires": []
    },
    {
        "id": "3f29b05d69bc54c9",
        "type": "eth-ip out",
        "z": "8149f2bb97277fa5",
        "g": "3a68b2a802a75264",
        "endpoint": "0631dc708e9be431",
        "variable": "cmdZIA",
        "program": "",
        "name": "",
        "x": 1780,
        "y": 900,
        "wires": []
    },
    {
        "id": "7664efad51105ff7",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "9a1d6ca184b4cc04",
        "name": "statusMachineId",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.machine_event.payload.statusMachineId = 3\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        case 5:\n            msg.payload.machine_event.payload.statusMachineId = 5\n            break;\n        case 6:\n            msg.payload.machine_event.payload.statusMachineId = 1\n            break;\n        case 9:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1560,
        "wires": [
            [
                "2280d4f025f20da4"
            ]
        ]
    },
    {
        "id": "97394c26e1dbc61c",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "9a1d6ca184b4cc04",
        "name": "imediato na troca de estado - com filtro****",
        "func": "let ignora_registro_maquina = flow.get(\"ignora_registro_maquina\");\n\nif (ignora_registro_maquina == 0) {\n\n\n    let ant_mode = context.get(\"ant_mode\") || 0;\n    let ant_state = context.get(\"ant_state\") || 0;\n    let config = flow.get(\"config\");\n    let name_var_global = \"plc\" + config.machine_name\n    let dadosPlc = global.get(name_var_global)\n    let mode = dadosPlc.mode\n    let state = dadosPlc.state\n\n    if (ant_mode != mode || ant_state != state) {\n        context.set(\"ant_mode\", mode);\n        context.set(\"ant_state\", state);\n        return msg\n    }\n\n\n} else {\n\n    ignora_registro_maquina = ignora_registro_maquina - 1\n    flow.set(\"ignora_registro_maquina\", ignora_registro_maquina);\n\n}\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 1600,
        "wires": [
            [
                "7664efad51105ff7"
            ]
        ]
    },
    {
        "id": "fbf952bf2bcc4709",
        "type": "file in",
        "z": "8149f2bb97277fa5",
        "g": "6ebe228893194f88",
        "name": "Lista Falhas",
        "filename": "alm_list_03",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": true,
        "x": 370,
        "y": 140,
        "wires": [
            [
                "a0f1bf3d08b44819"
            ]
        ]
    },
    {
        "id": "1887c720fd51e8e2",
        "type": "inject",
        "z": "8149f2bb97277fa5",
        "g": "6ebe228893194f88",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "fbf952bf2bcc4709"
            ]
        ]
    },
    {
        "id": "eaf30982cf019a6f",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "6ebe228893194f88",
        "name": "debug 492",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 140,
        "wires": []
    },
    {
        "id": "644c8684da712876",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "monitor troca de estado",
        "func": "let config = flow.get(\"config\");\n//msg.config = config\n\n\n\nlet sm_atual = flow.get(\"sm_atual\");\nlet sm_anterior = flow.get(\"sm_anterior_iot\") || { mode: \"0\", state: \"0\" };\n\nif ((sm_atual.mode != sm_anterior.mode) || (sm_atual.state != sm_anterior.state)) {\n\n    //node.warn(\"mudou\");\n    flow.set(\"sm_anterior_iot\", sm_atual);\n\n    msg.machine_id = config.machine_id\n\n    return msg;\n\n\n\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1840,
        "wires": [
            [
                "e6f2f7ce9dbc410e"
            ]
        ]
    },
    {
        "id": "e6f2f7ce9dbc410e",
        "type": "json",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1270,
        "y": 1840,
        "wires": [
            [
                "b29763a2924779d7"
            ]
        ]
    },
    {
        "id": "40c50b1e48df55f0",
        "type": "inject",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "60 segundos",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1420,
        "y": 1760,
        "wires": [
            [
                "5983f2c6be6e5243"
            ]
        ]
    },
    {
        "id": "5983f2c6be6e5243",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "consulta turno e ajsute de filtro",
        "func": "const config = flow.get(\"config\");\nmsg.machine_id = config.machine_id\n// Recupera a lista de horários de turnos a partir de uma variável global e o índice do turno desejado da variável de fluxo.\nlet horarios_turnos = global.get(\"turnos_times\");\nlet turno = flow.get(\"memo_turno\");\n\n// Faz uma cópia da lista de horários para evitar modificar o valor original na variável global.\nlet turnos_times = JSON.parse(JSON.stringify(horarios_turnos));\n\n// Obtém a data e hora atuais.\nconst today = new Date();\n// Define o início do dia (00:00:00) para a data atual. Essa data será usada para calcular o tempo em segundos desde a meia-noite.\nconst startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n// Converte o início do dia em formato epoch (segundos desde 1 de janeiro de 1970).\nconst epochTime = Math.floor(startOfDay.getTime() / 1000);\n\n\n\n\n\n// Define o ajuste de fuso horário em segundos. Neste caso, são 10800 segundos (ou 3 horas).\nconst timezoneOffset = -7200; // 2 horas em segundos\n\n// Define a quantidade de segundos em um dia, para lidar com turnos que ultrapassam a meia-noite.\nconst secondsInDay = 86400; // 24 horas em segundos\n\n// Itera sobre cada turno para calcular e ajustar os horários de início e fim.\nfor (let index = 0; index < turnos_times.length; index++) {\n    // Remove propriedades desnecessárias de cada turno para simplificar os dados.\n    delete turnos_times[index].created_at;\n    delete turnos_times[index].updated_at;\n    delete turnos_times[index].id;\n\n    // Extrai a parte do horário de início do turno (no formato 'HH:MM:SS') para conversão em segundos.\n    const [hours_s, minutes_s, seconds_s] = turnos_times[index].start_time.substring(11, 19).split(':').map(Number);\n    // Converte o horário de início em segundos: (horas * 3600) + (minutos * 60) + segundos.\n    const totalSecondsStart = hours_s * 3600 + minutes_s * 60 + seconds_s;\n\n    // Extrai a parte do horário de fim do turno (também no formato 'HH:MM:SS') para conversão em segundos.\n    const [hours_e, minutes_e, seconds_e] = turnos_times[index].end_time.substring(11, 19).split(':').map(Number);\n    // Converte o horário de fim em segundos: (horas * 3600) + (minutos * 60) + segundos.\n    const totalSecondsEnd = hours_e * 3600 + minutes_e * 60 + seconds_e;\n\n    // Calcula o horário de início absoluto do turno, somando o epoch do dia, o horário de início em segundos e o ajuste de fuso horário.\n    let start_time = new Date((epochTime + totalSecondsStart + timezoneOffset) * 1000);\n    // Calcula o horário de fim absoluto do turno da mesma forma.\n    let end_time = new Date((epochTime + totalSecondsEnd + timezoneOffset) * 1000);\n\n    // Verifica se o horário de início é maior que o horário de fim, indicando que o turno ultrapassa a meia-noite.\n    if (start_time > end_time) {\n        // Ajusta o horário de fim, somando um dia (em segundos) para representar corretamente um turno que termina no dia seguinte.\n        end_time = new Date((epochTime + totalSecondsEnd + timezoneOffset + secondsInDay) * 1000);\n    }\n\n    // Converte os horários de início e fim ajustados para o formato ISO e atualiza no objeto do turno.\n    turnos_times[index].start_time = start_time.toISOString();\n    turnos_times[index].end_time = end_time.toISOString();\n}\n\n// Define a saída da mensagem como o turno específico desejado (indexado com base no número do turno menos 1).\nmsg.payload = turnos_times[turno - 1];\nmsg.machine_id = config.machine_id\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 1840,
        "wires": [
            [
                "54f3a38f9e8bd889",
                "b637a38464668924",
                "def2323d332fb5e4",
                "3ab534a58ad42225",
                "05e8a385d312e6e4"
            ]
        ]
    },
    {
        "id": "704c7fcdd4745e26",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "monta resumo de tempos",
        "func": "const data = msg.payload;\n\n// Converte para o formato desejado, agrupando por `mode` e `state`\nconst result = data.reduce((acc, { mode, state, total_active_duration }) => {\n  if (!acc[mode]) acc[mode] = {}; // Cria a entrada para o mode se não existir\n  acc[mode][state] = (acc[mode][state] || 0) + Number(parseFloat(total_active_duration)); // Soma o total_active_duration\n  return acc;\n}, {});\n\n// verifica se a soma de todos os estados esta consistente com o tempo de turno transcorrifo\nlet config = flow.get(\"config\");\nlet turno = global.get(\"turno_\" + config.factory)\n//node.warn(turno);\n\n\n\n\n// Inicializa `msg.payload` com o objeto `omac`\nmsg.payload = { omac: result };\n\n\n\n// verifica o estado atual e altera o omac\nlet lastState = flow.get(\"lastState\");\n\nif (lastState && lastState[0] && lastState[0].payload) {\n  const mode = lastState[0].payload.machine_event.payload.mode;\n  const state = lastState[0].payload.machine_event.payload.state;\n\n  // Verifica se mode e state existem em msg.payload.omac antes de somar\n  if (msg.payload.omac[mode] && msg.payload.omac[mode][state] !== undefined) {\n    msg.payload.omac[mode][state] =\n      Number(parseFloat(msg.payload.omac[mode][state])) + Number(parseFloat(lastState[1]));\n  }\n}\n\n\n\n\nlet totalProductive = 0;\nlet totalNonProductive = 0;\n\n// Calcula os totais produtivos e não produtivos\nObject.entries(result).forEach(([mode, states]) => {\n  Object.entries(states).forEach(([state, activeMinutes]) => {\n    const minutes = Number(parseFloat(activeMinutes));\n\n    if (state === \"6\" && mode === \"2\") {\n      totalProductive += minutes;\n    } else {\n      totalNonProductive += minutes;\n    }\n  });\n});\n\n\n\n// Armazena `msg.payload` no fluxo para acesso posterior\nflow.set(\"temposOEE_parcial\", msg.payload);\n\n\n\n// Adiciona os somatórios ao `msg.payload`\nmsg.payload.somas = {\n  totalProductive: totalProductive,\n  totalNonProductive: totalNonProductive\n};\n\n\n\n// Retorna `msg` atualizado\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1840,
        "wires": [
            [
                "61467aec70b03252"
            ]
        ]
    },
    {
        "id": "6a2d5c8470ecc758",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "debug 515",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 1920,
        "wires": []
    },
    {
        "id": "83792730afc5da96",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "consulta ultimo registro",
        "func": "msg.payload[0].payload = JSON.parse(msg.payload[0].payload)\nflow.set(\"lastState\", msg.payload);\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 1900,
        "wires": [
            [
                "6a2d5c8470ecc758"
            ]
        ]
    },
    {
        "id": "1eabcea3d06141fb",
        "type": "inject",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2120,
        "y": 2040,
        "wires": [
            [
                "c6535168095454b3"
            ]
        ]
    },
    {
        "id": "e5388fccd955a857",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "debug 516",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2750,
        "y": 2040,
        "wires": []
    },
    {
        "id": "c6535168095454b3",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "function 267",
        "func": "let horarios_turnos = global.get(\"turnos_times\");\nlet turno = flow.get(\"memo_turno\");\n\nlet turnos_times = JSON.stringify(horarios_turnos)\nturnos_times = JSON.parse(turnos_times);\n//node.warn(turnos_times);\n\nconst today = new Date();\nconst startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\nconst epochTime = Math.floor(startOfDay.getTime() / 1000); // Converte de milissegundos para segundos\n//node.warn(epochTime); // Exibe a data de hoje às 00:00 em epoch (segundos)\n\nfor (let index = 0; index < turnos_times.length; index++) {\n    delete turnos_times[index].created_at\n    delete turnos_times[index].updated_at\n    delete turnos_times[index].id\n\n    const timePart_start = turnos_times[index].start_time.substring(11, 19); // '06:00:00'\n    // Divide a hora, minuto e segundo\n    const [hours_s, minutes_s, seconds_s] = timePart_start.split(':').map(Number);\n    // Converte para segundos\n    const totalMinutes_start = ((hours_s * 3600) + (minutes_s * 60) + (seconds_s));\n\n\n    const timePart_end = turnos_times[index].end_time.substring(11, 19); // '06:00:00'\n    // Divide a hora, minuto e segundo\n    const [hours_e, minutes_e, seconds_e] = timePart_end.split(':').map(Number);\n    // Converte para segundos\n    const totalMinutes_end = ((hours_e * 3600) + (minutes_e * 60) + (seconds_e));\n\n    //node.warn(totalMinutes_start);\n    //node.warn(totalMinutes_end);\n\n    const start_time = new Date((epochTime + totalMinutes_start)*1000)\n    const end_time = new Date((epochTime + totalMinutes_end)*1000)\n\n  \n\n    turnos_times[index].start_time = start_time.toISOString()\n    turnos_times[index].end_time = end_time.toISOString()\n\n\n\n  \n\n}\n\nmsg.payload = turnos_times[turno-1]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 2040,
        "wires": [
            [
                "52d86797874575c8"
            ]
        ]
    },
    {
        "id": "8ad97d48527e2948",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "debug 519",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 1980,
        "wires": []
    },
    {
        "id": "61467aec70b03252",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "debug 524",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 1840,
        "wires": []
    },
    {
        "id": "b29763a2924779d7",
        "type": "postgresql",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "",
        "query": "INSERT INTO public.machine_events\n(id_machine, payload)\nVALUES({{{msg.machine_id}}}, '{{{msg.payload}}}');",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1430,
        "y": 1840,
        "wires": [
            [
                "5983f2c6be6e5243"
            ]
        ]
    },
    {
        "id": "54f3a38f9e8bd889",
        "type": "postgresql",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n),\nfiltered_intervals AS (\n    SELECT \n        id_machine,\n        mode,\n        state,\n        \n        -- Calcula o início e o fim ajustados do evento, limitados pelo intervalo de filtro\n        GREATEST(timestamp at time zone 'UTC' at time zone 'GMT-3', '{{{msg.payload.start_time}}}'::timestamp) AS adjusted_start,\n        LEAST(next_timestamp at time zone 'UTC' at time zone 'GMT-3', '{{{msg.payload.end_time}}}'::timestamp) AS adjusted_end\n        \n    FROM \n        state_intervals\n    WHERE \n        next_timestamp at time zone 'UTC' at time zone 'GMT-3' > '{{{msg.payload.start_time}}}'::timestamp  -- start_filter\n        AND timestamp at time zone 'UTC' at time zone 'GMT-3' <'{{{msg.payload.end_time}}}'::timestamp     -- end_filter\n        AND id_machine = 3  -- substitua 1 pelo id_machine desejado\n)\nSELECT \n    id_machine,\n    mode,\n    state,\n    \n    -- Calcula o tempo ativo total ajustado dentro do intervalo\n    SUM(\n        CASE \n            WHEN adjusted_end > adjusted_start THEN \n                EXTRACT(EPOCH FROM (adjusted_end - adjusted_start)) / 60  -- Tempo em minutos\n            ELSE \n                0\n        END\n    ) AS total_active_duration\nFROM \n    filtered_intervals\nGROUP BY \n    id_machine,\n    mode,\n    state\nORDER BY \n    id_machine,\n    mode,\n    state;\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2110,
        "y": 1840,
        "wires": [
            [
                "9fc920db6e22d2c6"
            ]
        ]
    },
    {
        "id": "52d86797874575c8",
        "type": "postgresql",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n)\nSELECT \n    id,\n    timestamp,\n    id_machine,\n    payload,\n    mode,\n    state,\n    next_timestamp,\n    -- Calcula o tempo que o estado ficou ativo\n    CASE \n        WHEN next_timestamp IS NOT NULL THEN \n            AGE(next_timestamp, timestamp)\n        ELSE \n            NULL\n    END AS active_duration\nFROM \n    state_intervals\nORDER BY \n    timestamp;",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2530,
        "y": 2040,
        "wires": [
            [
                "e5388fccd955a857"
            ]
        ]
    },
    {
        "id": "b637a38464668924",
        "type": "postgresql",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "",
        "query": "SELECT *\nFROM machine_events\nWHERE id_machine =3\nORDER BY timestamp DESC\nlimit 1\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2110,
        "y": 1900,
        "wires": [
            [
                "83792730afc5da96"
            ]
        ]
    },
    {
        "id": "def2323d332fb5e4",
        "type": "postgresql",
        "z": "8149f2bb97277fa5",
        "d": true,
        "g": "af2d927aeb5ecfc5",
        "name": "Lista FIltrada Tempo e Maquina",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n)\nSELECT \n    id,\n    timestamp AS start_time,       -- Hora inicial do estado\n    next_timestamp AS end_time,    -- Hora final do estado\n    id_machine,\n    payload,\n    mode,\n    state,\n    -- Calcula o tempo que o estado ficou ativo em minutos\n    CASE \n        WHEN next_timestamp IS NOT NULL THEN \n            EXTRACT(EPOCH FROM (next_timestamp - timestamp)) / 60  -- Tempo em minutos\n        ELSE \n            NULL\n    END AS active_duration\nFROM \n    state_intervals\nWHERE \n    -- Filtros aplicados na tabela de saída\n    next_timestamp > '{{{msg.payload.start_time}}}'::timestamp  -- start_filter\n    AND timestamp < '{{{msg.payload.end_time}}}'::timestamp   -- end_filter\n    AND id_machine = 1  -- substitua 123 pelo id_machine desejado\nORDER BY \n    timestamp;\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2170,
        "y": 1980,
        "wires": [
            [
                "8ad97d48527e2948"
            ]
        ]
    },
    {
        "id": "944d724c57981b6b",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "0b369b95b58f3b51",
        "name": "debug 517",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 1200,
        "wires": []
    },
    {
        "id": "b553f6944010a3b1",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "0b369b95b58f3b51",
        "name": "Calc Actual Stop",
        "func": "const lastState = flow.get(\"lastState\");\n\nconst lastTime = new Date(lastState[0].timestamp);\nconst currentTime = new Date();\n\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  AJUSTE DE TEMPO xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//const timezoneOffset = currentTime.getTimezoneOffset();\nconst timezoneOffset = 0\n\n\n\nlastTime.setHours(lastTime.getHours() - timezoneOffset / 60);\n\nnode.status({ fill: \"red\", shape: \"ring\", text: lastState[1] });\n\n\n\n\n// Converte para segundos\nconst lastTimeInSeconds = Math.floor(lastTime.getTime() / 1000);\nconst currentTimeInSeconds = Math.floor(currentTime.getTime() / 1000);\n\nconst timeDifference = (currentTimeInSeconds - lastTimeInSeconds) / 60;\n\nmsg.payload = {}\n\nmsg.payload.actualDuration = lastState[1] = timeDifference\nmsg.payload.actualState = lastState[0].payload.machine_event.payload.state\nmsg.payload.actualMode = lastState[0].payload.machine_event.payload.mode\n\n\nconst tempoTranscorrido = flow.get(\"tempoTranscorrido\");\n\nif (lastState[1] > tempoTranscorrido) {\n    lastState[1] = tempoTranscorrido\n\n}\nflow.set(\"lastState\", lastState);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar sumProg_NProgr_parcial = flow.get(\"sumProg_NProgr_parcial\");\nlet parada = flow.get(\"parada\");\nif (!isNaN(parada.tParadaAtual)) {\n    //node.warn(parada.active);\n    \n    var calcSumProg_NProgr = JSON.parse(JSON.stringify(sumProg_NProgr_parcial))\n    if (parada.active) {\n\n        if (parada.programada == 'true') {\n            //node.warn(\"Programada\");\n            calcSumProg_NProgr[0].soma_programada = Number(sumProg_NProgr_parcial[0].soma_programada) + Number(parada.tParadaAtual)\n            calcSumProg_NProgr[0].soma_nao_programada = Number(sumProg_NProgr_parcial[0].soma_nao_programada)\n\n            //node.warn(sumProg_NProgr[0].soma_programada);\n        } else {\n            \n            //node.warn(\"Nao Programada\");\n            //node.warn(Number(sumProg_NProgr_parcial[0].soma_nao_programada));\n            //node.warn(Number(parada.tParadaAtual));\n            calcSumProg_NProgr[0].soma_programada = Number(sumProg_NProgr_parcial[0].soma_programada)\n            calcSumProg_NProgr[0].soma_nao_programada = Number(sumProg_NProgr_parcial[0].soma_nao_programada) + Number(parada.tParadaAtual)\n            //node.warn(sumProg_NProgr[0].soma_nao_programada);\n        }\n    } else {\n        calcSumProg_NProgr = sumProg_NProgr_parcial\n\n    }\n} else {\n    calcSumProg_NProgr = sumProg_NProgr_parcial\n    \n}\n\nflow.set(\"sumProg_NProgr\", calcSumProg_NProgr) || [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1200,
        "wires": [
            [
                "944d724c57981b6b"
            ]
        ]
    },
    {
        "id": "e72d08ecd11946ca",
        "type": "comment",
        "z": "8149f2bb97277fa5",
        "g": "578e1ea5e2a32724",
        "name": "Registro Fim da Parada de Linha",
        "info": "",
        "x": 1130,
        "y": 1400,
        "wires": []
    },
    {
        "id": "01658b55d7c20bfe",
        "type": "http request",
        "z": "8149f2bb97277fa5",
        "g": "578e1ea5e2a32724",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1890,
        "y": 1220,
        "wires": [
            [
                "3a6eddf5873c834a"
            ]
        ]
    },
    {
        "id": "3a6eddf5873c834a",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "578e1ea5e2a32724",
        "name": "debug 277",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2070,
        "y": 1220,
        "wires": []
    },
    {
        "id": "3ad6874856fa5f06",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "578e1ea5e2a32724",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n\n    //msg.payload.machine_event.payload.ID = 999;\n\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1260,
        "wires": [
            [
                "22a724b5b8716c18"
            ]
        ]
    },
    {
        "id": "22a724b5b8716c18",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "578e1ea5e2a32724",
        "name": "function 257",
        "func": "\nif (msg.payload != null) {\n\n    if (msg.payload.machine_event.payload.ID != 8888) {\n        return [msg, msg]\n    } else return [msg, msg];\n\n\n\n\n} else {\n\n    node.warn(\"Mudanca de estado sem registro\");\n\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 1260,
        "wires": [
            [
                "01658b55d7c20bfe"
            ],
            [
                "a846a2be81b7cdd8"
            ]
        ]
    },
    {
        "id": "734674862838ecf2",
        "type": "postgresql",
        "z": "8149f2bb97277fa5",
        "g": "578e1ea5e2a32724",
        "name": "",
        "query": "INSERT INTO public.appoint\n(payload)\nVALUES('{{{msg.payload}}}');",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1890,
        "y": 1340,
        "wires": [
            [
                "7201b791b2918688"
            ]
        ]
    },
    {
        "id": "7201b791b2918688",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "578e1ea5e2a32724",
        "name": "debug 494",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 1340,
        "wires": []
    },
    {
        "id": "a846a2be81b7cdd8",
        "type": "json",
        "z": "8149f2bb97277fa5",
        "g": "578e1ea5e2a32724",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1710,
        "y": 1340,
        "wires": [
            [
                "734674862838ecf2"
            ]
        ]
    },
    {
        "id": "ef815fe25f7a5012",
        "type": "link in",
        "z": "8149f2bb97277fa5",
        "g": "578e1ea5e2a32724",
        "name": "apontamento maquina",
        "links": [
            "212fc0710bd54938"
        ],
        "x": 975,
        "y": 1360,
        "wires": [
            [
                "c1c39a8a84bf1245"
            ]
        ]
    },
    {
        "id": "4f756e338d3e4a32",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "578e1ea5e2a32724",
        "name": "debug 508",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 1360,
        "wires": []
    },
    {
        "id": "9fc920db6e22d2c6",
        "type": "delay",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2360,
        "y": 1840,
        "wires": [
            [
                "704c7fcdd4745e26"
            ]
        ]
    },
    {
        "id": "6262fd62991761a7",
        "type": "file in",
        "z": "8149f2bb97277fa5",
        "g": "6ebe228893194f88",
        "name": "",
        "filename": "alm_list_03",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 350,
        "y": 200,
        "wires": [
            [
                "1535bae7d56cbc0b"
            ]
        ]
    },
    {
        "id": "73d553be1f51f346",
        "type": "inject",
        "z": "8149f2bb97277fa5",
        "g": "6ebe228893194f88",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "6262fd62991761a7"
            ]
        ]
    },
    {
        "id": "1535bae7d56cbc0b",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "6ebe228893194f88",
        "name": "debug 530",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 200,
        "wires": []
    },
    {
        "id": "0211ef5c159646ab",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "6ebe228893194f88",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.statechanged_id",
        "statusType": "msg",
        "x": 1050,
        "y": 140,
        "wires": []
    },
    {
        "id": "eda9634d7f289d80",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "6ebe228893194f88",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.statechanged_reason",
        "statusType": "msg",
        "x": 1050,
        "y": 200,
        "wires": []
    },
    {
        "id": "4e21a76ea6fb4b2f",
        "type": "http request",
        "z": "8149f2bb97277fa5",
        "g": "6626fcb850d0c186",
        "name": "GET StopReasons",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1670,
        "y": 60,
        "wires": [
            [
                "663397ca93c857ed"
            ]
        ]
    },
    {
        "id": "663397ca93c857ed",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "6626fcb850d0c186",
        "name": "function 269",
        "func": "const data = JSON.parse(msg.payload)\nlet id = Math.floor(msg.id_maq)\n\nif (Number.isNaN(id)) {\n    id = null\n}\n\n\nmsg.payload = {}\n\n\nfunction StopsByMachine(data, selectedId = null) {\n    const machineMap = new Map();\n    data.forEach(event => {\n        event.machines.forEach(machine => {\n            if (!machineMap.has(machine.id)) {\n                machineMap.set(machine.id, { id: machine.id, name: machine.name, stopReasons: [] });\n            }\n            machineMap.get(machine.id).stopReasons.push([event.plc_code, event.name, event.expected]);\n        });\n    });\n\n    if (selectedId !== null) {\n        return machineMap.has(selectedId) ? machineMap.get(selectedId) : null;\n    }\n\n    return Array.from(machineMap.values());\n}\n\n\n\nfunction listUniqueMachineNames(data) {\n\n    const machines = new Map();\n    data.forEach(event => {\n        event.machines.forEach(machine => {\n            machines.set(machine.id, machine.name);\n        });\n    });\n\n    const result = Array.from(machines).map(([id, name]) => ({ id, name }));\n\n    return result\n\n\n}\n\n\n\n// Chamar a função e imprimir o resultado\nmsg.payload.maquinas = listUniqueMachineNames(data);\n\n\n\n// Executar a função e imprimir o resultado\nmsg.payload.stopreasons = StopsByMachine(data, id);\n\nflow.set(\"stopreasons\", msg.payload.stopreasons);\n\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 60,
        "wires": [
            [
                "763491603c44df28"
            ]
        ]
    },
    {
        "id": "d01af5d2430f6a5c",
        "type": "inject",
        "z": "8149f2bb97277fa5",
        "g": "6626fcb850d0c186",
        "name": "",
        "props": [],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1330,
        "y": 60,
        "wires": [
            [
                "b8609d1df8811e6d"
            ]
        ]
    },
    {
        "id": "763491603c44df28",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "6626fcb850d0c186",
        "name": "debug 534",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 60,
        "wires": []
    },
    {
        "id": "b8609d1df8811e6d",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "6626fcb850d0c186",
        "name": "Config",
        "func": "\nlet config = flow.get(\"config\")\n\n//msg.id_maq = msg.req.params.id_maq\nmsg.id_maq = config.machine_id\n\n//node.warn(\"Aqui\");\n\nif (config.send == true) {\n  \n\n    msg.url = config.url + \"/stop_reasons.json\"\n    msg.headers = {}\n    msg.headers['Authorization'] = config.token_line\n    msg.payload = {}\n\n\nreturn msg\n\n\n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 60,
        "wires": [
            [
                "4e21a76ea6fb4b2f"
            ]
        ]
    },
    {
        "id": "ff08c9a381949bfe",
        "type": "inject",
        "z": "8149f2bb97277fa5",
        "d": true,
        "g": "6626fcb850d0c186",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "100",
        "topic": "",
        "x": 1330,
        "y": 120,
        "wires": [
            [
                "fbe5e56b856324a9"
            ]
        ]
    },
    {
        "id": "fbe5e56b856324a9",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "6626fcb850d0c186",
        "name": "lista paradas",
        "func": "msg.payload = {}\n\n\nlet lista_paradas = [\n    {\n        \"id\": 2,\n        \"descr\": \"\",\n        \"cod_class\": 0, \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    }\n]\n\n\nconst paradas = flow.get(\"stopreasons\");\n\nnode.warn(lista_paradas);\nnode.warn(paradas);\n\nfor (let index = 0; index < paradas.stopReasons.length; index++) {\n    //node.warn(paradas.stopReasons[index][0]);\n    lista_paradas[index].id = 9999\n    lista_paradas[index].descr = paradas.stopReasons[index][1]\n    lista_paradas[index].cod_class = paradas.stopReasons[index][0]\n    lista_paradas[index].ZZZZZZZZZZudtZIA_Par3 = 5\n    lista_paradas[index].progr = paradas.stopReasons[index][2]\n}\n\n\nnode.warn(lista_paradas);\n\nmsg.payload.paradas = lista_paradas\n\nreturn msg\n\n\n// msg.payload = {\n//     \"id\": 23,\n//     \"descr\": \"\",\n//     \"cod_class\": 0,\n//     \"ZZZZZZZZZZudtZIA_Par3\": 0,\n//     \"progr\": false\n// }\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 120,
        "wires": [
            [
                "cb95e6df842fb012",
                "c62d0e5bda26edaa"
            ]
        ]
    },
    {
        "id": "cb95e6df842fb012",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "6626fcb850d0c186",
        "name": "debug 538",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1910,
        "y": 180,
        "wires": []
    },
    {
        "id": "073e49eff67162b0",
        "type": "inject",
        "z": "8149f2bb97277fa5",
        "g": "03f5365aa1ec1302",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "1e7d64275a3112de"
            ]
        ]
    },
    {
        "id": "1e7d64275a3112de",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "03f5365aa1ec1302",
        "name": "CONFIG",
        "func": "//configuracaao de linha\n\nlet config = {}\n\nconfig.machine_name = \"robopal\"\n\nconfig.factory = 1\nconfig.machine_id = 3\nconfig.token_machine = \"Bearer \" + \"12f99fdd49a19cf868083da9c84c83f76b6809c8\"\nconfig.token_line = \"Bearer \" + \"00bc757a398cc98d299fd6fc2119929c48647db9\"\nconfig.url = \"http://127.0.0.1:3003\"\nconfig.url_machine = config.url + \"/machine_events\"\nconfig.url_line = config.url + \"/production_line_events\"\nconfig.send = true /// habilita POST\n\nflow.set(\"config\", config);\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 340,
        "wires": [
            [
                "44cc6e735cdbdd5f"
            ]
        ]
    },
    {
        "id": "44cc6e735cdbdd5f",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "03f5365aa1ec1302",
        "name": "debug 439",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 340,
        "wires": []
    },
    {
        "id": "3ab534a58ad42225",
        "type": "postgresql",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "",
        "query": "SELECT\n    SUM(CASE \n            WHEN (payload::jsonb->'machine_event'->'payload'->>'Programada')::boolean = true THEN \n                (payload::jsonb->'machine_event'->'payload'->>'tParada')::numeric \n            ELSE 0 \n        END) AS soma_programada,\n    SUM(CASE \n            WHEN (payload::jsonb->'machine_event'->'payload'->>'Programada')::boolean = false THEN \n                (payload::jsonb->'machine_event'->'payload'->>'tParada')::numeric \n            ELSE 0 \n        END) AS soma_nao_programada\nFROM public.appoint\nWHERE \n    to_timestamp((payload::jsonb->'machine_event'->'payload'->>'InicioParada')::bigint / 1000) AT TIME ZONE 'UTC' >= '{{{msg.payload.start_time}}}'\n    AND to_timestamp((payload::jsonb->'machine_event'->'payload'->>'FimParada')::bigint / 1000) AT TIME ZONE 'UTC' <= '{{{msg.payload.end_time}}}'\n    AND ((payload::jsonb->'machine_event'->'payload'->>'machine_id')::int) = 3\n    ",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2110,
        "y": 1780,
        "wires": [
            [
                "50d727930116a70b"
            ]
        ]
    },
    {
        "id": "b536304a17545ec0",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "debug 540",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 1780,
        "wires": []
    },
    {
        "id": "50d727930116a70b",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "SET Prog e Nao Pog",
        "func": "const soma_programada = Number(msg.payload[0].soma_programada) || 0\nconst soma_nao_programada = Number(msg.payload[0].soma_nao_programada) || 0\n\nconst sumProg_NProgr_parcial = [{\n    \"soma_programada\":soma_programada,\n    \"soma_nao_programada\": soma_nao_programada\n}]\n\nflow.set(\"sumProg_NProgr_parcial\", sumProg_NProgr_parcial);\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2580,
        "y": 1780,
        "wires": [
            [
                "b536304a17545ec0"
            ]
        ]
    },
    {
        "id": "a0f1bf3d08b44819",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "6ebe228893194f88",
        "name": "function 271",
        "func": "flow.set(\"alm_list\", msg.payload);\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 140,
        "wires": [
            [
                "eaf30982cf019a6f"
            ]
        ]
    },
    {
        "id": "da1b12806d401636",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "6ebe228893194f88",
        "name": "debug 555",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload.lastalm",
        "statusType": "msg",
        "x": 1050,
        "y": 260,
        "wires": []
    },
    {
        "id": "08409c32f4bf7116",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "6ebe228893194f88",
        "name": "debug 558",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 100,
        "wires": []
    },
    {
        "id": "c62d0e5bda26edaa",
        "type": "eth-ip out",
        "z": "8149f2bb97277fa5",
        "g": "6626fcb850d0c186",
        "endpoint": "8d756ed66187c2a2",
        "variable": "cmdZIA",
        "program": "",
        "name": "",
        "x": 2140,
        "y": 140,
        "wires": []
    },
    {
        "id": "05e8a385d312e6e4",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "af2d927aeb5ecfc5",
        "name": "debug 559",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 2000,
        "wires": []
    },
    {
        "id": "942cd52f330999ba",
        "type": "eth-ip in",
        "z": "8149f2bb97277fa5",
        "g": "6ebe228893194f88",
        "endpoint": "0631dc708e9be431",
        "mode": "single",
        "variable": "dados_ZIA",
        "program": "",
        "name": "",
        "gatherMetrics": true,
        "includeTimestamp": true,
        "x": 140,
        "y": 60,
        "wires": [
            [
                "0d2122c2dfe6b16f",
                "08409c32f4bf7116"
            ]
        ]
    },
    {
        "id": "c6c2fc6203d7e4fa",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "name": "debug 561",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 420,
        "wires": []
    },
    {
        "id": "c1c39a8a84bf1245",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "578e1ea5e2a32724",
        "name": "Atualiza Parada - Apontamento",
        "func": "const config = flow.get(\"config\");\n\nlet parada = flow.get(\"parada\");\n\nparada.statechanged_id = msg.payload.newStopReason[1]\nparada.statechanged_reason = msg.payload.newStopReason[0]\nparada.programada = msg.payload.newStopReason[2]\nparada.justifica = true\n\n\nflow.set(\"parada\", parada);\nglobal.set(\"parada\" + config.machine_name, parada);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1360,
        "wires": [
            [
                "4f756e338d3e4a32"
            ]
        ]
    },
    {
        "id": "e444905bd2d71d7a",
        "type": "inject",
        "z": "8149f2bb97277fa5",
        "g": "3a68b2a802a75264",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 960,
        "wires": [
            [
                "ddc87fbc43b79e3e"
            ]
        ]
    },
    {
        "id": "ddc87fbc43b79e3e",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "3a68b2a802a75264",
        "name": "function 280",
        "func": "const cmdResetAtivo = flow.get(\"cmdResetAtivo\");\nif (cmdResetAtivo) {\n    return msg\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 940,
        "wires": [
            [
                "1a5fe91b7fcef20c"
            ]
        ]
    },
    {
        "id": "1e40e2f15f5bdc47",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "3a68b2a802a75264",
        "name": "function 281",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nnode.warn(dadosPlc.diProductionCounter);\n\nif (dadosPlc.diProductionCounter!='0') {\n    return msg\n}\n\nlet cmdResetAtivo = flow.get(\"cmdResetAtivo\");\ncmdResetAtivo = false\nflow.set(\"cmdResetAtivo\", cmdResetAtivo);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 960,
        "wires": [
            [
                "1a5fe91b7fcef20c",
                "c761f26f4bab92fd"
            ]
        ]
    },
    {
        "id": "1a5fe91b7fcef20c",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "3a68b2a802a75264",
        "name": "set reset Counters",
        "func": "let cmdResetAtivo = true\nflow.set(\"cmdResetAtivo\", cmdResetAtivo);\n\nmsg.payload ={}\nmsg.payload.xResetCounter = 1\nmsg.payload.xResetReject_r1 = 1\nmsg.payload.xResetReject_r2 = 1\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 880,
        "wires": [
            [
                "1e40e2f15f5bdc47",
                "3f29b05d69bc54c9"
            ]
        ]
    },
    {
        "id": "c761f26f4bab92fd",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "3a68b2a802a75264",
        "name": "debug 569",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 980,
        "wires": []
    },
    {
        "id": "cda14a24a7c0bdbd",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "name": "debug 573",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 2220,
        "wires": []
    },
    {
        "id": "27f2a6f5f17f2ae8",
        "type": "link in",
        "z": "8149f2bb97277fa5",
        "name": "link in 3",
        "links": [
            "e8d9e95c6f28a184"
        ],
        "x": 465,
        "y": 2240,
        "wires": [
            [
                "4f88d0d3fed95da8"
            ]
        ]
    },
    {
        "id": "4f88d0d3fed95da8",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "403f43560d78e20d",
        "name": "Alarme",
        "func": "let memo_aux_id_falha = context.get(\"aux_id_falha\");\nif (msg.payload.aux_id_falha != memo_aux_id_falha) {\n    if (msg.payload.aux_id_falha != 0 && msg.payload.aux_id_falha != 9999) {\n        let config = flow.get(\"config\");\n        let dados_alm = {\n            TimeStamp: new Date(),\n            nameMachine: config.machine_name,\n            ID: msg.payload.aux_id_falha,\n            reason: msg.payload.lastalm\n        };\n        const d = new Date();\n        let minutes = d.getMinutes();\n        let agora = new Date()\n        msg.payload = {\n            \"authenticity_token\": \"L3uhfD4yxArDD6++xrFmFX9LLKfX5PyMstpcUL0zi6SRrHAzTqfBCj1iKfYp4o6GLK9emMZYiAmxF1T9C7BQ==\",\n            \"machine_event\": {\n                \"timestamp(1i)\": agora.getFullYear().toString(),\n                \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n                \"timestamp(3i)\": agora.getDate().toString(),\n                \"timestamp(4i)\": agora.getHours().toString(),\n                \"timestamp(5i)\": agora.getMinutes().toString(),\n                \"event_type_id\": 5,\n                //        \"timestamp(3i)\": d.getDay(),\n                //        \"timestamp(2i)\": d.getMonth(),\n                //        \"timestamp(1i)\": d.getFullYear(),\n                //        \"timestamp(4i)\": d.getHours(),\n                //        \"timestamp(5i)\": d.getMinutes(),\n                \"payload\": dados_alm\n            }\n        }\n        context.set(\"aux_id_falha\", dados_alm.ID);\n        return msg\n    }\n}\ncontext.set(\"aux_id_falha\", msg.payload.aux_id_falha);\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 2360,
        "wires": [
            [
                "379b7d63be809392"
            ]
        ]
    },
    {
        "id": "0f78254b3422b84b",
        "type": "http request",
        "z": "8149f2bb97277fa5",
        "g": "403f43560d78e20d",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1470,
        "y": 2360,
        "wires": [
            [
                "a7d14a2d3a1bad24"
            ]
        ]
    },
    {
        "id": "a7d14a2d3a1bad24",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "403f43560d78e20d",
        "name": "debug 574",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 2360,
        "wires": []
    },
    {
        "id": "379b7d63be809392",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "403f43560d78e20d",
        "name": "function 283",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 2360,
        "wires": [
            [
                "0f78254b3422b84b",
                "cda14a24a7c0bdbd"
            ]
        ]
    },
    {
        "id": "e8d9e95c6f28a184",
        "type": "link out",
        "z": "8149f2bb97277fa5",
        "g": "6ebe228893194f88",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "27f2a6f5f17f2ae8"
        ],
        "x": 1005,
        "y": 320,
        "wires": []
    },
    {
        "id": "71ad0b171f2001ec",
        "type": "link in",
        "z": "8149f2bb97277fa5",
        "g": "19a5be4e42605f8a",
        "name": "link in 27",
        "links": [
            "615e1f011ffb0b71"
        ],
        "x": 105,
        "y": 1560,
        "wires": [
            [
                "6fba1d154dcb4ee9"
            ]
        ]
    },
    {
        "id": "729f90d525f87fd2",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "19a5be4e42605f8a",
        "name": "function 335",
        "func": "const config = flow.get(\"config\");\nconst guilt = msg.payload[config.machine_name]\nlet name_var_global = \"plc\" + config.machine_name\n\n\n\nif (guilt) {\n    node.warn(\"my warning\");\n    //atualiza a hora da parada com a hora que a enchedora (gargalo) parou\n    let parada = flow.get(\"parada\");\n    const parada_linha = JSON.parse(JSON.stringify(parada))\n    parada_linha.hora = new Date().getTime()\n    parada_linha.machine_id = config.machine_id\n    parada_linha.machine_name = config.machine_name\n    parada_linha.active = true\n    global.set(\"parada_linha\", parada_linha)\n    return msg;\n\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1560,
        "wires": [
            [
                "36323858272e53b5"
            ]
        ]
    },
    {
        "id": "6fba1d154dcb4ee9",
        "type": "delay",
        "z": "8149f2bb97277fa5",
        "g": "19a5be4e42605f8a",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 230,
        "y": 1560,
        "wires": [
            [
                "729f90d525f87fd2"
            ]
        ]
    },
    {
        "id": "597b3eb836277812",
        "type": "link in",
        "z": "8149f2bb97277fa5",
        "g": "19a5be4e42605f8a",
        "name": "link in 28",
        "links": [
            "31d753b6c2f98a0f"
        ],
        "x": 105,
        "y": 1620,
        "wires": [
            [
                "8859322a3b58fd1e"
            ]
        ]
    },
    {
        "id": "8859322a3b58fd1e",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "19a5be4e42605f8a",
        "name": "function 336",
        "func": "let config = flow.get(\"config\");\nlet retorno = new Date()\nlet parada = global.get(\"parada_linha\");\n\nif (parada.machine_id == config.machine_id) {\n\n    let tParada = (retorno.getTime() - parada.hora) / 1000 / 60\n    //let paradasSoma = flow.get(\"paradasSoma\") || flow.set(\"paradasSoma\", { \"Prog\": 0, \"Nprog\": 0 })\n    let turno = global.get(\"turno_\" + config.factory)\n    let machine_event = {}\n\n    machine_event = {\n        \"timestamp(1i)\": retorno.getFullYear().toString(),\n        \"timestamp(2i)\": (retorno.getMonth() + 1).toString(),\n        \"timestamp(3i)\": retorno.getDate().toString(),\n        \"timestamp(4i)\": retorno.getHours().toString(),\n        \"timestamp(5i)\": retorno.getMinutes().toString(),\n        \"timestamp(6i)\": retorno.getSeconds().toString(),\n        \"event_type_id\": 4,\n        \"payload\": {\n            \"aux_id_falha\": parada.aux_id_falha,\n            \"InicioParada\": parada.hora,\n            \"FimParada\": new Date().getTime(),\n            \"tParada\": Number(tParada.toFixed(2)),\n            \"ID\": isNaN(Number(parada.statechanged_id)) ? 0 : Number(parada.statechanged_id), // Garantir que ID seja um número\n            \"Reason\": parada.statechanged_reason,\n            \"ModeReason\": parada.mode,\n            \"StateReason\": parada.state || 0,\n            \"Programada\": parada.programada,\n            \"turno_atual\": turno.turno,\n            \"equip\": config.machine_name,\n            \"machine_id\": config.machine_id,\n            \"guilt\": false\n        }\n    }\n\n    parada.active = false\n    msg.payload.machine_event = machine_event\n\n\n\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 1620,
        "wires": [
            [
                "93d311b5a8147e76"
            ]
        ]
    },
    {
        "id": "336509538719a5c3",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "19a5be4e42605f8a",
        "name": "debug 716",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1620,
        "wires": []
    },
    {
        "id": "93d311b5a8147e76",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "19a5be4e42605f8a",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n\n    //msg.payload.machine_event.payload.ID = 999;\n\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1620,
        "wires": [
            [
                "d80e68d50cd91f97"
            ]
        ]
    },
    {
        "id": "36323858272e53b5",
        "type": "debug",
        "z": "8149f2bb97277fa5",
        "g": "19a5be4e42605f8a",
        "name": "debug 717",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 1560,
        "wires": []
    },
    {
        "id": "68b4474febf08f34",
        "type": "function",
        "z": "8149f2bb97277fa5",
        "g": "19a5be4e42605f8a",
        "name": "Update tempo parada linha",
        "func": "let parada_linha = global.get(\"parada_linha\");\n\nif (parada_linha.active) {\n    let retorno = new Date()\n    \n    let tParada = (retorno.getTime() - parada_linha.hora) / 1000 / 60\n    parada_linha.tParadaAtual = tParada\n\n\n\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "d80e68d50cd91f97",
        "type": "http request",
        "z": "8149f2bb97277fa5",
        "g": "19a5be4e42605f8a",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 600,
        "y": 1620,
        "wires": [
            [
                "336509538719a5c3"
            ]
        ]
    },
    {
        "id": "6b0f017fa48f26df",
        "type": "inject",
        "z": "68278b12c5824bc7",
        "g": "94a6e38106e0a8e3",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "d224ab4ca4f54c73"
            ]
        ]
    },
    {
        "id": "d224ab4ca4f54c73",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "94a6e38106e0a8e3",
        "name": "CONFIG",
        "func": "//configuracaao de linha\n\nlet config = {}\n\nconfig.machine_name = \"emf\"\n\nconfig.factory = 1\nconfig.machine_id = 4\nconfig.token_machine = \"Bearer \" + \"e8da66d141d4b88ffef470f68db0bb2cac73ae56\"\nconfig.token_line = \"Bearer \" + \"00bc757a398cc98d299fd6fc2119929c48647db9\"\nconfig.url = \"http://127.0.0.1:3003\"\nconfig.url_machine = config.url + \"/machine_events\"\nconfig.url_line = config.url + \"/production_line_events\"\nconfig.send = true /// habilita POST\n\nflow.set(\"config\", config);\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 100,
        "wires": [
            [
                "6d810a236b345cf7"
            ]
        ]
    },
    {
        "id": "6d810a236b345cf7",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "g": "94a6e38106e0a8e3",
        "name": "debug 597",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 100,
        "wires": []
    },
    {
        "id": "86434124ad326de0",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "name": "debug 629",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 2520,
        "wires": []
    },
    {
        "id": "ffbb4c5d7c5fb705",
        "type": "link in",
        "z": "68278b12c5824bc7",
        "name": "link in 9",
        "links": [
            "75c8b4f71351df9f",
            "38cccc59ebd5094f"
        ],
        "x": 435,
        "y": 2640,
        "wires": [
            [
                "9be64fbde9c860b2"
            ]
        ]
    },
    {
        "id": "16f692182b8c2f08",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "e8fdd317acd55e27",
        "name": "Turnos, Tempos Acumulados",
        "func": "\nlet msg1 = new Object()\nlet msg2 = new Object()\nlet msg3 = new Object()\nlet config = flow.get(\"config\");\nlet a\n\n\n\nlet turno = global.get(\"turno_\" + config.factory)\nlet memo_turno = flow.get(\"memo_turno\") || 0\n\n\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\n\nlet sm_atual = {\n    \"state\": dadosPlc.state || 2,\n    \"mode\": dadosPlc.mode || 2\n}\nflow.set(\"sm_atual\", sm_atual);\nlet sm_anterior = flow.get(\"sm_anterior\") || flow.set(\"sm_anterior\", sm_atual)\n\n\nlet tempoTranscorrido\nif (memo_turno == turno.turno) { //&& turno.turno != 0\n    a = 1\n\n\n    flow.set(\"tempoTranscorrido\", turno.tempoTranscorrido);\n    tempoTranscorrido = turno.tempoTranscorrido\n\n    calculosOEE()\n\n} else {\n\n    a = 2\n\n    tempoTranscorrido = flow.get(\"tempoTranscorrido\") || 0\n\n}\n\n\n\nlet parada = flow.get(\"parada\") || { \"hora\": 0, \"state\": \"0\", \"mode\": \"0\", \"active\": false, \"tParadaAtual\": 0 }\n\n\n\n// Atualiza o tempo da parada atual\nif ((sm_atual.state != 6 || sm_atual.mode != 2) && turno.turno != 0) {\n    let agora = new Date().getTime()\n    let tParadaAtual = agora - parada.hora\n    parada.tParadaAtual = tParadaAtual / 60 / 1000\n    flow.set(\"parada\", parada);\n    global.set(\"parada\" + name_var_global, parada);\n}\n\n\n\n\n// Aciona saida indicando que houve mudanca do modo de operacao\nif (sm_atual.mode != sm_anterior.mode || sm_atual.state != sm_anterior.state) {\n    //Verifica se a maquina saiu do estado Execute\n    //Sempre que a maquina sair de execute devemos anotar o horario da parada\n    if ((sm_anterior.state == 6 && sm_anterior.mode == 2) && (sm_atual.state != sm_anterior.state || sm_atual.mode != sm_anterior.mode)) {\n        console.log(\"NÃO PRODUZINDO\")\n        anotaInicioParada()\n        msg2 = null\n    } else if ((sm_anterior.state != 6 || sm_anterior.mode != 2) && (sm_atual.state == 6 && sm_atual.mode == 2)) {\n        console.log(\"PRODUZINDO\")\n        msg2.payload = consolidaParada()\n        calculosOEE()\n        flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n    }\n    flow.set(\"sm_anterior\", sm_atual)\n\n\n    return [null, msg2]\n}\n\n\n\n\n\n/// rotinas que devem ser executadas na troca de turno\nif (memo_turno != turno.turno) {\n    msg1 = null\n    msg2 = null\n\n    console.log(\"TrocaTurno\")\n    node.warn(\"TrocaTurno\")\n\n    if (memo_turno != 0) {\n        console.log(\"Fim turno \" + memo_turno)\n        msg1 = { payload: 1 }\n\n        if (parada.active == true) { // se no fim do turno estiver em parada consolida\n            msg2 = {}\n            msg2.payload = {}\n            msg2.payload = consolidaParada()\n\n            calculosOEE()\n\n            flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n            if (turno.turno != 0) { // se entrar em um novo turno reinicia a parada\n                console.log(\"Inicio turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n                anotaInicioParada()\n\n            }\n        } else {\n            if (turno.turno != 0) {\n                console.log(\"Iniccio Turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n            }\n        }\n\n\n        calculosOEE()\n        let calculoOEE = flow.get(\"calculoOEE\");\n        flow.set(\"fimTurnoOEE\", calculoOEE);\n        flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n\n\n\n    } else if (memo_turno == 0) {\n        msg1 = null\n        console.log(\"verificaAnotacaoTurno\") // verifica e cria msg2 se necssario e zera anotacao de parada\n\n        verificaAnotacaoInicioTurno()\n\n    } else {\n\n        msg1 = null\n    }\n\n    //anota registro de turno\n\n\n\n    flow.set(\"memo_turno\", turno.turno)\n\n    return [msg1, msg2]\n}\nmsg3.payload = calculosOEE()\nmsg3.payload.machine_event.event_type_id = 6\nreturn [null, null, msg3]\n\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n\nfunction anotaInicioParada() {\n\n    console.log(\"inicio parada\")\n    node.warn(name_var_global);\n\n    let iParada = global.get(name_var_global);\n    let parada = {\n        \"hora\": new Date(),\n        \"state\": sm_atual.state || 0,\n        \"mode\": sm_atual.mode\n    }\n    flow.set(\"parada\", {\n        \"aux_id_falha\": Number(dadosPlc.aux_id_falha),\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true,\n        \"statechanged_id\": iParada.statechanged_id,\n        \"statechanged_reason\": iParada.statechanged_reason,\n        \"programada\": new Boolean(iParada.programada),\n        \"justifica\": false\n\n    });\n    global.set(\"parada\" + name_var_global, {\n        \"aux_id_falha\": Number(dadosPlc.aux_id_falha),\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true,\n        \"statechanged_id\": iParada.statechanged_id,\n        \"statechanged_reason\": iParada.statechanged_reason,\n        \"programada\": new Boolean(iParada.programada),\n        \"justifica\": false,\n        \"machine_id\": config.machine_id,\n        \"Equip\": config.machine_name\n\n    });\n    //console.clear()\n    //console.log(\"Inicio da Parada:\" + parada.hora.getHours() + \":\" + parada.hora.getMinutes())\n    return {\n        \"InicioParada\": parada.hora.getTime(),\n        \"FimParada\": 0,\n        \"tParada\": 0,\n        \"ID\": \"ID\",\n        \"Reason\": null,\n        \"ModeReason\": new Number(parada.mode),\n        \"StateReason\": new Number(parada.state) || 0,\n        \"Programada\": null,\n        \"Equip\": name_var_global\n    }\n}\n\nfunction consolidaParada() {\n    //////////////////////////////////////////////////////////////////////\n    //GAMBIA PARA ATRASAR O REGISTRO//////////////////////////////////////\n    //////////////////////////////////////////////////////////////////////\n\n    flow.set(\"ignora_registro_linha\", 20);\n    flow.set(\"ignora_registro_maquina\", 20);\n\n    ////fim da gambia///////////////////////////////////////////////////\n\n\n    console.log(\"fim parada\")\n    let retorno = new Date()\n    let parada = flow.get(\"parada\") || 0\n    let tParada = (retorno.getTime() - parada.hora) / 1000 / 60\n    let paradasSoma = flow.get(\"paradasSoma\") || flow.set(\"paradasSoma\", { \"Prog\": 0, \"Nprog\": 0 })\n\n    if (dadosPlc.programada == \"true\") {\n        paradasSoma.Prog = paradasSoma.Prog + tParada\n    } else {\n        paradasSoma.Nprog = paradasSoma.Nprog + tParada\n    }\n    flow.set(\"paradasSoma\", paradasSoma);\n    parada.active = false\n    flow.set(\"parada\", parada);\n    global.set(\"parada\" + name_var_global, parada);\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    return {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 8,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": {\n                \"aux_id_falha\": parada.aux_id_falha,\n                \"InicioParada\": parada.hora,\n                \"FimParada\": retorno.getTime(),\n                \"tParada\": Number(tParada.toFixed(2)),\n                \"ID\": isNaN(Number(parada.statechanged_id)) ? 0 : Number(parada.statechanged_id), // Garantir que ID seja um número\n                \"Reason\": parada.statechanged_reason,\n                \"ModeReason\": parada.mode,\n                \"StateReason\": parada.state || 0,\n                \"Programada\": parada.programada,\n                \"turno_atual\": turno.turno,\n                \"equip\": config.machine_name,\n                \"machine_id\": config.machine_id\n            }\n        }\n    }\n}\n\nfunction calculosOEE() {\n\n\n    //msg.filename = \".\\supZIA\\registroTurno_\" + name_var_global + \".json\"\n\n    var sumProg_NProgr = flow.get(\"sumProg_NProgr\") || [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }];\n\n    let dados_oee = {}\n    let tNProg = Number(sumProg_NProgr[0].soma_nao_programada)\n    let tProg = Number(sumProg_NProgr[0].soma_programada)\n    let tProducao = Number(tempoTranscorrido - (tProg + tNProg))\n\n    node.status({ fill: \"red\", shape: \"ring\", text: dados_oee.percDisp });\n\n    if (dadosPlc.mode == 2 && dadosPlc.state == 6) {\n        dados_oee.statusMachine = \"Rodando\"\n    } else dados_oee.statusMachine = \"Parada\"\n\n    ////////////\n    dados_oee.statusConexao = true\n    dados_oee.mode = Number(dadosPlc.mode)\n    dados_oee.state = Number(dadosPlc.state) || 0\n    dados_oee.rNominalSpeed = Number(dadosPlc.rNominalSpeed)\n    dados_oee.rSetSpeed = Number(dadosPlc.rSetSpeed)\n    dados_oee.rActualSpeed = Number(dadosPlc.rActualSpeed)\n    dados_oee.strRecipeName = String(dadosPlc.strRecipeName)\n    dados_oee.strBottle = String(dadosPlc.strBottle)\n    dados_oee.strCap = String(dadosPlc.strCap)\n    dados_oee.diProductionCounter = Number(dadosPlc.diProductionCounter)\n    dados_oee.diCounterReject_r1 = Number(dadosPlc.diCounterReject_r1)\n    dados_oee.diCounterReject_r2 = Number(dadosPlc.diCounterReject_r2)\n    dados_oee.iActualRecipe = Number(dadosPlc.iActualRecipe)\n    dados_oee.tempoTranscorrido = Number(tempoTranscorrido.toFixed(2))\n    dados_oee.percDisp = (tProducao) / (tempoTranscorrido - tProg) * 100\n\n    var teste = {\n        tProducao: tProducao,\n        tempoTranscorrido: tempoTranscorrido,\n        tProg: tProg,\n        tNProg: tNProg,\n\n\n\n    }\n    dados_oee.teste = teste;\n\n    node.status({ fill: \"red\", shape: \"ring\", text: JSON.stringify(teste) });\n\n    dados_oee.percDisp = Number(dados_oee.percDisp.toFixed(2))\n    dados_oee.percEfic = (dados_oee.diProductionCounter) / ((tProducao * dados_oee.rNominalSpeed) / 60) * 100\n    dados_oee.percEfic = Number(dados_oee.percEfic.toFixed(2))\n    dados_oee.percQual = (((dados_oee.diProductionCounter) - (dados_oee.diCounterReject_r1 + dados_oee.diCounterReject_r2)) / dados_oee.diProductionCounter) * 100\n    dados_oee.percQual = isNaN(Number(dados_oee.percQual)) ? 0 : Number(Number(dados_oee.percQual).toFixed(2));\n    dados_oee.percOEE = dados_oee.percDisp * dados_oee.percEfic * dados_oee.percQual / 10000\n    dados_oee.percOEE = Number(dados_oee.percOEE.toFixed(2))\n    dados_oee.turno = Number(turno.turno)\n    dados_oee.tempoParadaProgramada = Number(tProg.toFixed(2))\n    dados_oee.tempoParadaNaoProgramada = Number(tNProg.toFixed(2))\n    dados_oee.dimetaProduzidos = 100000\n    dados_oee.rmetaPerf = 95.00\n    dados_oee.rmetaDisp = 90.00\n    dados_oee.rmetaQual = 99.00\n    dados_oee.rmetaOEE = 90.00\n    dados_oee.equip = String(config.machine_name)\n\n    ////teste limites - ocorre quando o node é desligado\n    if (dados_oee.percDisp < 0) {\n        dados_oee.percDisp = 0\n    } else if (dados_oee.percDisp > 100) {\n        dados_oee.percDisp = 100\n    }\n\n    if (dados_oee.percEfic < 0) {\n        dados_oee.percEfic = 0\n    } else if (dados_oee.percEfic > 100) {\n        dados_oee.percEfic = 100\n    }\n\n    if (dados_oee.percQual < 0) {\n        dados_oee.percQual = 0\n    } else if (dados_oee.percQual > 100) {\n        dados_oee.percQual = 100\n    }\n\n    if (dados_oee.percOEE < 0) {\n        dados_oee.percOEE = 0\n    } else if (dados_oee.percOEE > 100) {\n        dados_oee.percOEE = 100\n    }\n\n\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    let calculo = {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 3,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": dados_oee\n        }\n    }\n\n    flow.set(\"calculoOEE\", calculo);\n\n\n    return calculo\n\n\n\n}\n\nfunction verificaAnotacao() {\n\n}\n\n\nfunction verificaAnotacaoInicioTurno() {\n    console.log(\"Inicio Turno \" + turno.turno)\n    ////Zera os valores para iniciar novo turno\n    flow.set(\"sumProg_NProgr\", [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }]);\n    if (sm_atual.state == 6 && sm_atual.mode == 2) {\n        //PRODUZINDO\n    } else {\n        //NAO PRODUZINDO\n        anotaInicioParada()\n        msg2 = null\n    }\n\n\n\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1000,
        "wires": [
            [
                "f877a8ac960b371a"
            ],
            [
                "3c545d70e874c4b0"
            ],
            [
                "43a3187a49057982",
                "f0f4587f06adfbba"
            ]
        ]
    },
    {
        "id": "2548135d9ef9020a",
        "type": "inject",
        "z": "68278b12c5824bc7",
        "g": "e8fdd317acd55e27",
        "name": "cycle",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 1080,
        "wires": [
            [
                "16f692182b8c2f08",
                "631d5f90bda29715",
                "6d31f928d583617c"
            ]
        ]
    },
    {
        "id": "f877a8ac960b371a",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "f9aa50c745e2f4e2",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 840,
        "wires": [
            [
                "a163151c55ec1c15"
            ]
        ]
    },
    {
        "id": "35a4f72d0afa9578",
        "type": "comment",
        "z": "68278b12c5824bc7",
        "g": "f9aa50c745e2f4e2",
        "name": "Registro Troca de Turno",
        "info": "",
        "x": 1160,
        "y": 740,
        "wires": []
    },
    {
        "id": "d8e9183cf3e16249",
        "type": "http request",
        "z": "68278b12c5824bc7",
        "g": "f9aa50c745e2f4e2",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "",
                "valueType": "other",
                "valueValue": ""
            }
        ],
        "x": 1850,
        "y": 840,
        "wires": [
            [
                "d489ca115d3f6ff5"
            ]
        ]
    },
    {
        "id": "d489ca115d3f6ff5",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "g": "f9aa50c745e2f4e2",
        "name": "debug 635",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2070,
        "y": 840,
        "wires": []
    },
    {
        "id": "e5ecfb095b2d8dfc",
        "type": "comment",
        "z": "68278b12c5824bc7",
        "g": "f9aa50c745e2f4e2",
        "name": "Turno + Tempo Transcorrido",
        "info": "",
        "x": 1180,
        "y": 900,
        "wires": []
    },
    {
        "id": "a163151c55ec1c15",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "f9aa50c745e2f4e2",
        "name": "Get fimTurnoOEE",
        "func": "msg.payload = flow.get(\"fimTurnoOEE\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 840,
        "wires": [
            [
                "08da07a02b0cf5b8",
                "f340bf8561fe993d"
            ]
        ]
    },
    {
        "id": "08da07a02b0cf5b8",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "f9aa50c745e2f4e2",
        "name": "statusMachineId",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.machine_event.payload.statusMachineId = 2\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.machine_event.payload.statusMachineId = 2\n            break;\n        case 5:\n            msg.payload.machine_event.payload.statusMachineId = 5\n            break;\n        case 6:\n            msg.payload.machine_event.payload.statusMachineId = 1\n            break;\n        case 9:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 840,
        "wires": [
            [
                "d8e9183cf3e16249"
            ]
        ]
    },
    {
        "id": "1ccacca01cec23fa",
        "type": "eth-ip out",
        "z": "68278b12c5824bc7",
        "g": "f9aa50c745e2f4e2",
        "endpoint": "f56ab6388d9b4cdf",
        "variable": "xResetCounter",
        "program": "",
        "name": "",
        "x": 2380,
        "y": 920,
        "wires": []
    },
    {
        "id": "807b93776c1fc555",
        "type": "comment",
        "z": "68278b12c5824bc7",
        "g": "f9aa50c745e2f4e2",
        "name": "Reset Counters",
        "info": "",
        "x": 1340,
        "y": 1040,
        "wires": []
    },
    {
        "id": "d9b28d2f5168a6a7",
        "type": "inject",
        "z": "68278b12c5824bc7",
        "g": "f9aa50c745e2f4e2",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1170,
        "y": 980,
        "wires": [
            [
                "c00bd37644199494"
            ]
        ]
    },
    {
        "id": "c00bd37644199494",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "f9aa50c745e2f4e2",
        "name": "function 299",
        "func": "const cmdResetAtivo = flow.get(\"cmdResetAtivo\");\nif (cmdResetAtivo) {\n    return msg\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 980,
        "wires": [
            [
                "f340bf8561fe993d"
            ]
        ]
    },
    {
        "id": "423bf46b815ea958",
        "type": "function",
        "z": "68278b12c5824bc7",
        "d": true,
        "g": "f9aa50c745e2f4e2",
        "name": "function 300",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nnode.warn(dadosPlc.diProductionCounter);\n\nif (dadosPlc.diProductionCounter!='0') {\n    return msg\n}\n\nlet cmdResetAtivo = flow.get(\"cmdResetAtivo\");\ncmdResetAtivo = false\nflow.set(\"cmdResetAtivo\", cmdResetAtivo);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 1020,
        "wires": [
            [
                "f340bf8561fe993d",
                "4cfe82190299d2cd"
            ]
        ]
    },
    {
        "id": "f340bf8561fe993d",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "f9aa50c745e2f4e2",
        "name": "set reset Counters",
        "func": "let cmdResetAtivo = true\nflow.set(\"cmdResetAtivo\", cmdResetAtivo);\n\nmsg.payload ={}\nmsg.payload.xResetCounter = 0\nmsg.payload.xResetReject_r1 = 0\nmsg.payload.xResetReject_r2 = 0\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 920,
        "wires": [
            [
                "423bf46b815ea958",
                "9954f0d6b5b400f5",
                "178a788d6a7c7787"
            ]
        ]
    },
    {
        "id": "4cfe82190299d2cd",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "g": "f9aa50c745e2f4e2",
        "name": "debug 636",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 1040,
        "wires": []
    },
    {
        "id": "43a3187a49057982",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "f34984f444c5cc66",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1520,
        "wires": [
            [
                "53de667c9b12c39a",
                "1f4e209b4fc89b69"
            ]
        ]
    },
    {
        "id": "270ecf6f6f38dcee",
        "type": "http request",
        "z": "68278b12c5824bc7",
        "g": "f34984f444c5cc66",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2030,
        "y": 1540,
        "wires": [
            [
                "b6539cbaad910663"
            ]
        ]
    },
    {
        "id": "b6539cbaad910663",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "g": "f34984f444c5cc66",
        "name": "debug 637",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2250,
        "y": 1540,
        "wires": []
    },
    {
        "id": "53de667c9b12c39a",
        "type": "delay",
        "z": "68278b12c5824bc7",
        "g": "f34984f444c5cc66",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "120",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1520,
        "y": 1500,
        "wires": [
            [
                "e35e8cc0fa707bef"
            ]
        ]
    },
    {
        "id": "e35e8cc0fa707bef",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "f34984f444c5cc66",
        "name": "statusMachineId",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.machine_event.payload.statusMachineId = 3\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        case 5:\n            msg.payload.machine_event.payload.statusMachineId = 5\n            break;\n        case 6:\n            msg.payload.machine_event.payload.statusMachineId = 1\n            break;\n        case 9:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 1540,
        "wires": [
            [
                "270ecf6f6f38dcee"
            ]
        ]
    },
    {
        "id": "1f4e209b4fc89b69",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "f34984f444c5cc66",
        "name": "imediato na troca de estado - com filtro****",
        "func": "let ignora_registro_maquina = flow.get(\"ignora_registro_maquina\");\n\nif (ignora_registro_maquina == 0) {\n\n\n    let ant_mode = context.get(\"ant_mode\") || 0;\n    let ant_state = context.get(\"ant_state\") || 0;\n    let config = flow.get(\"config\");\n    let name_var_global = \"plc\" + config.machine_name\n    let dadosPlc = global.get(name_var_global)\n    let mode = dadosPlc.mode\n    let state = dadosPlc.state\n\n    if (ant_mode != mode || ant_state != state) {\n        context.set(\"ant_mode\", mode);\n        context.set(\"ant_state\", state);\n        return msg\n    }\n\n\n} else {\n\n    ignora_registro_maquina = ignora_registro_maquina - 1\n    flow.set(\"ignora_registro_maquina\", ignora_registro_maquina);\n\n}\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1580,
        "wires": [
            [
                "e35e8cc0fa707bef"
            ]
        ]
    },
    {
        "id": "835622bcd1d10ea4",
        "type": "comment",
        "z": "68278b12c5824bc7",
        "g": "6d2667296f699c9e",
        "name": "Registro Fim da Parada de Linha",
        "info": "",
        "x": 1230,
        "y": 1440,
        "wires": []
    },
    {
        "id": "b705b0ddf17f4957",
        "type": "http request",
        "z": "68278b12c5824bc7",
        "g": "6d2667296f699c9e",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1870,
        "y": 1280,
        "wires": [
            [
                "c6ffefb8ff5d8039"
            ]
        ]
    },
    {
        "id": "c6ffefb8ff5d8039",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "g": "6d2667296f699c9e",
        "name": "debug 638",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2170,
        "y": 1300,
        "wires": []
    },
    {
        "id": "3c545d70e874c4b0",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "6d2667296f699c9e",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n\n    //msg.payload.machine_event.payload.ID = 999;\n\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 1300,
        "wires": [
            [
                "8fbf6e3f996cb56d"
            ]
        ]
    },
    {
        "id": "8fbf6e3f996cb56d",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "6d2667296f699c9e",
        "name": "function 301",
        "func": "\nif (msg.payload != null) {\n\n    if (msg.payload.machine_event.payload.ID != 8888) {\n        return [msg, msg]\n    } else return [msg, msg];\n\n\n\n\n} else {\n\n    node.warn(\"Mudanca de estado sem registro\");\n\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 1300,
        "wires": [
            [
                "b705b0ddf17f4957"
            ],
            [
                "6ade6032d24be49f"
            ]
        ]
    },
    {
        "id": "2abe0deeadb304c7",
        "type": "postgresql",
        "z": "68278b12c5824bc7",
        "g": "6d2667296f699c9e",
        "name": "",
        "query": "INSERT INTO public.appoint\n(payload)\nVALUES('{{{msg.payload}}}');",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1930,
        "y": 1360,
        "wires": [
            [
                "2f0c21f50c0eaf04"
            ]
        ]
    },
    {
        "id": "2f0c21f50c0eaf04",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "g": "6d2667296f699c9e",
        "name": "debug 639",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 1360,
        "wires": []
    },
    {
        "id": "6ade6032d24be49f",
        "type": "json",
        "z": "68278b12c5824bc7",
        "g": "6d2667296f699c9e",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1750,
        "y": 1360,
        "wires": [
            [
                "2abe0deeadb304c7"
            ]
        ]
    },
    {
        "id": "dc9e9bf624b17ff2",
        "type": "link in",
        "z": "68278b12c5824bc7",
        "g": "6d2667296f699c9e",
        "name": "apontamento maquina",
        "links": [
            "10af0ee323e03a03"
        ],
        "x": 1075,
        "y": 1400,
        "wires": [
            [
                "fb557ce603f574a6"
            ]
        ]
    },
    {
        "id": "c21140f166bbd620",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "g": "6d2667296f699c9e",
        "name": "debug 640",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 1400,
        "wires": []
    },
    {
        "id": "fb557ce603f574a6",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "6d2667296f699c9e",
        "name": "Atualiza Parada - Apontamento",
        "func": "const config = flow.get(\"config\");\n\nlet parada = flow.get(\"parada\");\n\nparada.statechanged_id = msg.payload.newStopReason[1]\nparada.statechanged_reason = msg.payload.newStopReason[0]\nparada.programada = msg.payload.newStopReason[2]\nparada.justifica = true\n\n\nflow.set(\"parada\", parada);\nglobal.set(\"parada\" + config.machine_name, parada);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1400,
        "wires": [
            [
                "c21140f166bbd620"
            ]
        ]
    },
    {
        "id": "848928f92c638e48",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "g": "cd50696818449a4f",
        "name": "debug 641",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1220,
        "wires": []
    },
    {
        "id": "631d5f90bda29715",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "cd50696818449a4f",
        "name": "Calc Actual Stop",
        "func": "const lastState = flow.get(\"lastState\");\n\nconst lastTime = new Date(lastState[0].timestamp);\nconst currentTime = new Date();\n\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  AJUSTE DE TEMPO xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//const timezoneOffset = currentTime.getTimezoneOffset();\nconst timezoneOffset = 0\n\n\n\nlastTime.setHours(lastTime.getHours() - timezoneOffset / 60);\n\nnode.status({ fill: \"red\", shape: \"ring\", text: lastState[1] });\n\n\n\n\n// Converte para segundos\nconst lastTimeInSeconds = Math.floor(lastTime.getTime() / 1000);\nconst currentTimeInSeconds = Math.floor(currentTime.getTime() / 1000);\n\nconst timeDifference = (currentTimeInSeconds - lastTimeInSeconds) / 60;\n\nmsg.payload = {}\n\nmsg.payload.actualDuration = lastState[1] = timeDifference\nmsg.payload.actualState = lastState[0].payload.machine_event.payload.state\nmsg.payload.actualMode = lastState[0].payload.machine_event.payload.mode\n\n\nconst tempoTranscorrido = flow.get(\"tempoTranscorrido\");\n\nif (lastState[1] > tempoTranscorrido) {\n    lastState[1] = tempoTranscorrido\n\n}\nflow.set(\"lastState\", lastState);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar sumProg_NProgr_parcial = flow.get(\"sumProg_NProgr_parcial\") || [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }];\nlet parada = flow.get(\"parada\");\nif (!isNaN(parada.tParadaAtual)) {\n    //node.warn(parada.active);\n    \n    var calcSumProg_NProgr = JSON.parse(JSON.stringify(sumProg_NProgr_parcial))\n    if (parada.active) {\n\n        if (parada.programada == 'true') {\n            //node.warn(\"Programada\");\n            calcSumProg_NProgr[0].soma_programada = Number(sumProg_NProgr_parcial[0].soma_programada) + Number(parada.tParadaAtual)\n            calcSumProg_NProgr[0].soma_nao_programada = Number(sumProg_NProgr_parcial[0].soma_nao_programada)\n\n            //node.warn(sumProg_NProgr[0].soma_programada);\n        } else {\n            \n            //node.warn(\"Nao Programada\");\n            //node.warn(Number(sumProg_NProgr_parcial[0].soma_nao_programada));\n            //node.warn(Number(parada.tParadaAtual));\n            calcSumProg_NProgr[0].soma_programada = Number(sumProg_NProgr_parcial[0].soma_programada)\n            calcSumProg_NProgr[0].soma_nao_programada = Number(sumProg_NProgr_parcial[0].soma_nao_programada) + Number(parada.tParadaAtual)\n            //node.warn(sumProg_NProgr[0].soma_nao_programada);\n        }\n    } else {\n        calcSumProg_NProgr = sumProg_NProgr_parcial\n\n    }\n} else {\n    calcSumProg_NProgr = sumProg_NProgr_parcial\n    \n}\n\nflow.set(\"sumProg_NProgr\", calcSumProg_NProgr) || [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1220,
        "wires": [
            [
                "848928f92c638e48"
            ]
        ]
    },
    {
        "id": "f0f4587f06adfbba",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "monitor troca de estado",
        "func": "let config = flow.get(\"config\");\n//msg.config = config\n\n\n\nlet sm_atual = flow.get(\"sm_atual\");\nlet sm_anterior = flow.get(\"sm_anterior_iot\") || { mode: \"0\", state: \"0\" };\n\nif ((sm_atual.mode != sm_anterior.mode) || (sm_atual.state != sm_anterior.state)) {\n\n    //node.warn(\"mudou\");\n    flow.set(\"sm_anterior_iot\", sm_atual);\n\n    msg.machine_id = config.machine_id\n\n    return msg;\n\n\n\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1860,
        "wires": [
            [
                "3faae4bb1b49b5aa"
            ]
        ]
    },
    {
        "id": "3faae4bb1b49b5aa",
        "type": "json",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1390,
        "y": 1860,
        "wires": [
            [
                "288501a6509434bd"
            ]
        ]
    },
    {
        "id": "5da7cda6f7d54716",
        "type": "inject",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "60 segundos",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1540,
        "y": 1780,
        "wires": [
            [
                "c8c0486aa8de5c92"
            ]
        ]
    },
    {
        "id": "c8c0486aa8de5c92",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "consulta turno e ajsute de filtro",
        "func": "const config = flow.get(\"config\");\nmsg.machine_id = config.machine_id\n// Recupera a lista de horários de turnos a partir de uma variável global e o índice do turno desejado da variável de fluxo.\nlet horarios_turnos = global.get(\"turnos_times\");\nlet turno = flow.get(\"memo_turno\");\n\n// Faz uma cópia da lista de horários para evitar modificar o valor original na variável global.\nlet turnos_times = JSON.parse(JSON.stringify(horarios_turnos));\n\n// Obtém a data e hora atuais.\nconst today = new Date();\n// Define o início do dia (00:00:00) para a data atual. Essa data será usada para calcular o tempo em segundos desde a meia-noite.\nconst startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n// Converte o início do dia em formato epoch (segundos desde 1 de janeiro de 1970).\nconst epochTime = Math.floor(startOfDay.getTime() / 1000);\n\n\n\n\n\n// Define o ajuste de fuso horário em segundos. Neste caso, são 10800 segundos (ou 3 horas).\nconst timezoneOffset = -7200; // 2 horas em segundos\n\n// Define a quantidade de segundos em um dia, para lidar com turnos que ultrapassam a meia-noite.\nconst secondsInDay = 86400; // 24 horas em segundos\n\n// Itera sobre cada turno para calcular e ajustar os horários de início e fim.\nfor (let index = 0; index < turnos_times.length; index++) {\n    // Remove propriedades desnecessárias de cada turno para simplificar os dados.\n    delete turnos_times[index].created_at;\n    delete turnos_times[index].updated_at;\n    delete turnos_times[index].id;\n\n    // Extrai a parte do horário de início do turno (no formato 'HH:MM:SS') para conversão em segundos.\n    const [hours_s, minutes_s, seconds_s] = turnos_times[index].start_time.substring(11, 19).split(':').map(Number);\n    // Converte o horário de início em segundos: (horas * 3600) + (minutos * 60) + segundos.\n    const totalSecondsStart = hours_s * 3600 + minutes_s * 60 + seconds_s;\n\n    // Extrai a parte do horário de fim do turno (também no formato 'HH:MM:SS') para conversão em segundos.\n    const [hours_e, minutes_e, seconds_e] = turnos_times[index].end_time.substring(11, 19).split(':').map(Number);\n    // Converte o horário de fim em segundos: (horas * 3600) + (minutos * 60) + segundos.\n    const totalSecondsEnd = hours_e * 3600 + minutes_e * 60 + seconds_e;\n\n    // Calcula o horário de início absoluto do turno, somando o epoch do dia, o horário de início em segundos e o ajuste de fuso horário.\n    let start_time = new Date((epochTime + totalSecondsStart + timezoneOffset) * 1000);\n    // Calcula o horário de fim absoluto do turno da mesma forma.\n    let end_time = new Date((epochTime + totalSecondsEnd + timezoneOffset) * 1000);\n\n    // Verifica se o horário de início é maior que o horário de fim, indicando que o turno ultrapassa a meia-noite.\n    if (start_time > end_time) {\n        // Ajusta o horário de fim, somando um dia (em segundos) para representar corretamente um turno que termina no dia seguinte.\n        end_time = new Date((epochTime + totalSecondsEnd + timezoneOffset + secondsInDay) * 1000);\n    }\n\n    // Converte os horários de início e fim ajustados para o formato ISO e atualiza no objeto do turno.\n    turnos_times[index].start_time = start_time.toISOString();\n    turnos_times[index].end_time = end_time.toISOString();\n}\n\n// Define a saída da mensagem como o turno específico desejado (indexado com base no número do turno menos 1).\nmsg.payload = turnos_times[turno - 1];\nmsg.machine_id = config.machine_id\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1860,
        "wires": [
            [
                "22ceb656f1f8d740",
                "7385aea507438bdf",
                "03dcd04c1b46bf41",
                "e7705aeb3b48efda",
                "0b0c7ad0b01de53f"
            ]
        ]
    },
    {
        "id": "0bf52cb0b53711ab",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "monta resumo de tempos",
        "func": "const data = msg.payload;\n\n// Converte para o formato desejado, agrupando por `mode` e `state`\nconst result = data.reduce((acc, { mode, state, total_active_duration }) => {\n  if (!acc[mode]) acc[mode] = {}; // Cria a entrada para o mode se não existir\n  acc[mode][state] = (acc[mode][state] || 0) + Number(parseFloat(total_active_duration)); // Soma o total_active_duration\n  return acc;\n}, {});\n\n// verifica se a soma de todos os estados esta consistente com o tempo de turno transcorrifo\nlet config = flow.get(\"config\");\nlet turno = global.get(\"turno_\" + config.factory)\n//node.warn(turno);\n\n\n\n\n// Inicializa `msg.payload` com o objeto `omac`\nmsg.payload = { omac: result };\n\n\n\n// verifica o estado atual e altera o omac\nlet lastState = flow.get(\"lastState\");\n\nif (lastState && lastState[0] && lastState[0].payload) {\n  const mode = lastState[0].payload.machine_event.payload.mode;\n  const state = lastState[0].payload.machine_event.payload.state;\n\n  // Verifica se mode e state existem em msg.payload.omac antes de somar\n  if (msg.payload.omac[mode] && msg.payload.omac[mode][state] !== undefined) {\n    msg.payload.omac[mode][state] =\n      Number(parseFloat(msg.payload.omac[mode][state])) + Number(parseFloat(lastState[1]));\n  }\n}\n\n\n\n\nlet totalProductive = 0;\nlet totalNonProductive = 0;\n\n// Calcula os totais produtivos e não produtivos\nObject.entries(result).forEach(([mode, states]) => {\n  Object.entries(states).forEach(([state, activeMinutes]) => {\n    const minutes = Number(parseFloat(activeMinutes));\n\n    if (state === \"6\" && mode === \"2\") {\n      totalProductive += minutes;\n    } else {\n      totalNonProductive += minutes;\n    }\n  });\n});\n\n\n\n// Armazena `msg.payload` no fluxo para acesso posterior\nflow.set(\"temposOEE_parcial\", msg.payload);\n\n\n\n// Adiciona os somatórios ao `msg.payload`\nmsg.payload.somas = {\n  totalProductive: totalProductive,\n  totalNonProductive: totalNonProductive\n};\n\n\n\n// Retorna `msg` atualizado\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2750,
        "y": 1860,
        "wires": [
            [
                "3e9e97f589c40768"
            ]
        ]
    },
    {
        "id": "c53241b9d2b701af",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "debug 642",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2990,
        "y": 1940,
        "wires": []
    },
    {
        "id": "0327c453d9c60bfc",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "consulta ultimo registro",
        "func": "msg.payload[0].payload = JSON.parse(msg.payload[0].payload)\nflow.set(\"lastState\", msg.payload);\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1920,
        "wires": [
            [
                "c53241b9d2b701af"
            ]
        ]
    },
    {
        "id": "d21fc64dd6eff661",
        "type": "inject",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2240,
        "y": 2060,
        "wires": [
            [
                "1080b6a8f47c1151"
            ]
        ]
    },
    {
        "id": "9c28a4bb59ffbf4d",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "debug 643",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 2060,
        "wires": []
    },
    {
        "id": "1080b6a8f47c1151",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "function 302",
        "func": "let horarios_turnos = global.get(\"turnos_times\");\nlet turno = flow.get(\"memo_turno\");\n\nlet turnos_times = JSON.stringify(horarios_turnos)\nturnos_times = JSON.parse(turnos_times);\n//node.warn(turnos_times);\n\nconst today = new Date();\nconst startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\nconst epochTime = Math.floor(startOfDay.getTime() / 1000); // Converte de milissegundos para segundos\n//node.warn(epochTime); // Exibe a data de hoje às 00:00 em epoch (segundos)\n\nfor (let index = 0; index < turnos_times.length; index++) {\n    delete turnos_times[index].created_at\n    delete turnos_times[index].updated_at\n    delete turnos_times[index].id\n\n    const timePart_start = turnos_times[index].start_time.substring(11, 19); // '06:00:00'\n    // Divide a hora, minuto e segundo\n    const [hours_s, minutes_s, seconds_s] = timePart_start.split(':').map(Number);\n    // Converte para segundos\n    const totalMinutes_start = ((hours_s * 3600) + (minutes_s * 60) + (seconds_s));\n\n\n    const timePart_end = turnos_times[index].end_time.substring(11, 19); // '06:00:00'\n    // Divide a hora, minuto e segundo\n    const [hours_e, minutes_e, seconds_e] = timePart_end.split(':').map(Number);\n    // Converte para segundos\n    const totalMinutes_end = ((hours_e * 3600) + (minutes_e * 60) + (seconds_e));\n\n    //node.warn(totalMinutes_start);\n    //node.warn(totalMinutes_end);\n\n    const start_time = new Date((epochTime + totalMinutes_start)*1000)\n    const end_time = new Date((epochTime + totalMinutes_end)*1000)\n\n  \n\n    turnos_times[index].start_time = start_time.toISOString()\n    turnos_times[index].end_time = end_time.toISOString()\n\n\n\n  \n\n}\n\nmsg.payload = turnos_times[turno-1]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 2060,
        "wires": [
            [
                "fb7177e6ee0754c5"
            ]
        ]
    },
    {
        "id": "3f6687fa34eafaa8",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "debug 644",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2990,
        "y": 2000,
        "wires": []
    },
    {
        "id": "3e9e97f589c40768",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "debug 645",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2990,
        "y": 1860,
        "wires": []
    },
    {
        "id": "288501a6509434bd",
        "type": "postgresql",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "",
        "query": "INSERT INTO public.machine_events\n(id_machine, payload)\nVALUES({{{msg.machine_id}}}, '{{{msg.payload}}}');",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1550,
        "y": 1860,
        "wires": [
            [
                "c8c0486aa8de5c92"
            ]
        ]
    },
    {
        "id": "22ceb656f1f8d740",
        "type": "postgresql",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n),\nfiltered_intervals AS (\n    SELECT \n        id_machine,\n        mode,\n        state,\n        \n        -- Calcula o início e o fim ajustados do evento, limitados pelo intervalo de filtro\n        GREATEST(timestamp at time zone 'UTC' at time zone 'GMT-3', '{{{msg.payload.start_time}}}'::timestamp) AS adjusted_start,\n        LEAST(next_timestamp at time zone 'UTC' at time zone 'GMT-3', '{{{msg.payload.end_time}}}'::timestamp) AS adjusted_end\n        \n    FROM \n        state_intervals\n    WHERE \n        next_timestamp at time zone 'UTC' at time zone 'GMT-3' > '{{{msg.payload.start_time}}}'::timestamp  -- start_filter\n        AND timestamp at time zone 'UTC' at time zone 'GMT-3' <'{{{msg.payload.end_time}}}'::timestamp     -- end_filter\n        AND id_machine = 4  -- substitua 1 pelo id_machine desejado\n)\nSELECT \n    id_machine,\n    mode,\n    state,\n    \n    -- Calcula o tempo ativo total ajustado dentro do intervalo\n    SUM(\n        CASE \n            WHEN adjusted_end > adjusted_start THEN \n                EXTRACT(EPOCH FROM (adjusted_end - adjusted_start)) / 60  -- Tempo em minutos\n            ELSE \n                0\n        END\n    ) AS total_active_duration\nFROM \n    filtered_intervals\nGROUP BY \n    id_machine,\n    mode,\n    state\nORDER BY \n    id_machine,\n    mode,\n    state;\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2230,
        "y": 1860,
        "wires": [
            [
                "78f55297f2908d5c"
            ]
        ]
    },
    {
        "id": "fb7177e6ee0754c5",
        "type": "postgresql",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n)\nSELECT \n    id,\n    timestamp,\n    id_machine,\n    payload,\n    mode,\n    state,\n    next_timestamp,\n    -- Calcula o tempo que o estado ficou ativo\n    CASE \n        WHEN next_timestamp IS NOT NULL THEN \n            AGE(next_timestamp, timestamp)\n        ELSE \n            NULL\n    END AS active_duration\nFROM \n    state_intervals\nORDER BY \n    timestamp;",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2650,
        "y": 2060,
        "wires": [
            [
                "9c28a4bb59ffbf4d"
            ]
        ]
    },
    {
        "id": "7385aea507438bdf",
        "type": "postgresql",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "",
        "query": "SELECT *\nFROM machine_events\nWHERE id_machine =4\nORDER BY timestamp DESC\nlimit 1\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2230,
        "y": 1920,
        "wires": [
            [
                "0327c453d9c60bfc"
            ]
        ]
    },
    {
        "id": "03dcd04c1b46bf41",
        "type": "postgresql",
        "z": "68278b12c5824bc7",
        "d": true,
        "g": "18bd3889a6d95392",
        "name": "Lista FIltrada Tempo e Maquina",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n)\nSELECT \n    id,\n    timestamp AS start_time,       -- Hora inicial do estado\n    next_timestamp AS end_time,    -- Hora final do estado\n    id_machine,\n    payload,\n    mode,\n    state,\n    -- Calcula o tempo que o estado ficou ativo em minutos\n    CASE \n        WHEN next_timestamp IS NOT NULL THEN \n            EXTRACT(EPOCH FROM (next_timestamp - timestamp)) / 60  -- Tempo em minutos\n        ELSE \n            NULL\n    END AS active_duration\nFROM \n    state_intervals\nWHERE \n    -- Filtros aplicados na tabela de saída\n    next_timestamp > '{{{msg.payload.start_time}}}'::timestamp  -- start_filter\n    AND timestamp < '{{{msg.payload.end_time}}}'::timestamp   -- end_filter\n    AND id_machine = 1  -- substitua 123 pelo id_machine desejado\nORDER BY \n    timestamp;\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2290,
        "y": 2000,
        "wires": [
            [
                "3f6687fa34eafaa8"
            ]
        ]
    },
    {
        "id": "78f55297f2908d5c",
        "type": "delay",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2480,
        "y": 1860,
        "wires": [
            [
                "0bf52cb0b53711ab"
            ]
        ]
    },
    {
        "id": "e7705aeb3b48efda",
        "type": "postgresql",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "",
        "query": "SELECT\n    SUM(CASE \n            WHEN (payload::jsonb->'machine_event'->'payload'->>'Programada')::boolean = true THEN \n                (payload::jsonb->'machine_event'->'payload'->>'tParada')::numeric \n            ELSE 0 \n        END) AS soma_programada,\n    SUM(CASE \n            WHEN (payload::jsonb->'machine_event'->'payload'->>'Programada')::boolean = false THEN \n                (payload::jsonb->'machine_event'->'payload'->>'tParada')::numeric \n            ELSE 0 \n        END) AS soma_nao_programada\nFROM public.appoint\nWHERE \n    to_timestamp((payload::jsonb->'machine_event'->'payload'->>'InicioParada')::bigint / 1000) AT TIME ZONE 'UTC' >= '{{{msg.payload.start_time}}}'\n    AND to_timestamp((payload::jsonb->'machine_event'->'payload'->>'FimParada')::bigint / 1000) AT TIME ZONE 'UTC' <= '{{{msg.payload.end_time}}}'\n    AND ((payload::jsonb->'machine_event'->'payload'->>'machine_id')::int) = 4\n    ",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2230,
        "y": 1800,
        "wires": [
            [
                "660f1f2badbe7dd4"
            ]
        ]
    },
    {
        "id": "2c41259399ab18ad",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "debug 646",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2990,
        "y": 1800,
        "wires": []
    },
    {
        "id": "660f1f2badbe7dd4",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "SET Prog e Nao Pog",
        "func": "const soma_programada = Number(msg.payload[0].soma_programada) || 0\nconst soma_nao_programada = Number(msg.payload[0].soma_nao_programada) || 0\n\nconst sumProg_NProgr_parcial = [{\n    \"soma_programada\":soma_programada,\n    \"soma_nao_programada\": soma_nao_programada\n}]\n\nflow.set(\"sumProg_NProgr_parcial\", sumProg_NProgr_parcial);\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2700,
        "y": 1800,
        "wires": [
            [
                "2c41259399ab18ad"
            ]
        ]
    },
    {
        "id": "0b0c7ad0b01de53f",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "g": "18bd3889a6d95392",
        "name": "debug 647",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1950,
        "y": 2020,
        "wires": []
    },
    {
        "id": "19b4bf4214586831",
        "type": "http request",
        "z": "68278b12c5824bc7",
        "g": "ffc98449a1b25d57",
        "name": "GET StopReasons",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1550,
        "y": 220,
        "wires": [
            [
                "8aa972b5d76a4b79"
            ]
        ]
    },
    {
        "id": "8aa972b5d76a4b79",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "ffc98449a1b25d57",
        "name": "function 303",
        "func": "const data = JSON.parse(msg.payload)\nlet id = Math.floor(msg.id_maq)\n\nif (Number.isNaN(id)) {\n    id = null\n}\n\n\nmsg.payload = {}\n\n\nfunction StopsByMachine(data, selectedId = null) {\n    const machineMap = new Map();\n    data.forEach(event => {\n        event.machines.forEach(machine => {\n            if (!machineMap.has(machine.id)) {\n                machineMap.set(machine.id, { id: machine.id, name: machine.name, stopReasons: [] });\n            }\n            machineMap.get(machine.id).stopReasons.push([event.plc_code, event.name, event.expected]);\n        });\n    });\n\n    if (selectedId !== null) {\n        return machineMap.has(selectedId) ? machineMap.get(selectedId) : null;\n    }\n\n    return Array.from(machineMap.values());\n}\n\n\n\nfunction listUniqueMachineNames(data) {\n\n    const machines = new Map();\n    data.forEach(event => {\n        event.machines.forEach(machine => {\n            machines.set(machine.id, machine.name);\n        });\n    });\n\n    const result = Array.from(machines).map(([id, name]) => ({ id, name }));\n\n    return result\n\n\n}\n\n\n\n// Chamar a função e imprimir o resultado\nmsg.payload.maquinas = listUniqueMachineNames(data);\n\n\n\n// Executar a função e imprimir o resultado\nmsg.payload.stopreasons = StopsByMachine(data, id);\n\nflow.set(\"stopreasons\", msg.payload.stopreasons);\n\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 220,
        "wires": [
            [
                "651f67005308f602"
            ]
        ]
    },
    {
        "id": "f48003bdde34ad13",
        "type": "inject",
        "z": "68278b12c5824bc7",
        "g": "ffc98449a1b25d57",
        "name": "",
        "props": [],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1210,
        "y": 220,
        "wires": [
            [
                "e98cd21bbf1cce5b"
            ]
        ]
    },
    {
        "id": "651f67005308f602",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "g": "ffc98449a1b25d57",
        "name": "debug 648",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2130,
        "y": 220,
        "wires": []
    },
    {
        "id": "e98cd21bbf1cce5b",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "ffc98449a1b25d57",
        "name": "Config",
        "func": "\nlet config = flow.get(\"config\")\n\n//msg.id_maq = msg.req.params.id_maq\nmsg.id_maq = config.machine_id\n\n//node.warn(\"Aqui\");\n\nif (config.send == true) {\n  \n\n    msg.url = config.url + \"/stop_reasons.json\"\n    msg.headers = {}\n    msg.headers['Authorization'] = config.token_line\n    msg.payload = {}\n\n\nreturn msg\n\n\n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 220,
        "wires": [
            [
                "19b4bf4214586831"
            ]
        ]
    },
    {
        "id": "829beebf4be8c6c4",
        "type": "inject",
        "z": "68278b12c5824bc7",
        "d": true,
        "g": "ffc98449a1b25d57",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "100",
        "topic": "",
        "x": 1210,
        "y": 280,
        "wires": [
            [
                "25cebf99ba20add7"
            ]
        ]
    },
    {
        "id": "25cebf99ba20add7",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "ffc98449a1b25d57",
        "name": "lista paradas",
        "func": "msg.payload = {}\n\n\nlet lista_paradas = [\n    {\n        \"id\": 2,\n        \"descr\": \"\",\n        \"cod_class\": 0, \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    }\n]\n\n\nconst paradas = flow.get(\"stopreasons\");\n\nnode.warn(lista_paradas);\nnode.warn(paradas);\n\nfor (let index = 0; index < paradas.stopReasons.length; index++) {\n    //node.warn(paradas.stopReasons[index][0]);\n    lista_paradas[index].id = 9999\n    lista_paradas[index].descr = paradas.stopReasons[index][1]\n    lista_paradas[index].cod_class = paradas.stopReasons[index][0]\n    lista_paradas[index].ZZZZZZZZZZudtZIA_Par3 = 5\n    lista_paradas[index].progr = paradas.stopReasons[index][2]\n}\n\n\nnode.warn(lista_paradas);\n\nmsg.payload.paradas = lista_paradas\n\nreturn msg\n\n\n// msg.payload = {\n//     \"id\": 23,\n//     \"descr\": \"\",\n//     \"cod_class\": 0,\n//     \"ZZZZZZZZZZudtZIA_Par3\": 0,\n//     \"progr\": false\n// }\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 280,
        "wires": [
            [
                "198bd67a8e504932",
                "7734d4b288c62f06"
            ]
        ]
    },
    {
        "id": "198bd67a8e504932",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "g": "ffc98449a1b25d57",
        "name": "debug 649",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 340,
        "wires": []
    },
    {
        "id": "7734d4b288c62f06",
        "type": "eth-ip out",
        "z": "68278b12c5824bc7",
        "g": "ffc98449a1b25d57",
        "endpoint": "8d756ed66187c2a2",
        "variable": "cmdZIA",
        "program": "",
        "name": "",
        "x": 2020,
        "y": 300,
        "wires": []
    },
    {
        "id": "9be64fbde9c860b2",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "589a8790198405ba",
        "name": "Alarme",
        "func": "let memo_aux_id_falha = context.get(\"aux_id_falha\");\nif (msg.payload.aux_id_falha != memo_aux_id_falha) {\n    if (msg.payload.aux_id_falha != 0 && msg.payload.aux_id_falha != 9999) {\n        let config = flow.get(\"config\");\n        let dados_alm = {\n            TimeStamp: new Date(),\n            nameMachine: config.machine_name,\n            ID: msg.payload.aux_id_falha,\n            reason: msg.payload.lastalm\n        };\n        const d = new Date();\n        let minutes = d.getMinutes();\n        let agora = new Date()\n        msg.payload = {\n            \"authenticity_token\": \"L3uhfD4yxArDD6++xrFmFX9LLKfX5PyMstpcUL0zi6SRrHAzTqfBCj1iKfYp4o6GLK9emMZYiAmxF1T9C7BQ==\",\n            \"machine_event\": {\n                \"timestamp(1i)\": agora.getFullYear().toString(),\n                \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n                \"timestamp(3i)\": agora.getDate().toString(),\n                \"timestamp(4i)\": agora.getHours().toString(),\n                \"timestamp(5i)\": agora.getMinutes().toString(),\n                \"event_type_id\": 5,\n                //        \"timestamp(3i)\": d.getDay(),\n                //        \"timestamp(2i)\": d.getMonth(),\n                //        \"timestamp(1i)\": d.getFullYear(),\n                //        \"timestamp(4i)\": d.getHours(),\n                //        \"timestamp(5i)\": d.getMinutes(),\n                \"payload\": dados_alm\n            }\n        }\n        context.set(\"aux_id_falha\", dados_alm.ID);\n        return msg\n    }\n}\ncontext.set(\"aux_id_falha\", msg.payload.aux_id_falha);\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 2660,
        "wires": [
            [
                "066f5e8d507b4cda"
            ]
        ]
    },
    {
        "id": "9bfd43d9daaff4dd",
        "type": "http request",
        "z": "68278b12c5824bc7",
        "g": "589a8790198405ba",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1470,
        "y": 2660,
        "wires": [
            [
                "a15ff84c9690ea6a"
            ]
        ]
    },
    {
        "id": "a15ff84c9690ea6a",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "g": "589a8790198405ba",
        "name": "debug 650",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 2660,
        "wires": []
    },
    {
        "id": "066f5e8d507b4cda",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "589a8790198405ba",
        "name": "function 304",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 2660,
        "wires": [
            [
                "9bfd43d9daaff4dd",
                "86434124ad326de0"
            ]
        ]
    },
    {
        "id": "62e69c4ed64ebaec",
        "type": "link in",
        "z": "68278b12c5824bc7",
        "g": "c1a2691e8bbb7024",
        "name": "link in 29",
        "links": [
            "615e1f011ffb0b71"
        ],
        "x": 245,
        "y": 1620,
        "wires": [
            [
                "2aea641302ed5c27"
            ]
        ]
    },
    {
        "id": "a4d2fd7147254444",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "c1a2691e8bbb7024",
        "name": "function 337",
        "func": "const config = flow.get(\"config\");\nconst guilt = msg.payload[config.machine_name]\nlet name_var_global = \"plc\" + config.machine_name\n\n\n\nif (guilt) {\n    node.warn(\"my warning\");\n    //atualiza a hora da parada com a hora que a enchedora (gargalo) parou\n    let parada = flow.get(\"parada\");\n    const parada_linha = JSON.parse(JSON.stringify(parada))\n    parada_linha.hora = new Date().getTime()\n    parada_linha.machine_id = config.machine_id\n    parada_linha.machine_name = config.machine_name\n    parada_linha.active = true\n    global.set(\"parada_linha\", parada_linha )\n    return msg;\n\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1620,
        "wires": [
            [
                "69dd7f600b1a3a9d"
            ]
        ]
    },
    {
        "id": "2aea641302ed5c27",
        "type": "delay",
        "z": "68278b12c5824bc7",
        "g": "c1a2691e8bbb7024",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 370,
        "y": 1620,
        "wires": [
            [
                "a4d2fd7147254444"
            ]
        ]
    },
    {
        "id": "f99e8b3d9c91449f",
        "type": "link in",
        "z": "68278b12c5824bc7",
        "g": "c1a2691e8bbb7024",
        "name": "link in 30",
        "links": [
            "31d753b6c2f98a0f"
        ],
        "x": 245,
        "y": 1680,
        "wires": [
            [
                "19ddf5768dc397e4"
            ]
        ]
    },
    {
        "id": "19ddf5768dc397e4",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "c1a2691e8bbb7024",
        "name": "function 338",
        "func": "let config = flow.get(\"config\");\nlet retorno = new Date()\nlet parada = global.get(\"parada_linha\");\n\nif (parada.machine_id == config.machine_id) {\n\n    let tParada = (retorno.getTime() - parada.hora) / 1000 / 60\n    //let paradasSoma = flow.get(\"paradasSoma\") || flow.set(\"paradasSoma\", { \"Prog\": 0, \"Nprog\": 0 })\n    let turno = global.get(\"turno_\" + config.factory)\n    let machine_event = {}\n\n    machine_event = {\n        \"timestamp(1i)\": retorno.getFullYear().toString(),\n        \"timestamp(2i)\": (retorno.getMonth() + 1).toString(),\n        \"timestamp(3i)\": retorno.getDate().toString(),\n        \"timestamp(4i)\": retorno.getHours().toString(),\n        \"timestamp(5i)\": retorno.getMinutes().toString(),\n        \"timestamp(6i)\": retorno.getSeconds().toString(),\n        \"event_type_id\": 4,\n        \"payload\": {\n            \"aux_id_falha\": parada.aux_id_falha,\n            \"InicioParada\": parada.hora,\n            \"FimParada\": new Date().getTime(),\n            \"tParada\": Number(tParada.toFixed(2)),\n            \"ID\": isNaN(Number(parada.statechanged_id)) ? 0 : Number(parada.statechanged_id), // Garantir que ID seja um número\n            \"Reason\": parada.statechanged_reason,\n            \"ModeReason\": parada.mode,\n            \"StateReason\": parada.state || 0,\n            \"Programada\": parada.programada,\n            \"turno_atual\": turno.turno,\n            \"equip\": config.machine_name,\n            \"machine_id\": config.machine_id,\n            \"guilt\": false\n        }\n    }\n\n    parada.active = false\n    msg.payload.machine_event = machine_event\n\n\n\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1680,
        "wires": [
            [
                "8adbbba4f292ad1c"
            ]
        ]
    },
    {
        "id": "2d9c668874aab8f0",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "g": "c1a2691e8bbb7024",
        "name": "debug 718",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1680,
        "wires": []
    },
    {
        "id": "8adbbba4f292ad1c",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "c1a2691e8bbb7024",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n\n    //msg.payload.machine_event.payload.ID = 999;\n\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1680,
        "wires": [
            [
                "b606b20c6f3793ba"
            ]
        ]
    },
    {
        "id": "69dd7f600b1a3a9d",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "g": "c1a2691e8bbb7024",
        "name": "debug 719",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1620,
        "wires": []
    },
    {
        "id": "6d31f928d583617c",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "c1a2691e8bbb7024",
        "name": "Update tempo parada linha",
        "func": "let parada_linha = global.get(\"parada_linha\");\n\nif (parada_linha.active) {\n    let retorno = new Date()\n    \n    let tParada = (retorno.getTime() - parada_linha.hora) / 1000 / 60\n    parada_linha.tParadaAtual = tParada\n\n\n\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "b606b20c6f3793ba",
        "type": "http request",
        "z": "68278b12c5824bc7",
        "g": "c1a2691e8bbb7024",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 740,
        "y": 1680,
        "wires": [
            [
                "2d9c668874aab8f0"
            ]
        ]
    },
    {
        "id": "bddaa6a84847b210",
        "type": "eth-ip in",
        "z": "68278b12c5824bc7",
        "endpoint": "f56ab6388d9b4cdf",
        "mode": "all",
        "variable": "diProductionCounter",
        "program": "",
        "name": "PLC_EMF",
        "gatherMetrics": true,
        "includeTimestamp": true,
        "x": 120,
        "y": 300,
        "wires": [
            [
                "97acb7e3b06546bd",
                "592262e7ae270e36"
            ]
        ]
    },
    {
        "id": "6f6bc63bc57ea9f3",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "name": "debug 730",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 300,
        "wires": []
    },
    {
        "id": "97acb7e3b06546bd",
        "type": "function",
        "z": "68278b12c5824bc7",
        "name": "function 349",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet mode\n\n///alteracao de mode - gambia\nswitch (msg.payload.machine_mode.value) {\n    case 0:\n        mode = 1\n        break;\n    case 1:\n        mode = 2\n        break;\n    case 2:\n        mode = 1\n        break;\n    default:\n        mode = 1\n\n}\n\n\n\nlet plc = {\n    xResetCounter: msg.payload.xResetCounter.value,\n    xResetReject_r1: msg.payload.xResetReject_r1.value,\n    xResetReject_r2: msg.payload.xResetReject_r2.value,\n    aux_id_falha: msg.payload.aux_id_falha.value,\n    iActualRecipe: msg.payload.iActualRecipe.value,\n    strRecipeName: msg.payload.recipe_name.value,\n    mode: mode,\n    state: msg.payload.machine_state.value,\n    rActualSpeed: msg.payload.rActualSpeed,\n    diCounterReject_r1: msg.payload.diCounterReject_r1.value,\n    diCounterReject_r2: 0,\n    diProductionCounter: msg.payload.diProductionCounter.value,\n    starved: msg.payload.machine_starverd.value,\n    blocked: msg.payload.machine_blocked.value\n\n\n\n}\n\n\n\nif (plc.blocked && plc.state == 5) {\n    plc.aux_id_falha = 300\n}\n\n\n\nglobal.set(name_var_global, plc);\n\nmsg.payload = plc\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 300,
        "wires": [
            [
                "6f6bc63bc57ea9f3",
                "24579517e4447b83"
            ]
        ]
    },
    {
        "id": "592262e7ae270e36",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "name": "debug 733",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 380,
        "wires": []
    },
    {
        "id": "873a9feedd2a38e9",
        "type": "eth-ip out",
        "z": "68278b12c5824bc7",
        "d": true,
        "g": "f9aa50c745e2f4e2",
        "endpoint": "f56ab6388d9b4cdf",
        "variable": "xResetReject_r2",
        "program": "",
        "name": "",
        "x": 2390,
        "y": 1000,
        "wires": []
    },
    {
        "id": "04df31cf8689d536",
        "type": "eth-ip out",
        "z": "68278b12c5824bc7",
        "g": "f9aa50c745e2f4e2",
        "endpoint": "f56ab6388d9b4cdf",
        "variable": "xResetReject_r1",
        "program": "",
        "name": "",
        "x": 2390,
        "y": 960,
        "wires": []
    },
    {
        "id": "9954f0d6b5b400f5",
        "type": "delay",
        "z": "68278b12c5824bc7",
        "g": "f9aa50c745e2f4e2",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1900,
        "y": 1000,
        "wires": [
            [
                "45615a39c26f085d"
            ]
        ]
    },
    {
        "id": "45615a39c26f085d",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "f9aa50c745e2f4e2",
        "name": "function 351",
        "func": "msg.payload = false\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2090,
        "y": 1000,
        "wires": [
            [
                "1ccacca01cec23fa",
                "04df31cf8689d536",
                "873a9feedd2a38e9"
            ]
        ]
    },
    {
        "id": "75b92b9e7c0d0a54",
        "type": "inject",
        "z": "68278b12c5824bc7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1420,
        "y": 580,
        "wires": [
            [
                "f340bf8561fe993d"
            ]
        ]
    },
    {
        "id": "178a788d6a7c7787",
        "type": "function",
        "z": "68278b12c5824bc7",
        "g": "f9aa50c745e2f4e2",
        "name": "function 350",
        "func": "msg.payload = true\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 920,
        "wires": [
            [
                "1ccacca01cec23fa",
                "04df31cf8689d536",
                "873a9feedd2a38e9"
            ]
        ]
    },
    {
        "id": "d9436f7465af2fee",
        "type": "file in",
        "z": "68278b12c5824bc7",
        "name": "Lista Falhas",
        "filename": "alm_list_04",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": true,
        "x": 330,
        "y": 220,
        "wires": [
            [
                "0cc08eaf0a552f11"
            ]
        ]
    },
    {
        "id": "8b43c51f88eadf23",
        "type": "inject",
        "z": "68278b12c5824bc7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "d9436f7465af2fee"
            ]
        ]
    },
    {
        "id": "16d381bd6ffabecb",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "name": "debug 739",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 220,
        "wires": []
    },
    {
        "id": "0cc08eaf0a552f11",
        "type": "function",
        "z": "68278b12c5824bc7",
        "name": "function 356",
        "func": "flow.set(\"alm_list\", msg.payload);\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 220,
        "wires": [
            [
                "16d381bd6ffabecb"
            ]
        ]
    },
    {
        "id": "24579517e4447b83",
        "type": "function",
        "z": "68278b12c5824bc7",
        "name": "find line",
        "func": "let config = flow.get(\"config\");\n\nlet name_var_global = \"plc\" + config.machine_name\n\n\nlet plc = msg.payload\n\nlet cod = msg.payload.aux_id_falha\n\nconst lista_falha = flow.get(\"alm_list\");\n\n\nconst lines = lista_falha.split('\\n');\n//node.warn(lines);\n\n\n// Percorrer cada linha e dividi-la em colunas\nlines.forEach(line => {\n    const columns = line.split(',');\n    if (columns.length > 1) {\n        var id = columns[0].trim();\n        var desc_alm = columns[1].trim();\n        var desc_classe = columns[2].trim();\n        var classe = columns[3].trim();\n        var programadada = columns[4].trim();\n    }\n\n    if (cod == id) {\n        let str_cod = desc_classe\n        let class_cod = classe\n        let programada = Boolean(Number(programadada))\n        plc.statechanged_id = class_cod\n        plc.statechanged_reason = str_cod\n        plc.programada = programada\n        plc.lastalm = desc_alm\n\n        return\n\n\n\n    }\n\n    \n\n});\n\n\n\nplc = JSON.parse(JSON.stringify(plc))\nglobal.set(name_var_global, plc);\nmsg.payload = plc\nreturn msg\n\n\n\n//return msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 400,
        "wires": [
            [
                "351e626c38724d5e",
                "0e9b17153433a486",
                "6a3b3fdc60bfbcc1",
                "1c5c49bdb5380dec",
                "75c8b4f71351df9f"
            ]
        ]
    },
    {
        "id": "351e626c38724d5e",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.aux_id_falha",
        "statusType": "msg",
        "x": 970,
        "y": 400,
        "wires": []
    },
    {
        "id": "0e9b17153433a486",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.statechanged_id",
        "statusType": "msg",
        "x": 970,
        "y": 480,
        "wires": []
    },
    {
        "id": "6a3b3fdc60bfbcc1",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.statechanged_reason",
        "statusType": "msg",
        "x": 970,
        "y": 540,
        "wires": []
    },
    {
        "id": "1c5c49bdb5380dec",
        "type": "debug",
        "z": "68278b12c5824bc7",
        "name": "debug 740",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload.lastalm",
        "statusType": "msg",
        "x": 970,
        "y": 600,
        "wires": []
    },
    {
        "id": "75c8b4f71351df9f",
        "type": "link out",
        "z": "68278b12c5824bc7",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "ffbb4c5d7c5fb705"
        ],
        "x": 855,
        "y": 640,
        "wires": []
    },
    {
        "id": "82e23587a27de914",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "name": "debug 652",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 2500,
        "wires": []
    },
    {
        "id": "4ad1d612a31e546d",
        "type": "link in",
        "z": "319fb18efb4d6325",
        "name": "link in 11",
        "links": [
            "38cccc59ebd5094f"
        ],
        "x": 495,
        "y": 2620,
        "wires": [
            [
                "1cb9a42be3f3b307"
            ]
        ]
    },
    {
        "id": "f310c7dd5873c5c3",
        "type": "inject",
        "z": "319fb18efb4d6325",
        "g": "736f2b50da7194b0",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 80,
        "wires": [
            [
                "2ed9d39c6c54cc67"
            ]
        ]
    },
    {
        "id": "2ed9d39c6c54cc67",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "736f2b50da7194b0",
        "name": "CONFIG",
        "func": "//configuracaao de linha\n\nlet config = {}\n\nconfig.machine_name = \"cfe\"\n\nconfig.factory = 1\nconfig.machine_id = 5\nconfig.token_machine = \"Bearer \" + \"79d89fd1540741920bc75112b64b7bf1691b9772\"\nconfig.token_line = \"Bearer \" + \"00bc757a398cc98d299fd6fc2119929c48647db9\"\nconfig.url = \"http://127.0.0.1:3003\"\nconfig.url_machine = config.url + \"/machine_events\"\nconfig.url_line = config.url + \"/production_line_events\"\nconfig.send = true /// habilita POST\n\nflow.set(\"config\", config);\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 80,
        "wires": [
            [
                "db4a5cc9f38ce088"
            ]
        ]
    },
    {
        "id": "db4a5cc9f38ce088",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "g": "736f2b50da7194b0",
        "name": "debug 653",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 80,
        "wires": []
    },
    {
        "id": "80fd61a231372abe",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "c4651e8c9d205b0c",
        "name": "Turnos, Tempos Acumulados",
        "func": "\nlet msg1 = new Object()\nlet msg2 = new Object()\nlet msg3 = new Object()\nlet config = flow.get(\"config\");\nlet a\n\n\n\nlet turno = global.get(\"turno_\" + config.factory)\nlet memo_turno = flow.get(\"memo_turno\") || 0\n\n\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\n\nlet sm_atual = {\n    \"state\": dadosPlc.state || 2,\n    \"mode\": dadosPlc.mode || 2\n}\nflow.set(\"sm_atual\", sm_atual);\nlet sm_anterior = flow.get(\"sm_anterior\") || flow.set(\"sm_anterior\", sm_atual)\n\n\nlet tempoTranscorrido\nif (memo_turno == turno.turno) { //&& turno.turno != 0\n    a = 1\n\n\n    flow.set(\"tempoTranscorrido\", turno.tempoTranscorrido);\n    tempoTranscorrido = turno.tempoTranscorrido\n\n    calculosOEE()\n\n} else {\n\n    a = 2\n\n    tempoTranscorrido = flow.get(\"tempoTranscorrido\") || 0\n\n}\n\n\n\nlet parada = flow.get(\"parada\") || { \"hora\": 0, \"state\": \"0\", \"mode\": \"0\", \"active\": false, \"tParadaAtual\": 0 }\n\n\n\n// Atualiza o tempo da parada atual\nif ((sm_atual.state != 6 || sm_atual.mode != 2) && turno.turno != 0) {\n    let agora = new Date().getTime()\n    let tParadaAtual = agora - parada.hora\n    parada.tParadaAtual = tParadaAtual / 60 / 1000\n    flow.set(\"parada\", parada);\n    global.set(\"parada\" + name_var_global, parada);\n}\n\n\n\n\n// Aciona saida indicando que houve mudanca do modo de operacao\nif (sm_atual.mode != sm_anterior.mode || sm_atual.state != sm_anterior.state) {\n    //Verifica se a maquina saiu do estado Execute\n    //Sempre que a maquina sair de execute devemos anotar o horario da parada\n    if ((sm_anterior.state == 6 && sm_anterior.mode == 2) && (sm_atual.state != sm_anterior.state || sm_atual.mode != sm_anterior.mode)) {\n        console.log(\"NÃO PRODUZINDO\")\n        anotaInicioParada()\n        msg2 = null\n    } else if ((sm_anterior.state != 6 || sm_anterior.mode != 2) && (sm_atual.state == 6 && sm_atual.mode == 2)) {\n        console.log(\"PRODUZINDO\")\n        msg2.payload = consolidaParada()\n        calculosOEE()\n        flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n    }\n    flow.set(\"sm_anterior\", sm_atual)\n\n\n    return [null, msg2]\n}\n\n\n\n\n\n/// rotinas que devem ser executadas na troca de turno\nif (memo_turno != turno.turno) {\n    msg1 = null\n    msg2 = null\n\n    console.log(\"TrocaTurno\")\n    node.warn(\"TrocaTurno\")\n\n    if (memo_turno != 0) {\n        console.log(\"Fim turno \" + memo_turno)\n        msg1 = { payload: 1 }\n\n        if (parada.active == true) { // se no fim do turno estiver em parada consolida\n            msg2 = {}\n            msg2.payload = {}\n            msg2.payload = consolidaParada()\n\n            calculosOEE()\n\n            flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n            if (turno.turno != 0) { // se entrar em um novo turno reinicia a parada\n                console.log(\"Inicio turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n                anotaInicioParada()\n\n            }\n        } else {\n            if (turno.turno != 0) {\n                console.log(\"Iniccio Turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n            }\n        }\n\n\n        calculosOEE()\n        let calculoOEE = flow.get(\"calculoOEE\");\n        flow.set(\"fimTurnoOEE\", calculoOEE);\n        flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n\n\n\n    } else if (memo_turno == 0) {\n        msg1 = null\n        console.log(\"verificaAnotacaoTurno\") // verifica e cria msg2 se necssario e zera anotacao de parada\n\n        verificaAnotacaoInicioTurno()\n\n    } else {\n\n        msg1 = null\n    }\n\n    //anota registro de turno\n\n\n\n    flow.set(\"memo_turno\", turno.turno)\n\n    return [msg1, msg2]\n}\nmsg3.payload = calculosOEE()\nmsg3.payload.machine_event.event_type_id = 6\nreturn [null, null, msg3]\n\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n\nfunction anotaInicioParada() {\n\n    console.log(\"inicio parada\")\n    node.warn(name_var_global);\n\n    let iParada = global.get(name_var_global);\n    let parada = {\n        \"hora\": new Date(),\n        \"state\": sm_atual.state || 0,\n        \"mode\": sm_atual.mode\n    }\n    flow.set(\"parada\", {\n        \"aux_id_falha\": Number(dadosPlc.aux_id_falha),\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true,\n        \"statechanged_id\": iParada.statechanged_id,\n        \"statechanged_reason\": iParada.statechanged_reason,\n        \"programada\": new Boolean(iParada.programada),\n        \"justifica\": false\n\n    });\n    global.set(\"parada\" + name_var_global, {\n        \"aux_id_falha\": Number(dadosPlc.aux_id_falha),\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true,\n        \"statechanged_id\": iParada.statechanged_id,\n        \"statechanged_reason\": iParada.statechanged_reason,\n        \"programada\": new Boolean(iParada.programada),\n        \"justifica\": false,\n        \"machine_id\": config.machine_id,\n        \"Equip\": config.machine_name\n\n    });\n    //console.clear()\n    //console.log(\"Inicio da Parada:\" + parada.hora.getHours() + \":\" + parada.hora.getMinutes())\n    return {\n        \"InicioParada\": parada.hora.getTime(),\n        \"FimParada\": 0,\n        \"tParada\": 0,\n        \"ID\": \"ID\",\n        \"Reason\": null,\n        \"ModeReason\": new Number(parada.mode),\n        \"StateReason\": new Number(parada.state) || 0,\n        \"Programada\": null,\n        \"Equip\": name_var_global\n    }\n}\n\nfunction consolidaParada() {\n    //////////////////////////////////////////////////////////////////////\n    //GAMBIA PARA ATRASAR O REGISTRO//////////////////////////////////////\n    //////////////////////////////////////////////////////////////////////\n\n    flow.set(\"ignora_registro_linha\", 20);\n    flow.set(\"ignora_registro_maquina\", 20);\n\n    ////fim da gambia///////////////////////////////////////////////////\n\n\n    console.log(\"fim parada\")\n    let retorno = new Date()\n    let parada = flow.get(\"parada\") || 0\n    let tParada = (retorno.getTime() - parada.hora) / 1000 / 60\n    let paradasSoma = flow.get(\"paradasSoma\") || flow.set(\"paradasSoma\", { \"Prog\": 0, \"Nprog\": 0 })\n\n    if (dadosPlc.programada == \"true\") {\n        paradasSoma.Prog = paradasSoma.Prog + tParada\n    } else {\n        paradasSoma.Nprog = paradasSoma.Nprog + tParada\n    }\n    flow.set(\"paradasSoma\", paradasSoma);\n    parada.active = false\n    flow.set(\"parada\", parada);\n    global.set(\"parada\" + name_var_global, parada);\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    return {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 8,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": {\n                \"aux_id_falha\": parada.aux_id_falha,\n                \"InicioParada\": parada.hora,\n                \"FimParada\": retorno.getTime(),\n                \"tParada\": Number(tParada.toFixed(2)),\n                \"ID\": isNaN(Number(parada.statechanged_id)) ? 0 : Number(parada.statechanged_id), // Garantir que ID seja um número\n                \"Reason\": parada.statechanged_reason,\n                \"ModeReason\": parada.mode,\n                \"StateReason\": parada.state || 0,\n                \"Programada\": parada.programada,\n                \"turno_atual\": turno.turno,\n                \"equip\": config.machine_name,\n                \"machine_id\": config.machine_id\n            }\n        }\n    }\n}\n\nfunction calculosOEE() {\n\n\n    //msg.filename = \".\\supZIA\\registroTurno_\" + name_var_global + \".json\"\n\n    var sumProg_NProgr = flow.get(\"sumProg_NProgr\") || [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }];\n\n    let dados_oee = {}\n    let tNProg = Number(sumProg_NProgr[0].soma_nao_programada)\n    let tProg = Number(sumProg_NProgr[0].soma_programada)\n    let tProducao = Number(tempoTranscorrido - (tProg + tNProg))\n\n    node.status({ fill: \"red\", shape: \"ring\", text: dados_oee.percDisp });\n\n    if (dadosPlc.mode == 2 && dadosPlc.state == 6) {\n        dados_oee.statusMachine = \"Rodando\"\n    } else dados_oee.statusMachine = \"Parada\"\n\n    ////////////\n    dados_oee.statusConexao = true\n    dados_oee.mode = Number(dadosPlc.mode)\n    dados_oee.state = Number(dadosPlc.state) || 0\n    dados_oee.rNominalSpeed = Number(dadosPlc.rNominalSpeed)\n    dados_oee.rSetSpeed = Number(dadosPlc.rSetSpeed)\n    dados_oee.rActualSpeed = Number(dadosPlc.rActualSpeed)\n    dados_oee.strRecipeName = String(dadosPlc.strRecipeName)\n    dados_oee.strBottle = String(dadosPlc.strBottle)\n    dados_oee.strCap = String(dadosPlc.strCap)\n    dados_oee.diProductionCounter = Number(dadosPlc.diProductionCounter)\n    dados_oee.diCounterReject_r1 = Number(dadosPlc.diCounterReject_r1)\n    dados_oee.diCounterReject_r2 = Number(dadosPlc.diCounterReject_r2)\n    dados_oee.iActualRecipe = Number(dadosPlc.iActualRecipe)\n    dados_oee.tempoTranscorrido = Number(tempoTranscorrido.toFixed(2))\n    dados_oee.percDisp = (tProducao) / (tempoTranscorrido - tProg) * 100\n\n    var teste = {\n        tProducao: tProducao,\n        tempoTranscorrido: tempoTranscorrido,\n        tProg: tProg,\n        tNProg: tNProg,\n\n\n\n    }\n    dados_oee.teste = teste;\n\n    node.status({ fill: \"red\", shape: \"ring\", text: JSON.stringify(teste) });\n\n    dados_oee.percDisp = Number(dados_oee.percDisp.toFixed(2))\n    dados_oee.percEfic = (dados_oee.diProductionCounter) / ((tProducao * dados_oee.rNominalSpeed) / 60) * 100\n    dados_oee.percEfic = Number(dados_oee.percEfic.toFixed(2))\n    dados_oee.percQual = (((dados_oee.diProductionCounter) - (dados_oee.diCounterReject_r1 + dados_oee.diCounterReject_r2)) / dados_oee.diProductionCounter) * 100\n    dados_oee.percQual = isNaN(Number(dados_oee.percQual)) ? 0 : Number(Number(dados_oee.percQual).toFixed(2));\n    dados_oee.percOEE = dados_oee.percDisp * dados_oee.percEfic * dados_oee.percQual / 10000\n    dados_oee.percOEE = Number(dados_oee.percOEE.toFixed(2))\n    dados_oee.turno = Number(turno.turno)\n    dados_oee.tempoParadaProgramada = Number(tProg.toFixed(2))\n    dados_oee.tempoParadaNaoProgramada = Number(tNProg.toFixed(2))\n    dados_oee.dimetaProduzidos = 100000\n    dados_oee.rmetaPerf = 95.00\n    dados_oee.rmetaDisp = 90.00\n    dados_oee.rmetaQual = 99.00\n    dados_oee.rmetaOEE = 90.00\n    dados_oee.equip = String(config.machine_name)\n\n    ////teste limites - ocorre quando o node é desligado\n    if (dados_oee.percDisp < 0) {\n        dados_oee.percDisp = 0\n    } else if (dados_oee.percDisp > 100) {\n        dados_oee.percDisp = 100\n    }\n\n    if (dados_oee.percEfic < 0) {\n        dados_oee.percEfic = 0\n    } else if (dados_oee.percEfic > 100) {\n        dados_oee.percEfic = 100\n    }\n\n    if (dados_oee.percQual < 0) {\n        dados_oee.percQual = 0\n    } else if (dados_oee.percQual > 100) {\n        dados_oee.percQual = 100\n    }\n\n    if (dados_oee.percOEE < 0) {\n        dados_oee.percOEE = 0\n    } else if (dados_oee.percOEE > 100) {\n        dados_oee.percOEE = 100\n    }\n\n\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    let calculo = {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 3,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": dados_oee\n        }\n    }\n\n    flow.set(\"calculoOEE\", calculo);\n\n\n    return calculo\n\n\n\n}\n\nfunction verificaAnotacao() {\n\n}\n\n\nfunction verificaAnotacaoInicioTurno() {\n    console.log(\"Inicio Turno \" + turno.turno)\n    ////Zera os valores para iniciar novo turno\n    flow.set(\"sumProg_NProgr\", [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }]);\n    if (sm_atual.state == 6 && sm_atual.mode == 2) {\n        //PRODUZINDO\n    } else {\n        //NAO PRODUZINDO\n        anotaInicioParada()\n        msg2 = null\n    }\n\n\n\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 980,
        "wires": [
            [
                "ce382d89dee0f724"
            ],
            [
                "898bf441e7765784"
            ],
            [
                "3208dd1976df4629",
                "890ebc7b98db4659"
            ]
        ]
    },
    {
        "id": "3d45848f318b6c94",
        "type": "inject",
        "z": "319fb18efb4d6325",
        "g": "c4651e8c9d205b0c",
        "name": "cycle",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 310,
        "y": 1060,
        "wires": [
            [
                "80fd61a231372abe",
                "514405e715a7c538",
                "d22f0e55f0038195"
            ]
        ]
    },
    {
        "id": "ce382d89dee0f724",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "ec9a77749b786146",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 820,
        "wires": [
            [
                "4a6634c2c9556b0f"
            ]
        ]
    },
    {
        "id": "85542c2391974ffb",
        "type": "comment",
        "z": "319fb18efb4d6325",
        "g": "ec9a77749b786146",
        "name": "Registro Troca de Turno",
        "info": "",
        "x": 1220,
        "y": 720,
        "wires": []
    },
    {
        "id": "c105d906cc490168",
        "type": "http request",
        "z": "319fb18efb4d6325",
        "g": "ec9a77749b786146",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "",
                "valueType": "other",
                "valueValue": ""
            }
        ],
        "x": 1910,
        "y": 820,
        "wires": [
            [
                "d0e14c2c2b49113b"
            ]
        ]
    },
    {
        "id": "d0e14c2c2b49113b",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "g": "ec9a77749b786146",
        "name": "debug 654",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2130,
        "y": 820,
        "wires": []
    },
    {
        "id": "5fa60eb004aef0fa",
        "type": "comment",
        "z": "319fb18efb4d6325",
        "g": "ec9a77749b786146",
        "name": "Turno + Tempo Transcorrido",
        "info": "",
        "x": 1240,
        "y": 880,
        "wires": []
    },
    {
        "id": "4a6634c2c9556b0f",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "ec9a77749b786146",
        "name": "Get fimTurnoOEE",
        "func": "msg.payload = flow.get(\"fimTurnoOEE\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 820,
        "wires": [
            [
                "515fee18102cc071",
                "61d399554e63b05f"
            ]
        ]
    },
    {
        "id": "515fee18102cc071",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "ec9a77749b786146",
        "name": "statusMachineId",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.machine_event.payload.statusMachineId = 2\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.machine_event.payload.statusMachineId = 2\n            break;\n        case 5:\n            msg.payload.machine_event.payload.statusMachineId = 5\n            break;\n        case 6:\n            msg.payload.machine_event.payload.statusMachineId = 1\n            break;\n        case 9:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 820,
        "wires": [
            [
                "c105d906cc490168"
            ]
        ]
    },
    {
        "id": "25acaa86aaad2f48",
        "type": "eth-ip out",
        "z": "319fb18efb4d6325",
        "g": "ec9a77749b786146",
        "endpoint": "64e05496ea276cf8",
        "variable": "xResetCounter",
        "program": "",
        "name": "",
        "x": 2280,
        "y": 880,
        "wires": []
    },
    {
        "id": "aed22d99a3adea71",
        "type": "comment",
        "z": "319fb18efb4d6325",
        "g": "ec9a77749b786146",
        "name": "Reset Counters",
        "info": "",
        "x": 1400,
        "y": 1020,
        "wires": []
    },
    {
        "id": "1b98ec05484935b0",
        "type": "inject",
        "z": "319fb18efb4d6325",
        "g": "ec9a77749b786146",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1230,
        "y": 960,
        "wires": [
            [
                "1905050896f7e5fe"
            ]
        ]
    },
    {
        "id": "1905050896f7e5fe",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "ec9a77749b786146",
        "name": "function 306",
        "func": "const cmdResetAtivo = flow.get(\"cmdResetAtivo\");\nif (cmdResetAtivo) {\n    return msg\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 960,
        "wires": [
            [
                "61d399554e63b05f"
            ]
        ]
    },
    {
        "id": "0e35c078b7581f79",
        "type": "function",
        "z": "319fb18efb4d6325",
        "d": true,
        "g": "ec9a77749b786146",
        "name": "function 307",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nnode.warn(dadosPlc.diProductionCounter);\n\nif (dadosPlc.diProductionCounter!='0') {\n    return msg\n}\n\nlet cmdResetAtivo = flow.get(\"cmdResetAtivo\");\ncmdResetAtivo = false\nflow.set(\"cmdResetAtivo\", cmdResetAtivo);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1000,
        "wires": [
            [
                "61d399554e63b05f",
                "80b7b33ff5052321"
            ]
        ]
    },
    {
        "id": "61d399554e63b05f",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "ec9a77749b786146",
        "name": "set reset Counters",
        "func": "let cmdResetAtivo = true\nflow.set(\"cmdResetAtivo\", cmdResetAtivo);\n\nmsg.payload = true\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 900,
        "wires": [
            [
                "0e35c078b7581f79",
                "25acaa86aaad2f48",
                "84202b3f42773fb5",
                "eeec2d89a85644d6"
            ]
        ]
    },
    {
        "id": "80b7b33ff5052321",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "g": "ec9a77749b786146",
        "name": "debug 655",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 1020,
        "wires": []
    },
    {
        "id": "3208dd1976df4629",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "e995a6044a620412",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1500,
        "wires": [
            [
                "db3d7a9db77fd529",
                "098a4b6769b9f569"
            ]
        ]
    },
    {
        "id": "7425c1c096eedf30",
        "type": "http request",
        "z": "319fb18efb4d6325",
        "g": "e995a6044a620412",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2090,
        "y": 1520,
        "wires": [
            [
                "d04c9c8b024595b5"
            ]
        ]
    },
    {
        "id": "d04c9c8b024595b5",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "g": "e995a6044a620412",
        "name": "debug 656",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2310,
        "y": 1520,
        "wires": []
    },
    {
        "id": "db3d7a9db77fd529",
        "type": "delay",
        "z": "319fb18efb4d6325",
        "g": "e995a6044a620412",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "120",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1580,
        "y": 1480,
        "wires": [
            [
                "8530e4fd3c4b7d89"
            ]
        ]
    },
    {
        "id": "8530e4fd3c4b7d89",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "e995a6044a620412",
        "name": "statusMachineId",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.machine_event.payload.statusMachineId = 3\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        case 5:\n            msg.payload.machine_event.payload.statusMachineId = 5\n            break;\n        case 6:\n            msg.payload.machine_event.payload.statusMachineId = 1\n            break;\n        case 9:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 1520,
        "wires": [
            [
                "7425c1c096eedf30"
            ]
        ]
    },
    {
        "id": "098a4b6769b9f569",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "e995a6044a620412",
        "name": "imediato na troca de estado - com filtro****",
        "func": "let ignora_registro_maquina = flow.get(\"ignora_registro_maquina\");\n\nif (ignora_registro_maquina == 0) {\n\n\n    let ant_mode = context.get(\"ant_mode\") || 0;\n    let ant_state = context.get(\"ant_state\") || 0;\n    let config = flow.get(\"config\");\n    let name_var_global = \"plc\" + config.machine_name\n    let dadosPlc = global.get(name_var_global)\n    let mode = dadosPlc.mode\n    let state = dadosPlc.state\n\n    if (ant_mode != mode || ant_state != state) {\n        context.set(\"ant_mode\", mode);\n        context.set(\"ant_state\", state);\n        return msg\n    }\n\n\n} else {\n\n    ignora_registro_maquina = ignora_registro_maquina - 1\n    flow.set(\"ignora_registro_maquina\", ignora_registro_maquina);\n\n}\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 1560,
        "wires": [
            [
                "8530e4fd3c4b7d89"
            ]
        ]
    },
    {
        "id": "87f7761da243d49a",
        "type": "comment",
        "z": "319fb18efb4d6325",
        "g": "fa6d40b45b4669bf",
        "name": "Registro Fim da Parada de Linha",
        "info": "",
        "x": 1290,
        "y": 1420,
        "wires": []
    },
    {
        "id": "34b7a5d783aede87",
        "type": "http request",
        "z": "319fb18efb4d6325",
        "g": "fa6d40b45b4669bf",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1930,
        "y": 1260,
        "wires": [
            [
                "7ef40a1531489f18"
            ]
        ]
    },
    {
        "id": "7ef40a1531489f18",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "g": "fa6d40b45b4669bf",
        "name": "debug 657",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2230,
        "y": 1280,
        "wires": []
    },
    {
        "id": "898bf441e7765784",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "fa6d40b45b4669bf",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n\n    //msg.payload.machine_event.payload.ID = 999;\n\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 1280,
        "wires": [
            [
                "0aaea39027a92e8b"
            ]
        ]
    },
    {
        "id": "0aaea39027a92e8b",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "fa6d40b45b4669bf",
        "name": "function 308",
        "func": "\nif (msg.payload != null) {\n\n    if (msg.payload.machine_event.payload.ID != 8888) {\n        return [msg, msg]\n    } else return [msg, msg];\n\n\n\n\n} else {\n\n    node.warn(\"Mudanca de estado sem registro\");\n\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1280,
        "wires": [
            [
                "34b7a5d783aede87"
            ],
            [
                "5574e569c252e698"
            ]
        ]
    },
    {
        "id": "a61906ad69e9b15b",
        "type": "postgresql",
        "z": "319fb18efb4d6325",
        "g": "fa6d40b45b4669bf",
        "name": "",
        "query": "INSERT INTO public.appoint\n(payload)\nVALUES('{{{msg.payload}}}');",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1990,
        "y": 1340,
        "wires": [
            [
                "bad46caa965d2fd0"
            ]
        ]
    },
    {
        "id": "bad46caa965d2fd0",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "g": "fa6d40b45b4669bf",
        "name": "debug 658",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 1340,
        "wires": []
    },
    {
        "id": "5574e569c252e698",
        "type": "json",
        "z": "319fb18efb4d6325",
        "g": "fa6d40b45b4669bf",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1810,
        "y": 1340,
        "wires": [
            [
                "a61906ad69e9b15b"
            ]
        ]
    },
    {
        "id": "50afa3ad3980ce52",
        "type": "link in",
        "z": "319fb18efb4d6325",
        "g": "fa6d40b45b4669bf",
        "name": "apontamento maquina",
        "links": [
            "36123713db6f3c4d"
        ],
        "x": 1135,
        "y": 1380,
        "wires": [
            [
                "0c0d3514674961ab"
            ]
        ]
    },
    {
        "id": "6069e6eaaca0e4e8",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "g": "fa6d40b45b4669bf",
        "name": "debug 659",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 1380,
        "wires": []
    },
    {
        "id": "0c0d3514674961ab",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "fa6d40b45b4669bf",
        "name": "Atualiza Parada - Apontamento",
        "func": "const config = flow.get(\"config\");\n\nlet parada = flow.get(\"parada\");\n\nparada.statechanged_id = msg.payload.newStopReason[1]\nparada.statechanged_reason = msg.payload.newStopReason[0]\nparada.programada = msg.payload.newStopReason[2]\nparada.justifica = true\n\n\nflow.set(\"parada\", parada);\nglobal.set(\"parada\" + config.machine_name, parada);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1380,
        "wires": [
            [
                "6069e6eaaca0e4e8"
            ]
        ]
    },
    {
        "id": "5e7af0fce65ce6f4",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "g": "42e01cbc2c1e335a",
        "name": "debug 660",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1200,
        "wires": []
    },
    {
        "id": "514405e715a7c538",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "42e01cbc2c1e335a",
        "name": "Calc Actual Stop",
        "func": "const lastState = flow.get(\"lastState\");\n\nconst lastTime = new Date(lastState[0].timestamp);\nconst currentTime = new Date();\n\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  AJUSTE DE TEMPO xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//const timezoneOffset = currentTime.getTimezoneOffset();\nconst timezoneOffset = 0\n\n\n\nlastTime.setHours(lastTime.getHours() - timezoneOffset / 60);\n\nnode.status({ fill: \"red\", shape: \"ring\", text: lastState[1] });\n\n\n\n\n// Converte para segundos\nconst lastTimeInSeconds = Math.floor(lastTime.getTime() / 1000);\nconst currentTimeInSeconds = Math.floor(currentTime.getTime() / 1000);\n\nconst timeDifference = (currentTimeInSeconds - lastTimeInSeconds) / 60;\n\nmsg.payload = {}\n\nmsg.payload.actualDuration = lastState[1] = timeDifference\nmsg.payload.actualState = lastState[0].payload.machine_event.payload.state\nmsg.payload.actualMode = lastState[0].payload.machine_event.payload.mode\n\n\nconst tempoTranscorrido = flow.get(\"tempoTranscorrido\");\n\nif (lastState[1] > tempoTranscorrido) {\n    lastState[1] = tempoTranscorrido\n\n}\nflow.set(\"lastState\", lastState);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar sumProg_NProgr_parcial = flow.get(\"sumProg_NProgr_parcial\") || [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }];\nlet parada = flow.get(\"parada\");\nif (!isNaN(parada.tParadaAtual)) {\n    //node.warn(parada.active);\n    \n    var calcSumProg_NProgr = JSON.parse(JSON.stringify(sumProg_NProgr_parcial))\n    if (parada.active) {\n\n        if (parada.programada == 'true') {\n            //node.warn(\"Programada\");\n            calcSumProg_NProgr[0].soma_programada = Number(sumProg_NProgr_parcial[0].soma_programada) + Number(parada.tParadaAtual)\n            calcSumProg_NProgr[0].soma_nao_programada = Number(sumProg_NProgr_parcial[0].soma_nao_programada)\n\n            //node.warn(sumProg_NProgr[0].soma_programada);\n        } else {\n            \n            //node.warn(\"Nao Programada\");\n            //node.warn(Number(sumProg_NProgr_parcial[0].soma_nao_programada));\n            //node.warn(Number(parada.tParadaAtual));\n            calcSumProg_NProgr[0].soma_programada = Number(sumProg_NProgr_parcial[0].soma_programada)\n            calcSumProg_NProgr[0].soma_nao_programada = Number(sumProg_NProgr_parcial[0].soma_nao_programada) + Number(parada.tParadaAtual)\n            //node.warn(sumProg_NProgr[0].soma_nao_programada);\n        }\n    } else {\n        calcSumProg_NProgr = sumProg_NProgr_parcial\n\n    }\n} else {\n    calcSumProg_NProgr = sumProg_NProgr_parcial\n    \n}\n\nflow.set(\"sumProg_NProgr\", calcSumProg_NProgr) || [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1200,
        "wires": [
            [
                "5e7af0fce65ce6f4"
            ]
        ]
    },
    {
        "id": "890ebc7b98db4659",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "monitor troca de estado",
        "func": "let config = flow.get(\"config\");\n//msg.config = config\n\n\n\nlet sm_atual = flow.get(\"sm_atual\");\nlet sm_anterior = flow.get(\"sm_anterior_iot\") || { mode: \"0\", state: \"0\" };\n\nif ((sm_atual.mode != sm_anterior.mode) || (sm_atual.state != sm_anterior.state)) {\n\n    //node.warn(\"mudou\");\n    flow.set(\"sm_anterior_iot\", sm_atual);\n\n    msg.machine_id = config.machine_id\n\n    return msg;\n\n\n\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1840,
        "wires": [
            [
                "547362e0f9530458"
            ]
        ]
    },
    {
        "id": "547362e0f9530458",
        "type": "json",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1450,
        "y": 1840,
        "wires": [
            [
                "382bc50a7f460c74"
            ]
        ]
    },
    {
        "id": "ded9d484f676e653",
        "type": "inject",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "60 segundos",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1600,
        "y": 1760,
        "wires": [
            [
                "e413375ec6005573"
            ]
        ]
    },
    {
        "id": "e413375ec6005573",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "consulta turno e ajsute de filtro",
        "func": "const config = flow.get(\"config\");\nmsg.machine_id = config.machine_id\n// Recupera a lista de horários de turnos a partir de uma variável global e o índice do turno desejado da variável de fluxo.\nlet horarios_turnos = global.get(\"turnos_times\");\nlet turno = flow.get(\"memo_turno\");\n\n// Faz uma cópia da lista de horários para evitar modificar o valor original na variável global.\nlet turnos_times = JSON.parse(JSON.stringify(horarios_turnos));\n\n// Obtém a data e hora atuais.\nconst today = new Date();\n// Define o início do dia (00:00:00) para a data atual. Essa data será usada para calcular o tempo em segundos desde a meia-noite.\nconst startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n// Converte o início do dia em formato epoch (segundos desde 1 de janeiro de 1970).\nconst epochTime = Math.floor(startOfDay.getTime() / 1000);\n\n\n\n\n\n// Define o ajuste de fuso horário em segundos. Neste caso, são 10800 segundos (ou 3 horas).\nconst timezoneOffset = -7200; // 2 horas em segundos\n\n// Define a quantidade de segundos em um dia, para lidar com turnos que ultrapassam a meia-noite.\nconst secondsInDay = 86400; // 24 horas em segundos\n\n// Itera sobre cada turno para calcular e ajustar os horários de início e fim.\nfor (let index = 0; index < turnos_times.length; index++) {\n    // Remove propriedades desnecessárias de cada turno para simplificar os dados.\n    delete turnos_times[index].created_at;\n    delete turnos_times[index].updated_at;\n    delete turnos_times[index].id;\n\n    // Extrai a parte do horário de início do turno (no formato 'HH:MM:SS') para conversão em segundos.\n    const [hours_s, minutes_s, seconds_s] = turnos_times[index].start_time.substring(11, 19).split(':').map(Number);\n    // Converte o horário de início em segundos: (horas * 3600) + (minutos * 60) + segundos.\n    const totalSecondsStart = hours_s * 3600 + minutes_s * 60 + seconds_s;\n\n    // Extrai a parte do horário de fim do turno (também no formato 'HH:MM:SS') para conversão em segundos.\n    const [hours_e, minutes_e, seconds_e] = turnos_times[index].end_time.substring(11, 19).split(':').map(Number);\n    // Converte o horário de fim em segundos: (horas * 3600) + (minutos * 60) + segundos.\n    const totalSecondsEnd = hours_e * 3600 + minutes_e * 60 + seconds_e;\n\n    // Calcula o horário de início absoluto do turno, somando o epoch do dia, o horário de início em segundos e o ajuste de fuso horário.\n    let start_time = new Date((epochTime + totalSecondsStart + timezoneOffset) * 1000);\n    // Calcula o horário de fim absoluto do turno da mesma forma.\n    let end_time = new Date((epochTime + totalSecondsEnd + timezoneOffset) * 1000);\n\n    // Verifica se o horário de início é maior que o horário de fim, indicando que o turno ultrapassa a meia-noite.\n    if (start_time > end_time) {\n        // Ajusta o horário de fim, somando um dia (em segundos) para representar corretamente um turno que termina no dia seguinte.\n        end_time = new Date((epochTime + totalSecondsEnd + timezoneOffset + secondsInDay) * 1000);\n    }\n\n    // Converte os horários de início e fim ajustados para o formato ISO e atualiza no objeto do turno.\n    turnos_times[index].start_time = start_time.toISOString();\n    turnos_times[index].end_time = end_time.toISOString();\n}\n\n// Define a saída da mensagem como o turno específico desejado (indexado com base no número do turno menos 1).\nmsg.payload = turnos_times[turno - 1];\nmsg.machine_id = config.machine_id\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 1840,
        "wires": [
            [
                "e7ef33bb136cf826",
                "3f55b40ca968d2f8",
                "506098072633bb4a",
                "5ac500946bb414f8",
                "c8f6770585391763"
            ]
        ]
    },
    {
        "id": "79a3848c57fe8ec9",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "monta resumo de tempos",
        "func": "const data = msg.payload;\n\n// Converte para o formato desejado, agrupando por `mode` e `state`\nconst result = data.reduce((acc, { mode, state, total_active_duration }) => {\n  if (!acc[mode]) acc[mode] = {}; // Cria a entrada para o mode se não existir\n  acc[mode][state] = (acc[mode][state] || 0) + Number(parseFloat(total_active_duration)); // Soma o total_active_duration\n  return acc;\n}, {});\n\n// verifica se a soma de todos os estados esta consistente com o tempo de turno transcorrifo\nlet config = flow.get(\"config\");\nlet turno = global.get(\"turno_\" + config.factory)\n//node.warn(turno);\n\n\n\n\n// Inicializa `msg.payload` com o objeto `omac`\nmsg.payload = { omac: result };\n\n\n\n// verifica o estado atual e altera o omac\nlet lastState = flow.get(\"lastState\");\n\nif (lastState && lastState[0] && lastState[0].payload) {\n  const mode = lastState[0].payload.machine_event.payload.mode;\n  const state = lastState[0].payload.machine_event.payload.state;\n\n  // Verifica se mode e state existem em msg.payload.omac antes de somar\n  if (msg.payload.omac[mode] && msg.payload.omac[mode][state] !== undefined) {\n    msg.payload.omac[mode][state] =\n      Number(parseFloat(msg.payload.omac[mode][state])) + Number(parseFloat(lastState[1]));\n  }\n}\n\n\n\n\nlet totalProductive = 0;\nlet totalNonProductive = 0;\n\n// Calcula os totais produtivos e não produtivos\nObject.entries(result).forEach(([mode, states]) => {\n  Object.entries(states).forEach(([state, activeMinutes]) => {\n    const minutes = Number(parseFloat(activeMinutes));\n\n    if (state === \"6\" && mode === \"2\") {\n      totalProductive += minutes;\n    } else {\n      totalNonProductive += minutes;\n    }\n  });\n});\n\n\n\n// Armazena `msg.payload` no fluxo para acesso posterior\nflow.set(\"temposOEE_parcial\", msg.payload);\n\n\n\n// Adiciona os somatórios ao `msg.payload`\nmsg.payload.somas = {\n  totalProductive: totalProductive,\n  totalNonProductive: totalNonProductive\n};\n\n\n\n// Retorna `msg` atualizado\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2810,
        "y": 1840,
        "wires": [
            [
                "6518c92d729e7ab2"
            ]
        ]
    },
    {
        "id": "a4a20651b24b808a",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "debug 661",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3050,
        "y": 1920,
        "wires": []
    },
    {
        "id": "f8100bef9a5c2f7f",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "consulta ultimo registro",
        "func": "msg.payload[0].payload = JSON.parse(msg.payload[0].payload)\nflow.set(\"lastState\", msg.payload);\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2690,
        "y": 1900,
        "wires": [
            [
                "a4a20651b24b808a"
            ]
        ]
    },
    {
        "id": "47fd2d43bed8df85",
        "type": "inject",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2300,
        "y": 2040,
        "wires": [
            [
                "c8857578e49c292f"
            ]
        ]
    },
    {
        "id": "0958cd207c59a124",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "debug 662",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2930,
        "y": 2040,
        "wires": []
    },
    {
        "id": "c8857578e49c292f",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "function 309",
        "func": "let horarios_turnos = global.get(\"turnos_times\");\nlet turno = flow.get(\"memo_turno\");\n\nlet turnos_times = JSON.stringify(horarios_turnos)\nturnos_times = JSON.parse(turnos_times);\n//node.warn(turnos_times);\n\nconst today = new Date();\nconst startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\nconst epochTime = Math.floor(startOfDay.getTime() / 1000); // Converte de milissegundos para segundos\n//node.warn(epochTime); // Exibe a data de hoje às 00:00 em epoch (segundos)\n\nfor (let index = 0; index < turnos_times.length; index++) {\n    delete turnos_times[index].created_at\n    delete turnos_times[index].updated_at\n    delete turnos_times[index].id\n\n    const timePart_start = turnos_times[index].start_time.substring(11, 19); // '06:00:00'\n    // Divide a hora, minuto e segundo\n    const [hours_s, minutes_s, seconds_s] = timePart_start.split(':').map(Number);\n    // Converte para segundos\n    const totalMinutes_start = ((hours_s * 3600) + (minutes_s * 60) + (seconds_s));\n\n\n    const timePart_end = turnos_times[index].end_time.substring(11, 19); // '06:00:00'\n    // Divide a hora, minuto e segundo\n    const [hours_e, minutes_e, seconds_e] = timePart_end.split(':').map(Number);\n    // Converte para segundos\n    const totalMinutes_end = ((hours_e * 3600) + (minutes_e * 60) + (seconds_e));\n\n    //node.warn(totalMinutes_start);\n    //node.warn(totalMinutes_end);\n\n    const start_time = new Date((epochTime + totalMinutes_start)*1000)\n    const end_time = new Date((epochTime + totalMinutes_end)*1000)\n\n  \n\n    turnos_times[index].start_time = start_time.toISOString()\n    turnos_times[index].end_time = end_time.toISOString()\n\n\n\n  \n\n}\n\nmsg.payload = turnos_times[turno-1]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 2040,
        "wires": [
            [
                "67712da339f498a9"
            ]
        ]
    },
    {
        "id": "3223c28d25bd2cea",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "debug 663",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3050,
        "y": 1980,
        "wires": []
    },
    {
        "id": "6518c92d729e7ab2",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "debug 664",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3050,
        "y": 1840,
        "wires": []
    },
    {
        "id": "382bc50a7f460c74",
        "type": "postgresql",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "",
        "query": "INSERT INTO public.machine_events\n(id_machine, payload)\nVALUES({{{msg.machine_id}}}, '{{{msg.payload}}}');",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1610,
        "y": 1840,
        "wires": [
            [
                "e413375ec6005573"
            ]
        ]
    },
    {
        "id": "e7ef33bb136cf826",
        "type": "postgresql",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n),\nfiltered_intervals AS (\n    SELECT \n        id_machine,\n        mode,\n        state,\n        \n        -- Calcula o início e o fim ajustados do evento, limitados pelo intervalo de filtro\n        GREATEST(timestamp at time zone 'UTC' at time zone 'GMT-3', '{{{msg.payload.start_time}}}'::timestamp) AS adjusted_start,\n        LEAST(next_timestamp at time zone 'UTC' at time zone 'GMT-3', '{{{msg.payload.end_time}}}'::timestamp) AS adjusted_end\n        \n    FROM \n        state_intervals\n    WHERE \n        next_timestamp at time zone 'UTC' at time zone 'GMT-3' > '{{{msg.payload.start_time}}}'::timestamp  -- start_filter\n        AND timestamp at time zone 'UTC' at time zone 'GMT-3' <'{{{msg.payload.end_time}}}'::timestamp     -- end_filter\n        AND id_machine = 5  -- substitua 1 pelo id_machine desejado\n)\nSELECT \n    id_machine,\n    mode,\n    state,\n    \n    -- Calcula o tempo ativo total ajustado dentro do intervalo\n    SUM(\n        CASE \n            WHEN adjusted_end > adjusted_start THEN \n                EXTRACT(EPOCH FROM (adjusted_end - adjusted_start)) / 60  -- Tempo em minutos\n            ELSE \n                0\n        END\n    ) AS total_active_duration\nFROM \n    filtered_intervals\nGROUP BY \n    id_machine,\n    mode,\n    state\nORDER BY \n    id_machine,\n    mode,\n    state;\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2290,
        "y": 1840,
        "wires": [
            [
                "9d852e60971392a2"
            ]
        ]
    },
    {
        "id": "67712da339f498a9",
        "type": "postgresql",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n)\nSELECT \n    id,\n    timestamp,\n    id_machine,\n    payload,\n    mode,\n    state,\n    next_timestamp,\n    -- Calcula o tempo que o estado ficou ativo\n    CASE \n        WHEN next_timestamp IS NOT NULL THEN \n            AGE(next_timestamp, timestamp)\n        ELSE \n            NULL\n    END AS active_duration\nFROM \n    state_intervals\nORDER BY \n    timestamp;",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2710,
        "y": 2040,
        "wires": [
            [
                "0958cd207c59a124"
            ]
        ]
    },
    {
        "id": "3f55b40ca968d2f8",
        "type": "postgresql",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "",
        "query": "SELECT *\nFROM machine_events\nWHERE id_machine =5\nORDER BY timestamp DESC\nlimit 1\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2290,
        "y": 1900,
        "wires": [
            [
                "f8100bef9a5c2f7f"
            ]
        ]
    },
    {
        "id": "506098072633bb4a",
        "type": "postgresql",
        "z": "319fb18efb4d6325",
        "d": true,
        "g": "9ec3a5729fd2677c",
        "name": "Lista FIltrada Tempo e Maquina",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n)\nSELECT \n    id,\n    timestamp AS start_time,       -- Hora inicial do estado\n    next_timestamp AS end_time,    -- Hora final do estado\n    id_machine,\n    payload,\n    mode,\n    state,\n    -- Calcula o tempo que o estado ficou ativo em minutos\n    CASE \n        WHEN next_timestamp IS NOT NULL THEN \n            EXTRACT(EPOCH FROM (next_timestamp - timestamp)) / 60  -- Tempo em minutos\n        ELSE \n            NULL\n    END AS active_duration\nFROM \n    state_intervals\nWHERE \n    -- Filtros aplicados na tabela de saída\n    next_timestamp > '{{{msg.payload.start_time}}}'::timestamp  -- start_filter\n    AND timestamp < '{{{msg.payload.end_time}}}'::timestamp   -- end_filter\n    AND id_machine = 1  -- substitua 123 pelo id_machine desejado\nORDER BY \n    timestamp;\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2350,
        "y": 1980,
        "wires": [
            [
                "3223c28d25bd2cea"
            ]
        ]
    },
    {
        "id": "9d852e60971392a2",
        "type": "delay",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2540,
        "y": 1840,
        "wires": [
            [
                "79a3848c57fe8ec9"
            ]
        ]
    },
    {
        "id": "5ac500946bb414f8",
        "type": "postgresql",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "",
        "query": "SELECT\n    SUM(CASE \n            WHEN (payload::jsonb->'machine_event'->'payload'->>'Programada')::boolean = true THEN \n                (payload::jsonb->'machine_event'->'payload'->>'tParada')::numeric \n            ELSE 0 \n        END) AS soma_programada,\n    SUM(CASE \n            WHEN (payload::jsonb->'machine_event'->'payload'->>'Programada')::boolean = false THEN \n                (payload::jsonb->'machine_event'->'payload'->>'tParada')::numeric \n            ELSE 0 \n        END) AS soma_nao_programada\nFROM public.appoint\nWHERE \n    to_timestamp((payload::jsonb->'machine_event'->'payload'->>'InicioParada')::bigint / 1000) AT TIME ZONE 'UTC' >= '{{{msg.payload.start_time}}}'\n    AND to_timestamp((payload::jsonb->'machine_event'->'payload'->>'FimParada')::bigint / 1000) AT TIME ZONE 'UTC' <= '{{{msg.payload.end_time}}}'\n    AND ((payload::jsonb->'machine_event'->'payload'->>'machine_id')::int) = 5\n    ",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2290,
        "y": 1780,
        "wires": [
            [
                "eb2b11a8b21abb6a"
            ]
        ]
    },
    {
        "id": "183e76213aae0d79",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "debug 665",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3050,
        "y": 1780,
        "wires": []
    },
    {
        "id": "eb2b11a8b21abb6a",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "SET Prog e Nao Pog",
        "func": "const soma_programada = Number(msg.payload[0].soma_programada) || 0\nconst soma_nao_programada = Number(msg.payload[0].soma_nao_programada) || 0\n\nconst sumProg_NProgr_parcial = [{\n    \"soma_programada\":soma_programada,\n    \"soma_nao_programada\": soma_nao_programada\n}]\n\nflow.set(\"sumProg_NProgr_parcial\", sumProg_NProgr_parcial);\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2760,
        "y": 1780,
        "wires": [
            [
                "183e76213aae0d79"
            ]
        ]
    },
    {
        "id": "c8f6770585391763",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "g": "9ec3a5729fd2677c",
        "name": "debug 666",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 2000,
        "wires": []
    },
    {
        "id": "9fe53d7ebcc94d9c",
        "type": "http request",
        "z": "319fb18efb4d6325",
        "g": "e15de62defa60b84",
        "name": "GET StopReasons",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1610,
        "y": 200,
        "wires": [
            [
                "2770fa64cd7ca246"
            ]
        ]
    },
    {
        "id": "2770fa64cd7ca246",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "e15de62defa60b84",
        "name": "function 310",
        "func": "const data = JSON.parse(msg.payload)\nlet id = Math.floor(msg.id_maq)\n\nif (Number.isNaN(id)) {\n    id = null\n}\n\n\nmsg.payload = {}\n\n\nfunction StopsByMachine(data, selectedId = null) {\n    const machineMap = new Map();\n    data.forEach(event => {\n        event.machines.forEach(machine => {\n            if (!machineMap.has(machine.id)) {\n                machineMap.set(machine.id, { id: machine.id, name: machine.name, stopReasons: [] });\n            }\n            machineMap.get(machine.id).stopReasons.push([event.plc_code, event.name, event.expected]);\n        });\n    });\n\n    if (selectedId !== null) {\n        return machineMap.has(selectedId) ? machineMap.get(selectedId) : null;\n    }\n\n    return Array.from(machineMap.values());\n}\n\n\n\nfunction listUniqueMachineNames(data) {\n\n    const machines = new Map();\n    data.forEach(event => {\n        event.machines.forEach(machine => {\n            machines.set(machine.id, machine.name);\n        });\n    });\n\n    const result = Array.from(machines).map(([id, name]) => ({ id, name }));\n\n    return result\n\n\n}\n\n\n\n// Chamar a função e imprimir o resultado\nmsg.payload.maquinas = listUniqueMachineNames(data);\n\n\n\n// Executar a função e imprimir o resultado\nmsg.payload.stopreasons = StopsByMachine(data, id);\n\nflow.set(\"stopreasons\", msg.payload.stopreasons);\n\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 200,
        "wires": [
            [
                "3e90799c6490a404"
            ]
        ]
    },
    {
        "id": "80c1ca38b64246f0",
        "type": "inject",
        "z": "319fb18efb4d6325",
        "g": "e15de62defa60b84",
        "name": "",
        "props": [],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1270,
        "y": 200,
        "wires": [
            [
                "7c484ab6794aa6ca"
            ]
        ]
    },
    {
        "id": "3e90799c6490a404",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "g": "e15de62defa60b84",
        "name": "debug 667",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 200,
        "wires": []
    },
    {
        "id": "7c484ab6794aa6ca",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "e15de62defa60b84",
        "name": "Config",
        "func": "\nlet config = flow.get(\"config\")\n\n//msg.id_maq = msg.req.params.id_maq\nmsg.id_maq = config.machine_id\n\n//node.warn(\"Aqui\");\n\nif (config.send == true) {\n  \n\n    msg.url = config.url + \"/stop_reasons.json\"\n    msg.headers = {}\n    msg.headers['Authorization'] = config.token_line\n    msg.payload = {}\n\n\nreturn msg\n\n\n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 200,
        "wires": [
            [
                "9fe53d7ebcc94d9c"
            ]
        ]
    },
    {
        "id": "a405bbf174d16c8d",
        "type": "inject",
        "z": "319fb18efb4d6325",
        "d": true,
        "g": "e15de62defa60b84",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "100",
        "topic": "",
        "x": 1270,
        "y": 260,
        "wires": [
            [
                "4ebd2d10c847f387"
            ]
        ]
    },
    {
        "id": "4ebd2d10c847f387",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "e15de62defa60b84",
        "name": "lista paradas",
        "func": "msg.payload = {}\n\n\nlet lista_paradas = [\n    {\n        \"id\": 2,\n        \"descr\": \"\",\n        \"cod_class\": 0, \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    }\n]\n\n\nconst paradas = flow.get(\"stopreasons\");\n\nnode.warn(lista_paradas);\nnode.warn(paradas);\n\nfor (let index = 0; index < paradas.stopReasons.length; index++) {\n    //node.warn(paradas.stopReasons[index][0]);\n    lista_paradas[index].id = 9999\n    lista_paradas[index].descr = paradas.stopReasons[index][1]\n    lista_paradas[index].cod_class = paradas.stopReasons[index][0]\n    lista_paradas[index].ZZZZZZZZZZudtZIA_Par3 = 5\n    lista_paradas[index].progr = paradas.stopReasons[index][2]\n}\n\n\nnode.warn(lista_paradas);\n\nmsg.payload.paradas = lista_paradas\n\nreturn msg\n\n\n// msg.payload = {\n//     \"id\": 23,\n//     \"descr\": \"\",\n//     \"cod_class\": 0,\n//     \"ZZZZZZZZZZudtZIA_Par3\": 0,\n//     \"progr\": false\n// }\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 260,
        "wires": [
            [
                "933bd68b1678cff7",
                "9dd97e20086c6f3e"
            ]
        ]
    },
    {
        "id": "933bd68b1678cff7",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "g": "e15de62defa60b84",
        "name": "debug 668",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850,
        "y": 320,
        "wires": []
    },
    {
        "id": "9dd97e20086c6f3e",
        "type": "eth-ip out",
        "z": "319fb18efb4d6325",
        "g": "e15de62defa60b84",
        "endpoint": "8d756ed66187c2a2",
        "variable": "cmdZIA",
        "program": "",
        "name": "",
        "x": 2080,
        "y": 280,
        "wires": []
    },
    {
        "id": "1cb9a42be3f3b307",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "b193acced37e40d0",
        "name": "Alarme",
        "func": "let memo_aux_id_falha = context.get(\"aux_id_falha\");\nif (msg.payload.aux_id_falha != memo_aux_id_falha) {\n    if (msg.payload.aux_id_falha != 0 && msg.payload.aux_id_falha != 9999) {\n        let config = flow.get(\"config\");\n        let dados_alm = {\n            TimeStamp: new Date(),\n            nameMachine: config.machine_name,\n            ID: msg.payload.aux_id_falha,\n            reason: msg.payload.lastalm\n        };\n        const d = new Date();\n        let minutes = d.getMinutes();\n        let agora = new Date()\n        msg.payload = {\n            \"authenticity_token\": \"L3uhfD4yxArDD6++xrFmFX9LLKfX5PyMstpcUL0zi6SRrHAzTqfBCj1iKfYp4o6GLK9emMZYiAmxF1T9C7BQ==\",\n            \"machine_event\": {\n                \"timestamp(1i)\": agora.getFullYear().toString(),\n                \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n                \"timestamp(3i)\": agora.getDate().toString(),\n                \"timestamp(4i)\": agora.getHours().toString(),\n                \"timestamp(5i)\": agora.getMinutes().toString(),\n                \"event_type_id\": 5,\n                //        \"timestamp(3i)\": d.getDay(),\n                //        \"timestamp(2i)\": d.getMonth(),\n                //        \"timestamp(1i)\": d.getFullYear(),\n                //        \"timestamp(4i)\": d.getHours(),\n                //        \"timestamp(5i)\": d.getMinutes(),\n                \"payload\": dados_alm\n            }\n        }\n        context.set(\"aux_id_falha\", dados_alm.ID);\n        return msg\n    }\n}\ncontext.set(\"aux_id_falha\", msg.payload.aux_id_falha);\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 2640,
        "wires": [
            [
                "442674269723b910"
            ]
        ]
    },
    {
        "id": "d0a19e4100730dc5",
        "type": "http request",
        "z": "319fb18efb4d6325",
        "g": "b193acced37e40d0",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1530,
        "y": 2640,
        "wires": [
            [
                "43ba8b42144fd6d3"
            ]
        ]
    },
    {
        "id": "43ba8b42144fd6d3",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "g": "b193acced37e40d0",
        "name": "debug 669",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1950,
        "y": 2640,
        "wires": []
    },
    {
        "id": "442674269723b910",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "b193acced37e40d0",
        "name": "function 311",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 2640,
        "wires": [
            [
                "d0a19e4100730dc5",
                "82e23587a27de914"
            ]
        ]
    },
    {
        "id": "fb0dfef5d75edb82",
        "type": "link in",
        "z": "319fb18efb4d6325",
        "g": "887a1fcb8b0f89cc",
        "name": "link in 31",
        "links": [
            "615e1f011ffb0b71"
        ],
        "x": 285,
        "y": 1620,
        "wires": [
            [
                "e13ff83d45712ac6"
            ]
        ]
    },
    {
        "id": "e2f8face4659b7d8",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "887a1fcb8b0f89cc",
        "name": "function 339",
        "func": "const config = flow.get(\"config\");\nconst guilt = msg.payload[config.machine_name]\nlet name_var_global = \"plc\" + config.machine_name\n\n\n\nif (guilt) {\n    node.warn(\"my warning\");\n    //atualiza a hora da parada com a hora que a enchedora (gargalo) parou\n    let parada = flow.get(\"parada\");\n    const parada_linha = JSON.parse(JSON.stringify(parada))\n    parada_linha.hora = new Date().getTime()\n    parada_linha.machine_id = config.machine_id\n    parada_linha.machine_name = config.machine_name\n    parada_linha.active = true\n    global.set(\"parada_linha\", parada_linha )\n    return msg;\n\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1620,
        "wires": [
            [
                "4320661dbc4c4892"
            ]
        ]
    },
    {
        "id": "e13ff83d45712ac6",
        "type": "delay",
        "z": "319fb18efb4d6325",
        "g": "887a1fcb8b0f89cc",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 410,
        "y": 1620,
        "wires": [
            [
                "e2f8face4659b7d8"
            ]
        ]
    },
    {
        "id": "88ed49018548ceb3",
        "type": "link in",
        "z": "319fb18efb4d6325",
        "g": "887a1fcb8b0f89cc",
        "name": "link in 32",
        "links": [
            "31d753b6c2f98a0f"
        ],
        "x": 285,
        "y": 1680,
        "wires": [
            [
                "317a4a6ef811de46"
            ]
        ]
    },
    {
        "id": "317a4a6ef811de46",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "887a1fcb8b0f89cc",
        "name": "function 340",
        "func": "let config = flow.get(\"config\");\nlet retorno = new Date()\nlet parada = global.get(\"parada_linha\");\n\nif (parada.machine_id == config.machine_id) {\n\n    let tParada = (retorno.getTime() - parada.hora) / 1000 / 60\n    //let paradasSoma = flow.get(\"paradasSoma\") || flow.set(\"paradasSoma\", { \"Prog\": 0, \"Nprog\": 0 })\n    let turno = global.get(\"turno_\" + config.factory)\n    let machine_event = {}\n\n    machine_event = {\n        \"timestamp(1i)\": retorno.getFullYear().toString(),\n        \"timestamp(2i)\": (retorno.getMonth() + 1).toString(),\n        \"timestamp(3i)\": retorno.getDate().toString(),\n        \"timestamp(4i)\": retorno.getHours().toString(),\n        \"timestamp(5i)\": retorno.getMinutes().toString(),\n        \"timestamp(6i)\": retorno.getSeconds().toString(),\n        \"event_type_id\": 4,\n        \"payload\": {\n            \"aux_id_falha\": parada.aux_id_falha,\n            \"InicioParada\": parada.hora,\n            \"FimParada\": new Date().getTime(),\n            \"tParada\": Number(tParada.toFixed(2)),\n            \"ID\": isNaN(Number(parada.statechanged_id)) ? 0 : Number(parada.statechanged_id), // Garantir que ID seja um número\n            \"Reason\": parada.statechanged_reason,\n            \"ModeReason\": parada.mode,\n            \"StateReason\": parada.state || 0,\n            \"Programada\": parada.programada,\n            \"turno_atual\": turno.turno,\n            \"equip\": config.machine_name,\n            \"machine_id\": config.machine_id,\n            \"guilt\": false\n        }\n    }\n\n    parada.active = false\n    msg.payload.machine_event = machine_event\n\n\n\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1680,
        "wires": [
            [
                "0e1316e2ab8c6a8b"
            ]
        ]
    },
    {
        "id": "9f6820aad0275b93",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "g": "887a1fcb8b0f89cc",
        "name": "debug 720",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1680,
        "wires": []
    },
    {
        "id": "0e1316e2ab8c6a8b",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "887a1fcb8b0f89cc",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n\n    //msg.payload.machine_event.payload.ID = 999;\n\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1680,
        "wires": [
            [
                "4a18b37691b8aa3c"
            ]
        ]
    },
    {
        "id": "4320661dbc4c4892",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "g": "887a1fcb8b0f89cc",
        "name": "debug 721",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1620,
        "wires": []
    },
    {
        "id": "d22f0e55f0038195",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "887a1fcb8b0f89cc",
        "name": "Update tempo parada linha",
        "func": "let parada_linha = global.get(\"parada_linha\");\n\nif (parada_linha.active) {\n    let retorno = new Date()\n    \n    let tParada = (retorno.getTime() - parada_linha.hora) / 1000 / 60\n    parada_linha.tParadaAtual = tParada\n\n\n\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "4a18b37691b8aa3c",
        "type": "http request",
        "z": "319fb18efb4d6325",
        "g": "887a1fcb8b0f89cc",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 780,
        "y": 1680,
        "wires": [
            [
                "9f6820aad0275b93"
            ]
        ]
    },
    {
        "id": "2ac852f2767c4425",
        "type": "eth-ip in",
        "z": "319fb18efb4d6325",
        "endpoint": "64e05496ea276cf8",
        "mode": "all",
        "variable": "diProductionCounter",
        "program": "",
        "name": "PLC_CFE",
        "gatherMetrics": true,
        "includeTimestamp": true,
        "x": 120,
        "y": 220,
        "wires": [
            [
                "fdee62e0d4f0be21",
                "07e561e42c5f0415"
            ]
        ]
    },
    {
        "id": "f29b26dcde0f3fd7",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "name": "debug 735",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 220,
        "wires": []
    },
    {
        "id": "fdee62e0d4f0be21",
        "type": "function",
        "z": "319fb18efb4d6325",
        "name": "function 352",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet mode\n\n///alteracao de mode - gambia\nswitch (msg.payload.machine_mode.value) {\n    case 0:\n        mode = 1\n        break;\n    case 1:\n        mode = 2\n        break;\n    case 2:\n        mode = 1\n        break;\n    default:\n        mode = 1\n\n}\n\n\n\nlet plc = {\n    xResetCounter: msg.payload.xResetCounter.value,\n    xResetReject_r1: msg.payload.xResetReject_r1.value,\n    xResetReject_r2: msg.payload.xResetReject_r2.value,\n    aux_id_falha: msg.payload.aux_id_falha.value,\n    iActualRecipe: msg.payload.iActualRecipe.value,\n    strRecipeName: msg.payload.recipe_name.value,\n    mode: mode,\n    state: msg.payload.machine_state.value,\n    rActualSpeed: msg.payload.rActualSpeed,\n    diCounterReject_r1: msg.payload.diCounterReject_r1.value,\n    diCounterReject_r2: msg.payload.diCounterReject_r2.value,\n    diProductionCounter: msg.payload.diProductionCounter.value,\n    starved: msg.payload.machine_starverd.value,\n    blocked: msg.payload.machine_blocked.value\n\n\n\n}\n\n\nif (plc.blocked && plc.state == 5) {\n    plc.aux_id_falha = 300\n}\n\n\n\nglobal.set(name_var_global, plc);\n\nmsg.payload = plc\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 220,
        "wires": [
            [
                "f29b26dcde0f3fd7",
                "cf396e440f60f070"
            ]
        ]
    },
    {
        "id": "07e561e42c5f0415",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "name": "debug 736",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 300,
        "wires": []
    },
    {
        "id": "4c92a9cbe250b15d",
        "type": "inject",
        "z": "319fb18efb4d6325",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1420,
        "y": 500,
        "wires": [
            [
                "61d399554e63b05f"
            ]
        ]
    },
    {
        "id": "84202b3f42773fb5",
        "type": "eth-ip out",
        "z": "319fb18efb4d6325",
        "g": "ec9a77749b786146",
        "endpoint": "64e05496ea276cf8",
        "variable": "xResetReject_r1",
        "program": "",
        "name": "",
        "x": 2290,
        "y": 940,
        "wires": []
    },
    {
        "id": "eeec2d89a85644d6",
        "type": "delay",
        "z": "319fb18efb4d6325",
        "g": "ec9a77749b786146",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1880,
        "y": 940,
        "wires": [
            [
                "cc39ba1eccc3a527"
            ]
        ]
    },
    {
        "id": "cc39ba1eccc3a527",
        "type": "function",
        "z": "319fb18efb4d6325",
        "g": "ec9a77749b786146",
        "name": "function 354",
        "func": "msg.payload = false\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 980,
        "wires": [
            [
                "25acaa86aaad2f48",
                "84202b3f42773fb5"
            ]
        ]
    },
    {
        "id": "17319e1bacd9482e",
        "type": "file in",
        "z": "319fb18efb4d6325",
        "name": "Lista Falhas",
        "filename": "alm_list_05",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": true,
        "x": 410,
        "y": 160,
        "wires": [
            [
                "bbe52ba50295536f"
            ]
        ]
    },
    {
        "id": "1492495f0177c4bb",
        "type": "inject",
        "z": "319fb18efb4d6325",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "17319e1bacd9482e"
            ]
        ]
    },
    {
        "id": "4bf6a270f1143f1d",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "name": "debug 741",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 160,
        "wires": []
    },
    {
        "id": "bbe52ba50295536f",
        "type": "function",
        "z": "319fb18efb4d6325",
        "name": "function 357",
        "func": "flow.set(\"alm_list\", msg.payload);\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 160,
        "wires": [
            [
                "4bf6a270f1143f1d"
            ]
        ]
    },
    {
        "id": "cf396e440f60f070",
        "type": "function",
        "z": "319fb18efb4d6325",
        "name": "find line",
        "func": "let config = flow.get(\"config\");\n\nlet name_var_global = \"plc\" + config.machine_name\n\n\nlet plc = msg.payload\n\nlet cod = msg.payload.aux_id_falha\n\nconst lista_falha = flow.get(\"alm_list\");\n\n\nconst lines = lista_falha.split('\\n');\n//node.warn(lines);\n\n\n// Percorrer cada linha e dividi-la em colunas\nlines.forEach(line => {\n    const columns = line.split(',');\n    if (columns.length > 1) {\n        var id = columns[0].trim();\n        var desc_alm = columns[1].trim();\n        var desc_classe = columns[2].trim();\n        var classe = columns[3].trim();\n        var programadada = columns[4].trim();\n    }\n\n    if (cod == id) {\n        let str_cod = desc_classe\n        let class_cod = classe\n        let programada = Boolean(Number(programadada))\n        plc.statechanged_id = class_cod\n        plc.statechanged_reason = str_cod\n        plc.programada = programada\n        plc.lastalm = desc_alm\n\n        return\n\n\n\n    }\n\n    \n\n});\n\n\n\nplc = JSON.parse(JSON.stringify(plc))\nglobal.set(name_var_global, plc);\nmsg.payload = plc\nreturn msg\n\n\n\n//return msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 320,
        "wires": [
            [
                "ef500662a63f9242",
                "0bd6d8002cd33d50",
                "ac2e02cfdad13a27",
                "059ce5b3fd52f3b4",
                "38cccc59ebd5094f"
            ]
        ]
    },
    {
        "id": "ef500662a63f9242",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.aux_id_falha",
        "statusType": "msg",
        "x": 990,
        "y": 320,
        "wires": []
    },
    {
        "id": "0bd6d8002cd33d50",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.statechanged_id",
        "statusType": "msg",
        "x": 990,
        "y": 400,
        "wires": []
    },
    {
        "id": "ac2e02cfdad13a27",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.statechanged_reason",
        "statusType": "msg",
        "x": 990,
        "y": 460,
        "wires": []
    },
    {
        "id": "059ce5b3fd52f3b4",
        "type": "debug",
        "z": "319fb18efb4d6325",
        "name": "debug 743",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload.lastalm",
        "statusType": "msg",
        "x": 990,
        "y": 520,
        "wires": []
    },
    {
        "id": "38cccc59ebd5094f",
        "type": "link out",
        "z": "319fb18efb4d6325",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "4ad1d612a31e546d",
            "ffbb4c5d7c5fb705"
        ],
        "x": 885,
        "y": 560,
        "wires": []
    },
    {
        "id": "fb9d51da68b25f9b",
        "type": "debug",
        "z": "d7706bceda63881b",
        "name": "debug 671",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 2540,
        "wires": []
    },
    {
        "id": "927dae0f624f5d67",
        "type": "link in",
        "z": "d7706bceda63881b",
        "name": "link in 13",
        "links": [
            "7dd162fd89b8cee5"
        ],
        "x": 475,
        "y": 2660,
        "wires": [
            [
                "e6ff1cf767ea7980"
            ]
        ]
    },
    {
        "id": "415c52a7f75618f0",
        "type": "inject",
        "z": "d7706bceda63881b",
        "g": "8970fcc8e08ef1db",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "19884d9aeee24f9a"
            ]
        ]
    },
    {
        "id": "19884d9aeee24f9a",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "8970fcc8e08ef1db",
        "name": "CONFIG",
        "func": "//configuracaao de linha\n\nlet config = {}\n\nconfig.machine_name = \"gfx\"\n\nconfig.factory = 1\nconfig.machine_id = 6\nconfig.token_machine = \"Bearer \" + \"bb5d7f6d8dc51b08ee61429fd1760ef8b64a3a35\"\nconfig.token_line = \"Bearer \" + \"00bc757a398cc98d299fd6fc2119929c48647db9\"\nconfig.url = \"http://127.0.0.1:3003\"\nconfig.url_machine = config.url + \"/machine_events\"\nconfig.url_line = config.url + \"/production_line_events\"\nconfig.send = true /// habilita POST\n\nflow.set(\"config\", config);\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 120,
        "wires": [
            [
                "19fe3a1df540a3df"
            ]
        ]
    },
    {
        "id": "19fe3a1df540a3df",
        "type": "debug",
        "z": "d7706bceda63881b",
        "g": "8970fcc8e08ef1db",
        "name": "debug 672",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 120,
        "wires": []
    },
    {
        "id": "2e07ea909d7b84f0",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "4175d2a4d29b6925",
        "name": "Turnos, Tempos Acumulados",
        "func": "\nlet msg1 = new Object()\nlet msg2 = new Object()\nlet msg3 = new Object()\nlet config = flow.get(\"config\");\nlet a\n\n\n\nlet turno = global.get(\"turno_\" + config.factory)\nlet memo_turno = flow.get(\"memo_turno\") || 0\n\n\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\n\nlet sm_atual = {\n    \"state\": dadosPlc.state || 2,\n    \"mode\": dadosPlc.mode || 2\n}\nflow.set(\"sm_atual\", sm_atual);\nlet sm_anterior = flow.get(\"sm_anterior\") || flow.set(\"sm_anterior\", sm_atual)\n\n\nlet tempoTranscorrido\nif (memo_turno == turno.turno) { //&& turno.turno != 0\n    a = 1\n\n\n    flow.set(\"tempoTranscorrido\", turno.tempoTranscorrido);\n    tempoTranscorrido = turno.tempoTranscorrido\n\n    calculosOEE()\n\n} else {\n\n    a = 2\n\n    tempoTranscorrido = flow.get(\"tempoTranscorrido\") || 0\n\n}\n\n\n\nlet parada = flow.get(\"parada\") || { \"hora\": 0, \"state\": \"0\", \"mode\": \"0\", \"active\": false, \"tParadaAtual\": 0 }\n\n\n\n// Atualiza o tempo da parada atual\nif ((sm_atual.state != 6 || sm_atual.mode != 2) && turno.turno != 0) {\n    let agora = new Date().getTime()\n    let tParadaAtual = agora - parada.hora\n    parada.tParadaAtual = tParadaAtual / 60 / 1000\n    flow.set(\"parada\", parada);\n    global.set(\"parada\" + name_var_global, parada);\n}\n\n\n\n\n// Aciona saida indicando que houve mudanca do modo de operacao\nif (sm_atual.mode != sm_anterior.mode || sm_atual.state != sm_anterior.state) {\n    //Verifica se a maquina saiu do estado Execute\n    //Sempre que a maquina sair de execute devemos anotar o horario da parada\n    if ((sm_anterior.state == 6 && sm_anterior.mode == 2) && (sm_atual.state != sm_anterior.state || sm_atual.mode != sm_anterior.mode)) {\n        console.log(\"NÃO PRODUZINDO\")\n        anotaInicioParada()\n        msg2 = null\n    } else if ((sm_anterior.state != 6 || sm_anterior.mode != 2) && (sm_atual.state == 6 && sm_atual.mode == 2)) {\n        console.log(\"PRODUZINDO\")\n        msg2.payload = consolidaParada()\n        calculosOEE()\n        flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n    }\n    flow.set(\"sm_anterior\", sm_atual)\n\n\n    return [null, msg2]\n}\n\n\n\n\n\n/// rotinas que devem ser executadas na troca de turno\nif (memo_turno != turno.turno) {\n    msg1 = null\n    msg2 = null\n\n    console.log(\"TrocaTurno\")\n    node.warn(\"TrocaTurno\")\n\n    if (memo_turno != 0) {\n        console.log(\"Fim turno \" + memo_turno)\n        msg1 = { payload: 1 }\n\n        if (parada.active == true) { // se no fim do turno estiver em parada consolida\n            msg2 = {}\n            msg2.payload = {}\n            msg2.payload = consolidaParada()\n\n            calculosOEE()\n\n            flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n            if (turno.turno != 0) { // se entrar em um novo turno reinicia a parada\n                console.log(\"Inicio turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n                anotaInicioParada()\n\n            }\n        } else {\n            if (turno.turno != 0) {\n                console.log(\"Iniccio Turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n            }\n        }\n\n\n        calculosOEE()\n        let calculoOEE = flow.get(\"calculoOEE\");\n        flow.set(\"fimTurnoOEE\", calculoOEE);\n        flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n\n\n\n    } else if (memo_turno == 0) {\n        msg1 = null\n        console.log(\"verificaAnotacaoTurno\") // verifica e cria msg2 se necssario e zera anotacao de parada\n\n        verificaAnotacaoInicioTurno()\n\n    } else {\n\n        msg1 = null\n    }\n\n    //anota registro de turno\n\n\n\n    flow.set(\"memo_turno\", turno.turno)\n\n    return [msg1, msg2]\n}\nmsg3.payload = calculosOEE()\nmsg3.payload.machine_event.event_type_id = 6\nreturn [null, null, msg3]\n\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n\nfunction anotaInicioParada() {\n\n    console.log(\"inicio parada\")\n    node.warn(name_var_global);\n\n    let iParada = global.get(name_var_global);\n    let parada = {\n        \"hora\": new Date(),\n        \"state\": sm_atual.state || 0,\n        \"mode\": sm_atual.mode\n    }\n    flow.set(\"parada\", {\n        \"aux_id_falha\": Number(dadosPlc.aux_id_falha),\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true,\n        \"statechanged_id\": iParada.statechanged_id,\n        \"statechanged_reason\": iParada.statechanged_reason,\n        \"programada\": new Boolean(iParada.programada),\n        \"justifica\": false\n\n    });\n    global.set(\"parada\" + name_var_global, {\n        \"aux_id_falha\": Number(dadosPlc.aux_id_falha),\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true,\n        \"statechanged_id\": iParada.statechanged_id,\n        \"statechanged_reason\": iParada.statechanged_reason,\n        \"programada\": new Boolean(iParada.programada),\n        \"justifica\": false,\n        \"machine_id\": config.machine_id,\n        \"Equip\": config.machine_name\n\n    });\n    //console.clear()\n    //console.log(\"Inicio da Parada:\" + parada.hora.getHours() + \":\" + parada.hora.getMinutes())\n    return {\n        \"InicioParada\": parada.hora.getTime(),\n        \"FimParada\": 0,\n        \"tParada\": 0,\n        \"ID\": \"ID\",\n        \"Reason\": null,\n        \"ModeReason\": new Number(parada.mode),\n        \"StateReason\": new Number(parada.state) || 0,\n        \"Programada\": null,\n        \"Equip\": name_var_global\n    }\n}\n\nfunction consolidaParada() {\n    //////////////////////////////////////////////////////////////////////\n    //GAMBIA PARA ATRASAR O REGISTRO//////////////////////////////////////\n    //////////////////////////////////////////////////////////////////////\n\n    flow.set(\"ignora_registro_linha\", 20);\n    flow.set(\"ignora_registro_maquina\", 20);\n\n    ////fim da gambia///////////////////////////////////////////////////\n\n\n    console.log(\"fim parada\")\n    let retorno = new Date()\n    let parada = flow.get(\"parada\") || 0\n    let tParada = (retorno.getTime() - parada.hora) / 1000 / 60\n    let paradasSoma = flow.get(\"paradasSoma\") || flow.set(\"paradasSoma\", { \"Prog\": 0, \"Nprog\": 0 })\n\n    if (dadosPlc.programada == \"true\") {\n        paradasSoma.Prog = paradasSoma.Prog + tParada\n    } else {\n        paradasSoma.Nprog = paradasSoma.Nprog + tParada\n    }\n    flow.set(\"paradasSoma\", paradasSoma);\n    parada.active = false\n    flow.set(\"parada\", parada);\n    global.set(\"parada\" + name_var_global, parada);\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    return {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 8,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": {\n                \"aux_id_falha\": parada.aux_id_falha,\n                \"InicioParada\": parada.hora,\n                \"FimParada\": retorno.getTime(),\n                \"tParada\": Number(tParada.toFixed(2)),\n                \"ID\": isNaN(Number(parada.statechanged_id)) ? 0 : Number(parada.statechanged_id), // Garantir que ID seja um número\n                \"Reason\": parada.statechanged_reason,\n                \"ModeReason\": parada.mode,\n                \"StateReason\": parada.state || 0,\n                \"Programada\": parada.programada,\n                \"turno_atual\": turno.turno,\n                \"equip\": config.machine_name,\n                \"machine_id\": config.machine_id\n            }\n        }\n    }\n}\n\nfunction calculosOEE() {\n\n\n    //msg.filename = \".\\supZIA\\registroTurno_\" + name_var_global + \".json\"\n\n    var sumProg_NProgr = flow.get(\"sumProg_NProgr\") || [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }];\n\n    let dados_oee = {}\n    let tNProg = Number(sumProg_NProgr[0].soma_nao_programada)\n    let tProg = Number(sumProg_NProgr[0].soma_programada)\n    let tProducao = Number(tempoTranscorrido - (tProg + tNProg))\n\n    node.status({ fill: \"red\", shape: \"ring\", text: dados_oee.percDisp });\n\n    if (dadosPlc.mode == 2 && dadosPlc.state == 6) {\n        dados_oee.statusMachine = \"Rodando\"\n    } else dados_oee.statusMachine = \"Parada\"\n\n    ////////////\n    dados_oee.statusConexao = true\n    dados_oee.mode = Number(dadosPlc.mode)\n    dados_oee.state = Number(dadosPlc.state) || 0\n    dados_oee.rNominalSpeed = Number(dadosPlc.rNominalSpeed)\n    dados_oee.rSetSpeed = Number(dadosPlc.rSetSpeed)\n    dados_oee.rActualSpeed = Number(dadosPlc.rActualSpeed)\n    dados_oee.strRecipeName = String(dadosPlc.strRecipeName)\n    dados_oee.strBottle = String(dadosPlc.strBottle)\n    dados_oee.strCap = String(dadosPlc.strCap)\n    dados_oee.diProductionCounter = Number(dadosPlc.diProductionCounter)\n    dados_oee.diCounterReject_r1 = Number(dadosPlc.diCounterReject_r1)\n    dados_oee.diCounterReject_r2 = Number(dadosPlc.diCounterReject_r2)\n    dados_oee.iActualRecipe = Number(dadosPlc.iActualRecipe)\n    dados_oee.tempoTranscorrido = Number(tempoTranscorrido.toFixed(2))\n    dados_oee.percDisp = (tProducao) / (tempoTranscorrido - tProg) * 100\n\n    var teste = {\n        tProducao: tProducao,\n        tempoTranscorrido: tempoTranscorrido,\n        tProg: tProg,\n        tNProg: tNProg,\n\n\n\n    }\n    dados_oee.teste = teste;\n\n    node.status({ fill: \"red\", shape: \"ring\", text: JSON.stringify(teste) });\n\n    dados_oee.percDisp = Number(dados_oee.percDisp.toFixed(2))\n    dados_oee.percEfic = (dados_oee.diProductionCounter) / ((tProducao * dados_oee.rNominalSpeed) / 60) * 100\n    dados_oee.percEfic = Number(dados_oee.percEfic.toFixed(2))\n    dados_oee.percQual = (((dados_oee.diProductionCounter) - (dados_oee.diCounterReject_r1 + dados_oee.diCounterReject_r2)) / dados_oee.diProductionCounter) * 100\n    dados_oee.percQual = isNaN(Number(dados_oee.percQual)) ? 0 : Number(Number(dados_oee.percQual).toFixed(2));\n    dados_oee.percOEE = dados_oee.percDisp * dados_oee.percEfic * dados_oee.percQual / 10000\n    dados_oee.percOEE = Number(dados_oee.percOEE.toFixed(2))\n    dados_oee.turno = Number(turno.turno)\n    dados_oee.tempoParadaProgramada = Number(tProg.toFixed(2))\n    dados_oee.tempoParadaNaoProgramada = Number(tNProg.toFixed(2))\n    dados_oee.dimetaProduzidos = 100000\n    dados_oee.rmetaPerf = 95.00\n    dados_oee.rmetaDisp = 90.00\n    dados_oee.rmetaQual = 99.00\n    dados_oee.rmetaOEE = 90.00\n    dados_oee.equip = String(config.machine_name)\n\n    ////teste limites - ocorre quando o node é desligado\n    if (dados_oee.percDisp < 0) {\n        dados_oee.percDisp = 0\n    } else if (dados_oee.percDisp > 100) {\n        dados_oee.percDisp = 100\n    }\n\n    if (dados_oee.percEfic < 0) {\n        dados_oee.percEfic = 0\n    } else if (dados_oee.percEfic > 100) {\n        dados_oee.percEfic = 100\n    }\n\n    if (dados_oee.percQual < 0) {\n        dados_oee.percQual = 0\n    } else if (dados_oee.percQual > 100) {\n        dados_oee.percQual = 100\n    }\n\n    if (dados_oee.percOEE < 0) {\n        dados_oee.percOEE = 0\n    } else if (dados_oee.percOEE > 100) {\n        dados_oee.percOEE = 100\n    }\n\n\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    let calculo = {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 3,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": dados_oee\n        }\n    }\n\n    flow.set(\"calculoOEE\", calculo);\n\n\n    return calculo\n\n\n\n}\n\nfunction verificaAnotacao() {\n\n}\n\n\nfunction verificaAnotacaoInicioTurno() {\n    console.log(\"Inicio Turno \" + turno.turno)\n    ////Zera os valores para iniciar novo turno\n    flow.set(\"sumProg_NProgr\", [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }]);\n    if (sm_atual.state == 6 && sm_atual.mode == 2) {\n        //PRODUZINDO\n    } else {\n        //NAO PRODUZINDO\n        anotaInicioParada()\n        msg2 = null\n    }\n\n\n\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1020,
        "wires": [
            [
                "b05feb9ea38e71d0"
            ],
            [
                "44eaa812a195d7a8"
            ],
            [
                "67932e2aa14376dd",
                "99bd749883f0803c"
            ]
        ]
    },
    {
        "id": "b539c42d534251bb",
        "type": "inject",
        "z": "d7706bceda63881b",
        "g": "4175d2a4d29b6925",
        "name": "cycle",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 290,
        "y": 1100,
        "wires": [
            [
                "2e07ea909d7b84f0",
                "91586a3b8afe8a21",
                "3daf074a4e9c4eea"
            ]
        ]
    },
    {
        "id": "b05feb9ea38e71d0",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "3eb71f34d22c0e97",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 860,
        "wires": [
            [
                "fa0c9c27bcb6e8f4"
            ]
        ]
    },
    {
        "id": "2d685a62e8769b82",
        "type": "comment",
        "z": "d7706bceda63881b",
        "g": "3eb71f34d22c0e97",
        "name": "Registro Troca de Turno",
        "info": "",
        "x": 1200,
        "y": 760,
        "wires": []
    },
    {
        "id": "ef428a25184341a0",
        "type": "http request",
        "z": "d7706bceda63881b",
        "g": "3eb71f34d22c0e97",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "",
                "valueType": "other",
                "valueValue": ""
            }
        ],
        "x": 1890,
        "y": 860,
        "wires": [
            [
                "ea22308fadaf976b"
            ]
        ]
    },
    {
        "id": "ea22308fadaf976b",
        "type": "debug",
        "z": "d7706bceda63881b",
        "g": "3eb71f34d22c0e97",
        "name": "debug 673",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2110,
        "y": 860,
        "wires": []
    },
    {
        "id": "8ac4a49883b45f44",
        "type": "comment",
        "z": "d7706bceda63881b",
        "g": "3eb71f34d22c0e97",
        "name": "Turno + Tempo Transcorrido",
        "info": "",
        "x": 1220,
        "y": 920,
        "wires": []
    },
    {
        "id": "fa0c9c27bcb6e8f4",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "3eb71f34d22c0e97",
        "name": "Get fimTurnoOEE",
        "func": "msg.payload = flow.get(\"fimTurnoOEE\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 860,
        "wires": [
            [
                "f7240f0995d6f63f",
                "a365587f6581ce4a"
            ]
        ]
    },
    {
        "id": "f7240f0995d6f63f",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "3eb71f34d22c0e97",
        "name": "statusMachineId",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.machine_event.payload.statusMachineId = 2\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.machine_event.payload.statusMachineId = 2\n            break;\n        case 5:\n            msg.payload.machine_event.payload.statusMachineId = 5\n            break;\n        case 6:\n            msg.payload.machine_event.payload.statusMachineId = 1\n            break;\n        case 9:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 860,
        "wires": [
            [
                "ef428a25184341a0"
            ]
        ]
    },
    {
        "id": "e898b054e863a2eb",
        "type": "comment",
        "z": "d7706bceda63881b",
        "g": "3eb71f34d22c0e97",
        "name": "Reset Counters",
        "info": "",
        "x": 1380,
        "y": 1060,
        "wires": []
    },
    {
        "id": "ce4af9ed644479d9",
        "type": "inject",
        "z": "d7706bceda63881b",
        "g": "3eb71f34d22c0e97",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1210,
        "y": 1000,
        "wires": [
            [
                "e7561277ed0e0876"
            ]
        ]
    },
    {
        "id": "e7561277ed0e0876",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "3eb71f34d22c0e97",
        "name": "function 313",
        "func": "const cmdResetAtivo = flow.get(\"cmdResetAtivo\");\nif (cmdResetAtivo) {\n    return msg\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1000,
        "wires": [
            [
                "a365587f6581ce4a"
            ]
        ]
    },
    {
        "id": "0e142747d7455984",
        "type": "function",
        "z": "d7706bceda63881b",
        "d": true,
        "g": "3eb71f34d22c0e97",
        "name": "function 314",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nnode.warn(dadosPlc.diProductionCounter);\n\nif (dadosPlc.diProductionCounter!='0') {\n    return msg\n}\n\nlet cmdResetAtivo = flow.get(\"cmdResetAtivo\");\ncmdResetAtivo = false\nflow.set(\"cmdResetAtivo\", cmdResetAtivo);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 1040,
        "wires": [
            [
                "5851d8826a3c7f93",
                "a365587f6581ce4a"
            ]
        ]
    },
    {
        "id": "5851d8826a3c7f93",
        "type": "debug",
        "z": "d7706bceda63881b",
        "g": "3eb71f34d22c0e97",
        "name": "debug 674",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 1040,
        "wires": []
    },
    {
        "id": "67932e2aa14376dd",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "2d8dda71dd2a71be",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1540,
        "wires": [
            [
                "d1a72279831373ed",
                "22732d4fcad62924"
            ]
        ]
    },
    {
        "id": "20b42cb85f9e6b68",
        "type": "http request",
        "z": "d7706bceda63881b",
        "g": "2d8dda71dd2a71be",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2070,
        "y": 1560,
        "wires": [
            [
                "ad680ad5076950ec"
            ]
        ]
    },
    {
        "id": "ad680ad5076950ec",
        "type": "debug",
        "z": "d7706bceda63881b",
        "g": "2d8dda71dd2a71be",
        "name": "debug 675",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2290,
        "y": 1560,
        "wires": []
    },
    {
        "id": "d1a72279831373ed",
        "type": "delay",
        "z": "d7706bceda63881b",
        "g": "2d8dda71dd2a71be",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "120",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1560,
        "y": 1520,
        "wires": [
            [
                "78cd47ba2f1a9fec"
            ]
        ]
    },
    {
        "id": "78cd47ba2f1a9fec",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "2d8dda71dd2a71be",
        "name": "statusMachineId",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.machine_event.payload.statusMachineId = 3\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        case 5:\n            msg.payload.machine_event.payload.statusMachineId = 5\n            break;\n        case 6:\n            msg.payload.machine_event.payload.statusMachineId = 1\n            break;\n        case 9:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 1560,
        "wires": [
            [
                "20b42cb85f9e6b68"
            ]
        ]
    },
    {
        "id": "22732d4fcad62924",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "2d8dda71dd2a71be",
        "name": "imediato na troca de estado - com filtro****",
        "func": "let ignora_registro_maquina = flow.get(\"ignora_registro_maquina\");\n\nif (ignora_registro_maquina == 0) {\n\n\n    let ant_mode = context.get(\"ant_mode\") || 0;\n    let ant_state = context.get(\"ant_state\") || 0;\n    let config = flow.get(\"config\");\n    let name_var_global = \"plc\" + config.machine_name\n    let dadosPlc = global.get(name_var_global)\n    let mode = dadosPlc.mode\n    let state = dadosPlc.state\n\n    if (ant_mode != mode || ant_state != state) {\n        context.set(\"ant_mode\", mode);\n        context.set(\"ant_state\", state);\n        return msg\n    }\n\n\n} else {\n\n    ignora_registro_maquina = ignora_registro_maquina - 1\n    flow.set(\"ignora_registro_maquina\", ignora_registro_maquina);\n\n}\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 1600,
        "wires": [
            [
                "78cd47ba2f1a9fec"
            ]
        ]
    },
    {
        "id": "59dcdd643817aedc",
        "type": "comment",
        "z": "d7706bceda63881b",
        "g": "29235146aaeaad26",
        "name": "Registro Fim da Parada de Linha",
        "info": "",
        "x": 1270,
        "y": 1460,
        "wires": []
    },
    {
        "id": "1f096c9de9ceb6ce",
        "type": "http request",
        "z": "d7706bceda63881b",
        "g": "29235146aaeaad26",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1910,
        "y": 1300,
        "wires": [
            [
                "d1f1a2bec1e22cb8"
            ]
        ]
    },
    {
        "id": "d1f1a2bec1e22cb8",
        "type": "debug",
        "z": "d7706bceda63881b",
        "g": "29235146aaeaad26",
        "name": "debug 676",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2210,
        "y": 1320,
        "wires": []
    },
    {
        "id": "44eaa812a195d7a8",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "29235146aaeaad26",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n\n    //msg.payload.machine_event.payload.ID = 999;\n\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1320,
        "wires": [
            [
                "baacbe22dd72e886"
            ]
        ]
    },
    {
        "id": "baacbe22dd72e886",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "29235146aaeaad26",
        "name": "function 315",
        "func": "\nif (msg.payload != null) {\n\n    if (msg.payload.machine_event.payload.ID != 8888) {\n        return [msg, msg]\n    } else return [msg, msg];\n\n\n\n\n} else {\n\n    node.warn(\"Mudanca de estado sem registro\");\n\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 1320,
        "wires": [
            [
                "1f096c9de9ceb6ce"
            ],
            [
                "05b1fcbae1af582e"
            ]
        ]
    },
    {
        "id": "9b5271e10cc8dc43",
        "type": "postgresql",
        "z": "d7706bceda63881b",
        "g": "29235146aaeaad26",
        "name": "",
        "query": "INSERT INTO public.appoint\n(payload)\nVALUES('{{{msg.payload}}}');",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1970,
        "y": 1380,
        "wires": [
            [
                "dc94b638ca96651b"
            ]
        ]
    },
    {
        "id": "dc94b638ca96651b",
        "type": "debug",
        "z": "d7706bceda63881b",
        "g": "29235146aaeaad26",
        "name": "debug 677",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 1380,
        "wires": []
    },
    {
        "id": "05b1fcbae1af582e",
        "type": "json",
        "z": "d7706bceda63881b",
        "g": "29235146aaeaad26",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1790,
        "y": 1380,
        "wires": [
            [
                "9b5271e10cc8dc43"
            ]
        ]
    },
    {
        "id": "3da3d0b287604b78",
        "type": "link in",
        "z": "d7706bceda63881b",
        "g": "29235146aaeaad26",
        "name": "apontamento maquina",
        "links": [
            "987183eb55ae7260"
        ],
        "x": 1115,
        "y": 1420,
        "wires": [
            [
                "34d27a08935433dc"
            ]
        ]
    },
    {
        "id": "0b0376ca51e52e84",
        "type": "debug",
        "z": "d7706bceda63881b",
        "g": "29235146aaeaad26",
        "name": "debug 678",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 1420,
        "wires": []
    },
    {
        "id": "34d27a08935433dc",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "29235146aaeaad26",
        "name": "Atualiza Parada - Apontamento",
        "func": "const config = flow.get(\"config\");\n\nlet parada = flow.get(\"parada\");\n\nparada.statechanged_id = msg.payload.newStopReason[1]\nparada.statechanged_reason = msg.payload.newStopReason[0]\nparada.programada = msg.payload.newStopReason[2]\nparada.justifica = true\n\n\nflow.set(\"parada\", parada);\nglobal.set(\"parada\" + config.machine_name, parada);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1420,
        "wires": [
            [
                "0b0376ca51e52e84"
            ]
        ]
    },
    {
        "id": "6ba5733aceef5cd5",
        "type": "debug",
        "z": "d7706bceda63881b",
        "g": "17b8b67b398d1da4",
        "name": "debug 679",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1240,
        "wires": []
    },
    {
        "id": "91586a3b8afe8a21",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "17b8b67b398d1da4",
        "name": "Calc Actual Stop",
        "func": "const lastState = flow.get(\"lastState\");\n\nconst lastTime = new Date(lastState[0].timestamp);\nconst currentTime = new Date();\n\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  AJUSTE DE TEMPO xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//const timezoneOffset = currentTime.getTimezoneOffset();\nconst timezoneOffset = 0\n\n\n\nlastTime.setHours(lastTime.getHours() - timezoneOffset / 60);\n\nnode.status({ fill: \"red\", shape: \"ring\", text: lastState[1] });\n\n\n\n\n// Converte para segundos\nconst lastTimeInSeconds = Math.floor(lastTime.getTime() / 1000);\nconst currentTimeInSeconds = Math.floor(currentTime.getTime() / 1000);\n\nconst timeDifference = (currentTimeInSeconds - lastTimeInSeconds) / 60;\n\nmsg.payload = {}\n\nmsg.payload.actualDuration = lastState[1] = timeDifference\nmsg.payload.actualState = lastState[0].payload.machine_event.payload.state\nmsg.payload.actualMode = lastState[0].payload.machine_event.payload.mode\n\n\nconst tempoTranscorrido = flow.get(\"tempoTranscorrido\");\n\nif (lastState[1] > tempoTranscorrido) {\n    lastState[1] = tempoTranscorrido\n\n}\nflow.set(\"lastState\", lastState);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar sumProg_NProgr_parcial = flow.get(\"sumProg_NProgr_parcial\") || [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }];\nlet parada = flow.get(\"parada\");\nif (!isNaN(parada.tParadaAtual)) {\n    //node.warn(parada.active);\n    \n    var calcSumProg_NProgr = JSON.parse(JSON.stringify(sumProg_NProgr_parcial))\n    if (parada.active) {\n\n        if (parada.programada == 'true') {\n            //node.warn(\"Programada\");\n            calcSumProg_NProgr[0].soma_programada = Number(sumProg_NProgr_parcial[0].soma_programada) + Number(parada.tParadaAtual)\n            calcSumProg_NProgr[0].soma_nao_programada = Number(sumProg_NProgr_parcial[0].soma_nao_programada)\n\n            //node.warn(sumProg_NProgr[0].soma_programada);\n        } else {\n            \n            //node.warn(\"Nao Programada\");\n            //node.warn(Number(sumProg_NProgr_parcial[0].soma_nao_programada));\n            //node.warn(Number(parada.tParadaAtual));\n            calcSumProg_NProgr[0].soma_programada = Number(sumProg_NProgr_parcial[0].soma_programada)\n            calcSumProg_NProgr[0].soma_nao_programada = Number(sumProg_NProgr_parcial[0].soma_nao_programada) + Number(parada.tParadaAtual)\n            //node.warn(sumProg_NProgr[0].soma_nao_programada);\n        }\n    } else {\n        calcSumProg_NProgr = sumProg_NProgr_parcial\n\n    }\n} else {\n    calcSumProg_NProgr = sumProg_NProgr_parcial\n    \n}\n\nflow.set(\"sumProg_NProgr\", calcSumProg_NProgr) || [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1240,
        "wires": [
            [
                "6ba5733aceef5cd5"
            ]
        ]
    },
    {
        "id": "99bd749883f0803c",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "monitor troca de estado",
        "func": "let config = flow.get(\"config\");\n//msg.config = config\n\n\n\nlet sm_atual = flow.get(\"sm_atual\");\nlet sm_anterior = flow.get(\"sm_anterior_iot\") || { mode: \"0\", state: \"0\" };\n\nif ((sm_atual.mode != sm_anterior.mode) || (sm_atual.state != sm_anterior.state)) {\n\n    //node.warn(\"mudou\");\n    flow.set(\"sm_anterior_iot\", sm_atual);\n\n    msg.machine_id = config.machine_id\n\n    return msg;\n\n\n\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1880,
        "wires": [
            [
                "5b7fec65e0cb9c31"
            ]
        ]
    },
    {
        "id": "5b7fec65e0cb9c31",
        "type": "json",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1430,
        "y": 1880,
        "wires": [
            [
                "4ea2dedb49b68fb4"
            ]
        ]
    },
    {
        "id": "8243fac51c73a63b",
        "type": "inject",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "60 segundos",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1580,
        "y": 1800,
        "wires": [
            [
                "50fc7c9df9033c54"
            ]
        ]
    },
    {
        "id": "50fc7c9df9033c54",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "consulta turno e ajsute de filtro",
        "func": "const config = flow.get(\"config\");\nmsg.machine_id = config.machine_id\n// Recupera a lista de horários de turnos a partir de uma variável global e o índice do turno desejado da variável de fluxo.\nlet horarios_turnos = global.get(\"turnos_times\");\nlet turno = flow.get(\"memo_turno\");\n\n// Faz uma cópia da lista de horários para evitar modificar o valor original na variável global.\nlet turnos_times = JSON.parse(JSON.stringify(horarios_turnos));\n\n// Obtém a data e hora atuais.\nconst today = new Date();\n// Define o início do dia (00:00:00) para a data atual. Essa data será usada para calcular o tempo em segundos desde a meia-noite.\nconst startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n// Converte o início do dia em formato epoch (segundos desde 1 de janeiro de 1970).\nconst epochTime = Math.floor(startOfDay.getTime() / 1000);\n\n\n\n\n\n// Define o ajuste de fuso horário em segundos. Neste caso, são 10800 segundos (ou 3 horas).\nconst timezoneOffset = -7200; // 2 horas em segundos\n\n// Define a quantidade de segundos em um dia, para lidar com turnos que ultrapassam a meia-noite.\nconst secondsInDay = 86400; // 24 horas em segundos\n\n// Itera sobre cada turno para calcular e ajustar os horários de início e fim.\nfor (let index = 0; index < turnos_times.length; index++) {\n    // Remove propriedades desnecessárias de cada turno para simplificar os dados.\n    delete turnos_times[index].created_at;\n    delete turnos_times[index].updated_at;\n    delete turnos_times[index].id;\n\n    // Extrai a parte do horário de início do turno (no formato 'HH:MM:SS') para conversão em segundos.\n    const [hours_s, minutes_s, seconds_s] = turnos_times[index].start_time.substring(11, 19).split(':').map(Number);\n    // Converte o horário de início em segundos: (horas * 3600) + (minutos * 60) + segundos.\n    const totalSecondsStart = hours_s * 3600 + minutes_s * 60 + seconds_s;\n\n    // Extrai a parte do horário de fim do turno (também no formato 'HH:MM:SS') para conversão em segundos.\n    const [hours_e, minutes_e, seconds_e] = turnos_times[index].end_time.substring(11, 19).split(':').map(Number);\n    // Converte o horário de fim em segundos: (horas * 3600) + (minutos * 60) + segundos.\n    const totalSecondsEnd = hours_e * 3600 + minutes_e * 60 + seconds_e;\n\n    // Calcula o horário de início absoluto do turno, somando o epoch do dia, o horário de início em segundos e o ajuste de fuso horário.\n    let start_time = new Date((epochTime + totalSecondsStart + timezoneOffset) * 1000);\n    // Calcula o horário de fim absoluto do turno da mesma forma.\n    let end_time = new Date((epochTime + totalSecondsEnd + timezoneOffset) * 1000);\n\n    // Verifica se o horário de início é maior que o horário de fim, indicando que o turno ultrapassa a meia-noite.\n    if (start_time > end_time) {\n        // Ajusta o horário de fim, somando um dia (em segundos) para representar corretamente um turno que termina no dia seguinte.\n        end_time = new Date((epochTime + totalSecondsEnd + timezoneOffset + secondsInDay) * 1000);\n    }\n\n    // Converte os horários de início e fim ajustados para o formato ISO e atualiza no objeto do turno.\n    turnos_times[index].start_time = start_time.toISOString();\n    turnos_times[index].end_time = end_time.toISOString();\n}\n\n// Define a saída da mensagem como o turno específico desejado (indexado com base no número do turno menos 1).\nmsg.payload = turnos_times[turno - 1];\nmsg.machine_id = config.machine_id\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 1880,
        "wires": [
            [
                "dd943e6d955d1318",
                "0424c7f0d9a287e6",
                "7309f4e8e55988dc",
                "d26c2c618189cc28",
                "b996764091eab5fb"
            ]
        ]
    },
    {
        "id": "6dc006b1560315e3",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "monta resumo de tempos",
        "func": "const data = msg.payload;\n\n// Converte para o formato desejado, agrupando por `mode` e `state`\nconst result = data.reduce((acc, { mode, state, total_active_duration }) => {\n  if (!acc[mode]) acc[mode] = {}; // Cria a entrada para o mode se não existir\n  acc[mode][state] = (acc[mode][state] || 0) + Number(parseFloat(total_active_duration)); // Soma o total_active_duration\n  return acc;\n}, {});\n\n// verifica se a soma de todos os estados esta consistente com o tempo de turno transcorrifo\nlet config = flow.get(\"config\");\nlet turno = global.get(\"turno_\" + config.factory)\n//node.warn(turno);\n\n\n\n\n// Inicializa `msg.payload` com o objeto `omac`\nmsg.payload = { omac: result };\n\n\n\n// verifica o estado atual e altera o omac\nlet lastState = flow.get(\"lastState\");\n\nif (lastState && lastState[0] && lastState[0].payload) {\n  const mode = lastState[0].payload.machine_event.payload.mode;\n  const state = lastState[0].payload.machine_event.payload.state;\n\n  // Verifica se mode e state existem em msg.payload.omac antes de somar\n  if (msg.payload.omac[mode] && msg.payload.omac[mode][state] !== undefined) {\n    msg.payload.omac[mode][state] =\n      Number(parseFloat(msg.payload.omac[mode][state])) + Number(parseFloat(lastState[1]));\n  }\n}\n\n\n\n\nlet totalProductive = 0;\nlet totalNonProductive = 0;\n\n// Calcula os totais produtivos e não produtivos\nObject.entries(result).forEach(([mode, states]) => {\n  Object.entries(states).forEach(([state, activeMinutes]) => {\n    const minutes = Number(parseFloat(activeMinutes));\n\n    if (state === \"6\" && mode === \"2\") {\n      totalProductive += minutes;\n    } else {\n      totalNonProductive += minutes;\n    }\n  });\n});\n\n\n\n// Armazena `msg.payload` no fluxo para acesso posterior\nflow.set(\"temposOEE_parcial\", msg.payload);\n\n\n\n// Adiciona os somatórios ao `msg.payload`\nmsg.payload.somas = {\n  totalProductive: totalProductive,\n  totalNonProductive: totalNonProductive\n};\n\n\n\n// Retorna `msg` atualizado\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 1880,
        "wires": [
            [
                "c8be0a636776740b"
            ]
        ]
    },
    {
        "id": "32d7af415ceca6de",
        "type": "debug",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "debug 680",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 1960,
        "wires": []
    },
    {
        "id": "fae78840b378abaa",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "consulta ultimo registro",
        "func": "msg.payload[0].payload = JSON.parse(msg.payload[0].payload)\nflow.set(\"lastState\", msg.payload);\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 1940,
        "wires": [
            [
                "32d7af415ceca6de"
            ]
        ]
    },
    {
        "id": "0ec5606521d16b2b",
        "type": "inject",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2280,
        "y": 2080,
        "wires": [
            [
                "120096e760cde1ec"
            ]
        ]
    },
    {
        "id": "3a354e6d4de0dae4",
        "type": "debug",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "debug 681",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2910,
        "y": 2080,
        "wires": []
    },
    {
        "id": "120096e760cde1ec",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "function 316",
        "func": "let horarios_turnos = global.get(\"turnos_times\");\nlet turno = flow.get(\"memo_turno\");\n\nlet turnos_times = JSON.stringify(horarios_turnos)\nturnos_times = JSON.parse(turnos_times);\n//node.warn(turnos_times);\n\nconst today = new Date();\nconst startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\nconst epochTime = Math.floor(startOfDay.getTime() / 1000); // Converte de milissegundos para segundos\n//node.warn(epochTime); // Exibe a data de hoje às 00:00 em epoch (segundos)\n\nfor (let index = 0; index < turnos_times.length; index++) {\n    delete turnos_times[index].created_at\n    delete turnos_times[index].updated_at\n    delete turnos_times[index].id\n\n    const timePart_start = turnos_times[index].start_time.substring(11, 19); // '06:00:00'\n    // Divide a hora, minuto e segundo\n    const [hours_s, minutes_s, seconds_s] = timePart_start.split(':').map(Number);\n    // Converte para segundos\n    const totalMinutes_start = ((hours_s * 3600) + (minutes_s * 60) + (seconds_s));\n\n\n    const timePart_end = turnos_times[index].end_time.substring(11, 19); // '06:00:00'\n    // Divide a hora, minuto e segundo\n    const [hours_e, minutes_e, seconds_e] = timePart_end.split(':').map(Number);\n    // Converte para segundos\n    const totalMinutes_end = ((hours_e * 3600) + (minutes_e * 60) + (seconds_e));\n\n    //node.warn(totalMinutes_start);\n    //node.warn(totalMinutes_end);\n\n    const start_time = new Date((epochTime + totalMinutes_start)*1000)\n    const end_time = new Date((epochTime + totalMinutes_end)*1000)\n\n  \n\n    turnos_times[index].start_time = start_time.toISOString()\n    turnos_times[index].end_time = end_time.toISOString()\n\n\n\n  \n\n}\n\nmsg.payload = turnos_times[turno-1]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 2080,
        "wires": [
            [
                "5d3bae718d314d77"
            ]
        ]
    },
    {
        "id": "450e695fc9cf1ae4",
        "type": "debug",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "debug 682",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 2020,
        "wires": []
    },
    {
        "id": "c8be0a636776740b",
        "type": "debug",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "debug 683",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 1880,
        "wires": []
    },
    {
        "id": "4ea2dedb49b68fb4",
        "type": "postgresql",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "",
        "query": "INSERT INTO public.machine_events\n(id_machine, payload)\nVALUES({{{msg.machine_id}}}, '{{{msg.payload}}}');",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1590,
        "y": 1880,
        "wires": [
            [
                "50fc7c9df9033c54"
            ]
        ]
    },
    {
        "id": "dd943e6d955d1318",
        "type": "postgresql",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n),\nfiltered_intervals AS (\n    SELECT \n        id_machine,\n        mode,\n        state,\n        \n        -- Calcula o início e o fim ajustados do evento, limitados pelo intervalo de filtro\n        GREATEST(timestamp at time zone 'UTC' at time zone 'GMT-3', '{{{msg.payload.start_time}}}'::timestamp) AS adjusted_start,\n        LEAST(next_timestamp at time zone 'UTC' at time zone 'GMT-3', '{{{msg.payload.end_time}}}'::timestamp) AS adjusted_end\n        \n    FROM \n        state_intervals\n    WHERE \n        next_timestamp at time zone 'UTC' at time zone 'GMT-3' > '{{{msg.payload.start_time}}}'::timestamp  -- start_filter\n        AND timestamp at time zone 'UTC' at time zone 'GMT-3' <'{{{msg.payload.end_time}}}'::timestamp     -- end_filter\n        AND id_machine = 6  -- substitua 1 pelo id_machine desejado\n)\nSELECT \n    id_machine,\n    mode,\n    state,\n    \n    -- Calcula o tempo ativo total ajustado dentro do intervalo\n    SUM(\n        CASE \n            WHEN adjusted_end > adjusted_start THEN \n                EXTRACT(EPOCH FROM (adjusted_end - adjusted_start)) / 60  -- Tempo em minutos\n            ELSE \n                0\n        END\n    ) AS total_active_duration\nFROM \n    filtered_intervals\nGROUP BY \n    id_machine,\n    mode,\n    state\nORDER BY \n    id_machine,\n    mode,\n    state;\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2270,
        "y": 1880,
        "wires": [
            [
                "4ef3fa45523d4321"
            ]
        ]
    },
    {
        "id": "5d3bae718d314d77",
        "type": "postgresql",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n)\nSELECT \n    id,\n    timestamp,\n    id_machine,\n    payload,\n    mode,\n    state,\n    next_timestamp,\n    -- Calcula o tempo que o estado ficou ativo\n    CASE \n        WHEN next_timestamp IS NOT NULL THEN \n            AGE(next_timestamp, timestamp)\n        ELSE \n            NULL\n    END AS active_duration\nFROM \n    state_intervals\nORDER BY \n    timestamp;",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2690,
        "y": 2080,
        "wires": [
            [
                "3a354e6d4de0dae4"
            ]
        ]
    },
    {
        "id": "0424c7f0d9a287e6",
        "type": "postgresql",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "",
        "query": "SELECT *\nFROM machine_events\nWHERE id_machine =6\nORDER BY timestamp DESC\nlimit 1\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2270,
        "y": 1940,
        "wires": [
            [
                "fae78840b378abaa"
            ]
        ]
    },
    {
        "id": "7309f4e8e55988dc",
        "type": "postgresql",
        "z": "d7706bceda63881b",
        "d": true,
        "g": "e60e336cc5278daa",
        "name": "Lista FIltrada Tempo e Maquina",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n)\nSELECT \n    id,\n    timestamp AS start_time,       -- Hora inicial do estado\n    next_timestamp AS end_time,    -- Hora final do estado\n    id_machine,\n    payload,\n    mode,\n    state,\n    -- Calcula o tempo que o estado ficou ativo em minutos\n    CASE \n        WHEN next_timestamp IS NOT NULL THEN \n            EXTRACT(EPOCH FROM (next_timestamp - timestamp)) / 60  -- Tempo em minutos\n        ELSE \n            NULL\n    END AS active_duration\nFROM \n    state_intervals\nWHERE \n    -- Filtros aplicados na tabela de saída\n    next_timestamp > '{{{msg.payload.start_time}}}'::timestamp  -- start_filter\n    AND timestamp < '{{{msg.payload.end_time}}}'::timestamp   -- end_filter\n    AND id_machine = 1  -- substitua 123 pelo id_machine desejado\nORDER BY \n    timestamp;\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2330,
        "y": 2020,
        "wires": [
            [
                "450e695fc9cf1ae4"
            ]
        ]
    },
    {
        "id": "4ef3fa45523d4321",
        "type": "delay",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2520,
        "y": 1880,
        "wires": [
            [
                "6dc006b1560315e3"
            ]
        ]
    },
    {
        "id": "d26c2c618189cc28",
        "type": "postgresql",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "",
        "query": "SELECT\n    SUM(CASE \n            WHEN (payload::jsonb->'machine_event'->'payload'->>'Programada')::boolean = true THEN \n                (payload::jsonb->'machine_event'->'payload'->>'tParada')::numeric \n            ELSE 0 \n        END) AS soma_programada,\n    SUM(CASE \n            WHEN (payload::jsonb->'machine_event'->'payload'->>'Programada')::boolean = false THEN \n                (payload::jsonb->'machine_event'->'payload'->>'tParada')::numeric \n            ELSE 0 \n        END) AS soma_nao_programada\nFROM public.appoint\nWHERE \n    to_timestamp((payload::jsonb->'machine_event'->'payload'->>'InicioParada')::bigint / 1000) AT TIME ZONE 'UTC' >= '{{{msg.payload.start_time}}}'\n    AND to_timestamp((payload::jsonb->'machine_event'->'payload'->>'FimParada')::bigint / 1000) AT TIME ZONE 'UTC' <= '{{{msg.payload.end_time}}}'\n    AND ((payload::jsonb->'machine_event'->'payload'->>'machine_id')::int) = 6\n    ",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2270,
        "y": 1820,
        "wires": [
            [
                "f9d688140382310b"
            ]
        ]
    },
    {
        "id": "691932e073d1dd02",
        "type": "debug",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "debug 684",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 1820,
        "wires": []
    },
    {
        "id": "f9d688140382310b",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "SET Prog e Nao Pog",
        "func": "const soma_programada = Number(msg.payload[0].soma_programada) || 0\nconst soma_nao_programada = Number(msg.payload[0].soma_nao_programada) || 0\n\nconst sumProg_NProgr_parcial = [{\n    \"soma_programada\":soma_programada,\n    \"soma_nao_programada\": soma_nao_programada\n}]\n\nflow.set(\"sumProg_NProgr_parcial\", sumProg_NProgr_parcial);\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2740,
        "y": 1820,
        "wires": [
            [
                "691932e073d1dd02"
            ]
        ]
    },
    {
        "id": "b996764091eab5fb",
        "type": "debug",
        "z": "d7706bceda63881b",
        "g": "e60e336cc5278daa",
        "name": "debug 685",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 2040,
        "wires": []
    },
    {
        "id": "302f2e960dd8ab0d",
        "type": "http request",
        "z": "d7706bceda63881b",
        "g": "51b123fd55028ada",
        "name": "GET StopReasons",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1590,
        "y": 240,
        "wires": [
            [
                "f3e654c5f816c964"
            ]
        ]
    },
    {
        "id": "f3e654c5f816c964",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "51b123fd55028ada",
        "name": "function 317",
        "func": "const data = JSON.parse(msg.payload)\nlet id = Math.floor(msg.id_maq)\n\nif (Number.isNaN(id)) {\n    id = null\n}\n\n\nmsg.payload = {}\n\n\nfunction StopsByMachine(data, selectedId = null) {\n    const machineMap = new Map();\n    data.forEach(event => {\n        event.machines.forEach(machine => {\n            if (!machineMap.has(machine.id)) {\n                machineMap.set(machine.id, { id: machine.id, name: machine.name, stopReasons: [] });\n            }\n            machineMap.get(machine.id).stopReasons.push([event.plc_code, event.name, event.expected]);\n        });\n    });\n\n    if (selectedId !== null) {\n        return machineMap.has(selectedId) ? machineMap.get(selectedId) : null;\n    }\n\n    return Array.from(machineMap.values());\n}\n\n\n\nfunction listUniqueMachineNames(data) {\n\n    const machines = new Map();\n    data.forEach(event => {\n        event.machines.forEach(machine => {\n            machines.set(machine.id, machine.name);\n        });\n    });\n\n    const result = Array.from(machines).map(([id, name]) => ({ id, name }));\n\n    return result\n\n\n}\n\n\n\n// Chamar a função e imprimir o resultado\nmsg.payload.maquinas = listUniqueMachineNames(data);\n\n\n\n// Executar a função e imprimir o resultado\nmsg.payload.stopreasons = StopsByMachine(data, id);\n\nflow.set(\"stopreasons\", msg.payload.stopreasons);\n\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 240,
        "wires": [
            [
                "d391f55663306a2f"
            ]
        ]
    },
    {
        "id": "650da1c8fc70489e",
        "type": "inject",
        "z": "d7706bceda63881b",
        "g": "51b123fd55028ada",
        "name": "",
        "props": [],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1250,
        "y": 240,
        "wires": [
            [
                "dac1891cd9b437c2"
            ]
        ]
    },
    {
        "id": "d391f55663306a2f",
        "type": "debug",
        "z": "d7706bceda63881b",
        "g": "51b123fd55028ada",
        "name": "debug 686",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 240,
        "wires": []
    },
    {
        "id": "dac1891cd9b437c2",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "51b123fd55028ada",
        "name": "Config",
        "func": "\nlet config = flow.get(\"config\")\n\n//msg.id_maq = msg.req.params.id_maq\nmsg.id_maq = config.machine_id\n\n//node.warn(\"Aqui\");\n\nif (config.send == true) {\n  \n\n    msg.url = config.url + \"/stop_reasons.json\"\n    msg.headers = {}\n    msg.headers['Authorization'] = config.token_line\n    msg.payload = {}\n\n\nreturn msg\n\n\n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 240,
        "wires": [
            [
                "302f2e960dd8ab0d"
            ]
        ]
    },
    {
        "id": "05f803e6fa16a4f4",
        "type": "inject",
        "z": "d7706bceda63881b",
        "d": true,
        "g": "51b123fd55028ada",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "100",
        "topic": "",
        "x": 1250,
        "y": 300,
        "wires": [
            [
                "09844da26b26c05a"
            ]
        ]
    },
    {
        "id": "09844da26b26c05a",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "51b123fd55028ada",
        "name": "lista paradas",
        "func": "msg.payload = {}\n\n\nlet lista_paradas = [\n    {\n        \"id\": 2,\n        \"descr\": \"\",\n        \"cod_class\": 0, \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    }\n]\n\n\nconst paradas = flow.get(\"stopreasons\");\n\nnode.warn(lista_paradas);\nnode.warn(paradas);\n\nfor (let index = 0; index < paradas.stopReasons.length; index++) {\n    //node.warn(paradas.stopReasons[index][0]);\n    lista_paradas[index].id = 9999\n    lista_paradas[index].descr = paradas.stopReasons[index][1]\n    lista_paradas[index].cod_class = paradas.stopReasons[index][0]\n    lista_paradas[index].ZZZZZZZZZZudtZIA_Par3 = 5\n    lista_paradas[index].progr = paradas.stopReasons[index][2]\n}\n\n\nnode.warn(lista_paradas);\n\nmsg.payload.paradas = lista_paradas\n\nreturn msg\n\n\n// msg.payload = {\n//     \"id\": 23,\n//     \"descr\": \"\",\n//     \"cod_class\": 0,\n//     \"ZZZZZZZZZZudtZIA_Par3\": 0,\n//     \"progr\": false\n// }\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 300,
        "wires": [
            [
                "a10f574e5e0f7bbe",
                "3baa9ec583f77cf4"
            ]
        ]
    },
    {
        "id": "a10f574e5e0f7bbe",
        "type": "debug",
        "z": "d7706bceda63881b",
        "g": "51b123fd55028ada",
        "name": "debug 687",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 360,
        "wires": []
    },
    {
        "id": "3baa9ec583f77cf4",
        "type": "eth-ip out",
        "z": "d7706bceda63881b",
        "g": "51b123fd55028ada",
        "endpoint": "8d756ed66187c2a2",
        "variable": "cmdZIA",
        "program": "",
        "name": "",
        "x": 2060,
        "y": 320,
        "wires": []
    },
    {
        "id": "e6ff1cf767ea7980",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "20105f46ed9adc09",
        "name": "Alarme",
        "func": "let memo_aux_id_falha = context.get(\"aux_id_falha\");\nif (msg.payload.aux_id_falha != memo_aux_id_falha) {\n    if (msg.payload.aux_id_falha != 0 && msg.payload.aux_id_falha != 9999) {\n        let config = flow.get(\"config\");\n        let dados_alm = {\n            TimeStamp: new Date(),\n            nameMachine: config.machine_name,\n            ID: msg.payload.aux_id_falha,\n            reason: msg.payload.lastalm\n        };\n        const d = new Date();\n        let minutes = d.getMinutes();\n        let agora = new Date()\n        msg.payload = {\n            \"authenticity_token\": \"L3uhfD4yxArDD6++xrFmFX9LLKfX5PyMstpcUL0zi6SRrHAzTqfBCj1iKfYp4o6GLK9emMZYiAmxF1T9C7BQ==\",\n            \"machine_event\": {\n                \"timestamp(1i)\": agora.getFullYear().toString(),\n                \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n                \"timestamp(3i)\": agora.getDate().toString(),\n                \"timestamp(4i)\": agora.getHours().toString(),\n                \"timestamp(5i)\": agora.getMinutes().toString(),\n                \"event_type_id\": 5,\n                //        \"timestamp(3i)\": d.getDay(),\n                //        \"timestamp(2i)\": d.getMonth(),\n                //        \"timestamp(1i)\": d.getFullYear(),\n                //        \"timestamp(4i)\": d.getHours(),\n                //        \"timestamp(5i)\": d.getMinutes(),\n                \"payload\": dados_alm\n            }\n        }\n        context.set(\"aux_id_falha\", dados_alm.ID);\n        return msg\n    }\n}\ncontext.set(\"aux_id_falha\", msg.payload.aux_id_falha);\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 2680,
        "wires": [
            [
                "a0193c77de9e16d3"
            ]
        ]
    },
    {
        "id": "ac1af10f1929cbfb",
        "type": "http request",
        "z": "d7706bceda63881b",
        "g": "20105f46ed9adc09",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1510,
        "y": 2680,
        "wires": [
            [
                "2b64a7218bcdb9e1"
            ]
        ]
    },
    {
        "id": "2b64a7218bcdb9e1",
        "type": "debug",
        "z": "d7706bceda63881b",
        "g": "20105f46ed9adc09",
        "name": "debug 688",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 2680,
        "wires": []
    },
    {
        "id": "a0193c77de9e16d3",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "20105f46ed9adc09",
        "name": "function 318",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2680,
        "wires": [
            [
                "ac1af10f1929cbfb",
                "fb9d51da68b25f9b"
            ]
        ]
    },
    {
        "id": "039225e75d42ae12",
        "type": "link in",
        "z": "d7706bceda63881b",
        "g": "baf8c1b125ea1fa1",
        "name": "link in 33",
        "links": [
            "615e1f011ffb0b71"
        ],
        "x": 275,
        "y": 1680,
        "wires": [
            [
                "20cd20c8287d8b01"
            ]
        ]
    },
    {
        "id": "43be88e24058cec5",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "baf8c1b125ea1fa1",
        "name": "function 341",
        "func": "const config = flow.get(\"config\");\nconst guilt = msg.payload[config.machine_name]\nlet name_var_global = \"plc\" + config.machine_name\n\n\n\nif (guilt) {\n    node.warn(\"my warning\");\n    //atualiza a hora da parada com a hora que a enchedora (gargalo) parou\n    let parada = flow.get(\"parada\");\n    const parada_linha = JSON.parse(JSON.stringify(parada))\n    parada_linha.hora = new Date().getTime()\n    parada_linha.machine_id = config.machine_id\n    parada_linha.machine_name = config.machine_name\n    parada_linha.active = true\n    global.set(\"parada_linha\", parada_linha )\n    return msg;\n\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1680,
        "wires": [
            [
                "213ef1a17f95fe8b"
            ]
        ]
    },
    {
        "id": "20cd20c8287d8b01",
        "type": "delay",
        "z": "d7706bceda63881b",
        "g": "baf8c1b125ea1fa1",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 1680,
        "wires": [
            [
                "43be88e24058cec5"
            ]
        ]
    },
    {
        "id": "501e9604c0df70b6",
        "type": "link in",
        "z": "d7706bceda63881b",
        "g": "baf8c1b125ea1fa1",
        "name": "link in 34",
        "links": [
            "31d753b6c2f98a0f"
        ],
        "x": 275,
        "y": 1740,
        "wires": [
            [
                "846a7e9efd2debf6"
            ]
        ]
    },
    {
        "id": "846a7e9efd2debf6",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "baf8c1b125ea1fa1",
        "name": "function 342",
        "func": "let config = flow.get(\"config\");\nlet retorno = new Date()\nlet parada = global.get(\"parada_linha\");\n\nif (parada.machine_id == config.machine_id) {\n\n    let tParada = (retorno.getTime() - parada.hora) / 1000 / 60\n    //let paradasSoma = flow.get(\"paradasSoma\") || flow.set(\"paradasSoma\", { \"Prog\": 0, \"Nprog\": 0 })\n    let turno = global.get(\"turno_\" + config.factory)\n    let machine_event = {}\n\n    machine_event = {\n        \"timestamp(1i)\": retorno.getFullYear().toString(),\n        \"timestamp(2i)\": (retorno.getMonth() + 1).toString(),\n        \"timestamp(3i)\": retorno.getDate().toString(),\n        \"timestamp(4i)\": retorno.getHours().toString(),\n        \"timestamp(5i)\": retorno.getMinutes().toString(),\n        \"timestamp(6i)\": retorno.getSeconds().toString(),\n        \"event_type_id\": 4,\n        \"payload\": {\n            \"aux_id_falha\": parada.aux_id_falha,\n            \"InicioParada\": parada.hora,\n            \"FimParada\": new Date().getTime(),\n            \"tParada\": Number(tParada.toFixed(2)),\n            \"ID\": isNaN(Number(parada.statechanged_id)) ? 0 : Number(parada.statechanged_id), // Garantir que ID seja um número\n            \"Reason\": parada.statechanged_reason,\n            \"ModeReason\": parada.mode,\n            \"StateReason\": parada.state || 0,\n            \"Programada\": parada.programada,\n            \"turno_atual\": turno.turno,\n            \"equip\": config.machine_name,\n            \"machine_id\": config.machine_id,\n            \"guilt\": false\n        }\n    }\n\n    parada.active = false\n    msg.payload.machine_event = machine_event\n\n\n\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1740,
        "wires": [
            [
                "ed800fc2289734c1"
            ]
        ]
    },
    {
        "id": "24e3d9510a3deab2",
        "type": "debug",
        "z": "d7706bceda63881b",
        "g": "baf8c1b125ea1fa1",
        "name": "debug 722",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1740,
        "wires": []
    },
    {
        "id": "ed800fc2289734c1",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "baf8c1b125ea1fa1",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n\n    //msg.payload.machine_event.payload.ID = 999;\n\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1740,
        "wires": [
            [
                "dd93fa16d07eddb0"
            ]
        ]
    },
    {
        "id": "213ef1a17f95fe8b",
        "type": "debug",
        "z": "d7706bceda63881b",
        "g": "baf8c1b125ea1fa1",
        "name": "debug 723",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1680,
        "wires": []
    },
    {
        "id": "3daf074a4e9c4eea",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "baf8c1b125ea1fa1",
        "name": "Update tempo parada linha",
        "func": "let parada_linha = global.get(\"parada_linha\");\n\nif (parada_linha.active) {\n    let retorno = new Date()\n    \n    let tParada = (retorno.getTime() - parada_linha.hora) / 1000 / 60\n    parada_linha.tParadaAtual = tParada\n\n\n\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "dd93fa16d07eddb0",
        "type": "http request",
        "z": "d7706bceda63881b",
        "g": "baf8c1b125ea1fa1",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 770,
        "y": 1740,
        "wires": [
            [
                "24e3d9510a3deab2"
            ]
        ]
    },
    {
        "id": "ff9a9fe9d69dfd50",
        "type": "eth-ip in",
        "z": "d7706bceda63881b",
        "endpoint": "c24c0bcc6c62657e",
        "mode": "all",
        "variable": "diProductionCounter",
        "program": "",
        "name": "",
        "gatherMetrics": true,
        "includeTimestamp": true,
        "x": 80,
        "y": 320,
        "wires": [
            [
                "abe6f4d83672cfdf",
                "4715a72379a31a6a"
            ]
        ]
    },
    {
        "id": "49d0570e8be62390",
        "type": "debug",
        "z": "d7706bceda63881b",
        "name": "debug 737",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 320,
        "wires": []
    },
    {
        "id": "abe6f4d83672cfdf",
        "type": "function",
        "z": "d7706bceda63881b",
        "name": "function 353",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet mode\n\n///alteracao de mode - gambia\nswitch (msg.payload.machine_mode.value) {\n    case 0:\n        mode = 1\n        break;\n    case 1:\n        mode = 2\n        break;\n    case 2:\n        mode = 1\n        break;\n    default:\n        mode = 1\n\n}\n\n\n\nlet plc = {\n    xResetCounter: msg.payload.xResetCounter.value,\n    xResetReject_r1: msg.payload.xResetReject_r1.value,\n    xResetReject_r2: msg.payload.xResetReject_r2.value,\n    aux_id_falha: msg.payload.aux_id_falha.value,\n    iActualRecipe: msg.payload.iActualRecipe.value,\n    strRecipeName: msg.payload.recipe_name.value,\n    mode: mode,\n    state: msg.payload.machine_state.value,\n    rActualSpeed: msg.payload.rActualSpeed,\n    diCounterReject_r1: msg.payload.diCounterReject_r1.value,\n    diCounterReject_r2: msg.payload.diCounterReject_r2.value,\n    diProductionCounter: msg.payload.diProductionCounter.value,\n    starved: msg.payload.machine_starverd.value,\n    blocked: msg.payload.machine_blocked.value\n\n\n\n}\n\n\nif (plc.blocked && plc.state == 5) {\n    plc.aux_id_falha = 300\n}\n\n\n\nglobal.set(name_var_global, plc);\n\nmsg.payload = plc\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 320,
        "wires": [
            [
                "49d0570e8be62390",
                "68dc4ada47c0f5dc"
            ]
        ]
    },
    {
        "id": "4715a72379a31a6a",
        "type": "debug",
        "z": "d7706bceda63881b",
        "name": "debug 738",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 400,
        "wires": []
    },
    {
        "id": "a365587f6581ce4a",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "3eb71f34d22c0e97",
        "name": "set reset Counters",
        "func": "let cmdResetAtivo = true\nflow.set(\"cmdResetAtivo\", cmdResetAtivo);\n\nmsg.payload = true\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 940,
        "wires": [
            [
                "9619157655680de2",
                "19690ab9c2cf4c65",
                "1d235c3620555e6d",
                "0e142747d7455984"
            ]
        ]
    },
    {
        "id": "1d235c3620555e6d",
        "type": "delay",
        "z": "d7706bceda63881b",
        "g": "3eb71f34d22c0e97",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1940,
        "y": 1000,
        "wires": [
            [
                "c22980678c8f7447"
            ]
        ]
    },
    {
        "id": "c22980678c8f7447",
        "type": "function",
        "z": "d7706bceda63881b",
        "g": "3eb71f34d22c0e97",
        "name": "function 355",
        "func": "msg.payload = false\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 1000,
        "wires": [
            [
                "9619157655680de2",
                "19690ab9c2cf4c65"
            ]
        ]
    },
    {
        "id": "19690ab9c2cf4c65",
        "type": "eth-ip out",
        "z": "d7706bceda63881b",
        "g": "3eb71f34d22c0e97",
        "endpoint": "c24c0bcc6c62657e",
        "variable": "xResetReject_r1",
        "program": "",
        "name": "",
        "x": 2690,
        "y": 1020,
        "wires": []
    },
    {
        "id": "9619157655680de2",
        "type": "eth-ip out",
        "z": "d7706bceda63881b",
        "g": "3eb71f34d22c0e97",
        "endpoint": "c24c0bcc6c62657e",
        "variable": "xResetCounter",
        "program": "",
        "name": "",
        "x": 2680,
        "y": 960,
        "wires": []
    },
    {
        "id": "929f4037dc0ac6d3",
        "type": "file in",
        "z": "d7706bceda63881b",
        "name": "Lista Falhas",
        "filename": "alm_list_06",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": true,
        "x": 350,
        "y": 240,
        "wires": [
            [
                "f704e8dd3f60a876"
            ]
        ]
    },
    {
        "id": "17f02576a1a4d00d",
        "type": "inject",
        "z": "d7706bceda63881b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 240,
        "wires": [
            [
                "929f4037dc0ac6d3"
            ]
        ]
    },
    {
        "id": "416efd8c7b516649",
        "type": "debug",
        "z": "d7706bceda63881b",
        "name": "debug 742",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 240,
        "wires": []
    },
    {
        "id": "f704e8dd3f60a876",
        "type": "function",
        "z": "d7706bceda63881b",
        "name": "function 358",
        "func": "flow.set(\"alm_list\", msg.payload);\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 240,
        "wires": [
            [
                "416efd8c7b516649"
            ]
        ]
    },
    {
        "id": "68dc4ada47c0f5dc",
        "type": "function",
        "z": "d7706bceda63881b",
        "name": "find line",
        "func": "let config = flow.get(\"config\");\n\nlet name_var_global = \"plc\" + config.machine_name\n\n\nlet plc = msg.payload\n\nlet cod = msg.payload.aux_id_falha\n\nconst lista_falha = flow.get(\"alm_list\");\n\n\nconst lines = lista_falha.split('\\n');\n//node.warn(lines);\n\n\n// Percorrer cada linha e dividi-la em colunas\nlines.forEach(line => {\n    const columns = line.split(',');\n    if (columns.length > 1) {\n        var id = columns[0].trim();\n        var desc_alm = columns[1].trim();\n        var desc_classe = columns[2].trim();\n        var classe = columns[3].trim();\n        var programadada = columns[4].trim();\n    }\n\n    if (cod == id) {\n        let str_cod = desc_classe\n        let class_cod = classe\n        let programada = Boolean(Number(programadada))\n        plc.statechanged_id = class_cod\n        plc.statechanged_reason = str_cod\n        plc.programada = programada\n        plc.lastalm = desc_alm\n\n        return\n\n\n\n    }\n\n    \n\n});\n\n\n\nplc = JSON.parse(JSON.stringify(plc))\nglobal.set(name_var_global, plc);\nmsg.payload = plc\nreturn msg\n\n\n\n//return msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 400,
        "wires": [
            [
                "10cff38429459c17",
                "3513925fd8a9bb66",
                "7cdfef5b71ea4435",
                "aa60b518b6a8e33c",
                "7dd162fd89b8cee5"
            ]
        ]
    },
    {
        "id": "10cff38429459c17",
        "type": "debug",
        "z": "d7706bceda63881b",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.aux_id_falha",
        "statusType": "msg",
        "x": 990,
        "y": 400,
        "wires": []
    },
    {
        "id": "3513925fd8a9bb66",
        "type": "debug",
        "z": "d7706bceda63881b",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.statechanged_id",
        "statusType": "msg",
        "x": 990,
        "y": 480,
        "wires": []
    },
    {
        "id": "7cdfef5b71ea4435",
        "type": "debug",
        "z": "d7706bceda63881b",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.statechanged_reason",
        "statusType": "msg",
        "x": 990,
        "y": 540,
        "wires": []
    },
    {
        "id": "aa60b518b6a8e33c",
        "type": "debug",
        "z": "d7706bceda63881b",
        "name": "debug 744",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload.lastalm",
        "statusType": "msg",
        "x": 990,
        "y": 600,
        "wires": []
    },
    {
        "id": "7dd162fd89b8cee5",
        "type": "link out",
        "z": "d7706bceda63881b",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "927dae0f624f5d67"
        ],
        "x": 875,
        "y": 640,
        "wires": []
    },
    {
        "id": "b2d5881d0ba1aabe",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "name": "debug 690",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 2520,
        "wires": []
    },
    {
        "id": "c3f2c7edba8c5335",
        "type": "link in",
        "z": "f7ad05cac9ca67b4",
        "name": "link in 15",
        "links": [
            "b77fcb165527b3e9"
        ],
        "x": 475,
        "y": 2640,
        "wires": [
            [
                "58453b6aa86e88fa"
            ]
        ]
    },
    {
        "id": "7c47223e84fd486c",
        "type": "inject",
        "z": "f7ad05cac9ca67b4",
        "g": "7021cb46689ee262",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 100,
        "wires": [
            [
                "ad30206a9338157f"
            ]
        ]
    },
    {
        "id": "ad30206a9338157f",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "7021cb46689ee262",
        "name": "CONFIG",
        "func": "//configuracaao de linha\n\nlet config = {}\n\nconfig.machine_name = \"rotuladorafrascos\"\n\nconfig.factory = 1\nconfig.machine_id = 7\nconfig.token_machine = \"Bearer \" + \"dcf73690aabe2b7e82b575da91cf6f28a08c04d5\"\nconfig.token_line = \"Bearer \" + \"00bc757a398cc98d299fd6fc2119929c48647db9\"\nconfig.url = \"http://127.0.0.1:3003\"\nconfig.url_machine = config.url + \"/machine_events\"\nconfig.url_line = config.url + \"/production_line_events\"\nconfig.send = true /// habilita POST\n\nflow.set(\"config\", config);\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 100,
        "wires": [
            [
                "012e0da75c09ac5e"
            ]
        ]
    },
    {
        "id": "012e0da75c09ac5e",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "g": "7021cb46689ee262",
        "name": "debug 691",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 100,
        "wires": []
    },
    {
        "id": "7481db3d8e5ec93e",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "8840c09eaff5262e",
        "name": "Turnos, Tempos Acumulados",
        "func": "\nlet msg1 = new Object()\nlet msg2 = new Object()\nlet msg3 = new Object()\nlet config = flow.get(\"config\");\nlet a\n\n\n\nlet turno = global.get(\"turno_\" + config.factory)\nlet memo_turno = flow.get(\"memo_turno\") || 0\n\n\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\n\nlet sm_atual = {\n    \"state\": dadosPlc.state || 2,\n    \"mode\": dadosPlc.mode || 2\n}\nflow.set(\"sm_atual\", sm_atual);\nlet sm_anterior = flow.get(\"sm_anterior\") || flow.set(\"sm_anterior\", sm_atual)\n\n\nlet tempoTranscorrido\nif (memo_turno == turno.turno) { //&& turno.turno != 0\n    a = 1\n\n\n    flow.set(\"tempoTranscorrido\", turno.tempoTranscorrido);\n    tempoTranscorrido = turno.tempoTranscorrido\n\n    calculosOEE()\n\n} else {\n\n    a = 2\n\n    tempoTranscorrido = flow.get(\"tempoTranscorrido\") || 0\n\n}\n\n\n\nlet parada = flow.get(\"parada\") || { \"hora\": 0, \"state\": \"0\", \"mode\": \"0\", \"active\": false, \"tParadaAtual\": 0 }\n\n\n\n// Atualiza o tempo da parada atual\nif ((sm_atual.state != 6 || sm_atual.mode != 2) && turno.turno != 0) {\n    let agora = new Date().getTime()\n    let tParadaAtual = agora - parada.hora\n    parada.tParadaAtual = tParadaAtual / 60 / 1000\n    flow.set(\"parada\", parada);\n    global.set(\"parada\" + name_var_global, parada);\n}\n\n\n\n\n// Aciona saida indicando que houve mudanca do modo de operacao\nif (sm_atual.mode != sm_anterior.mode || sm_atual.state != sm_anterior.state) {\n    //Verifica se a maquina saiu do estado Execute\n    //Sempre que a maquina sair de execute devemos anotar o horario da parada\n    if ((sm_anterior.state == 6 && sm_anterior.mode == 2) && (sm_atual.state != sm_anterior.state || sm_atual.mode != sm_anterior.mode)) {\n        console.log(\"NÃO PRODUZINDO\")\n        anotaInicioParada()\n        msg2 = null\n    } else if ((sm_anterior.state != 6 || sm_anterior.mode != 2) && (sm_atual.state == 6 && sm_atual.mode == 2)) {\n        console.log(\"PRODUZINDO\")\n        msg2.payload = consolidaParada()\n        calculosOEE()\n        flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n    }\n    flow.set(\"sm_anterior\", sm_atual)\n\n\n    return [null, msg2]\n}\n\n\n\n\n\n/// rotinas que devem ser executadas na troca de turno\nif (memo_turno != turno.turno) {\n    msg1 = null\n    msg2 = null\n\n    console.log(\"TrocaTurno\")\n    node.warn(\"TrocaTurno\")\n\n    if (memo_turno != 0) {\n        console.log(\"Fim turno \" + memo_turno)\n        msg1 = { payload: 1 }\n\n        if (parada.active == true) { // se no fim do turno estiver em parada consolida\n            msg2 = {}\n            msg2.payload = {}\n            msg2.payload = consolidaParada()\n\n            calculosOEE()\n\n            flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n            if (turno.turno != 0) { // se entrar em um novo turno reinicia a parada\n                console.log(\"Inicio turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n                anotaInicioParada()\n\n            }\n        } else {\n            if (turno.turno != 0) {\n                console.log(\"Iniccio Turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n            }\n        }\n\n\n        calculosOEE()\n        let calculoOEE = flow.get(\"calculoOEE\");\n        flow.set(\"fimTurnoOEE\", calculoOEE);\n        flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n\n\n\n    } else if (memo_turno == 0) {\n        msg1 = null\n        console.log(\"verificaAnotacaoTurno\") // verifica e cria msg2 se necssario e zera anotacao de parada\n\n        verificaAnotacaoInicioTurno()\n\n    } else {\n\n        msg1 = null\n    }\n\n    //anota registro de turno\n\n\n\n    flow.set(\"memo_turno\", turno.turno)\n\n    return [msg1, msg2]\n}\nmsg3.payload = calculosOEE()\nmsg3.payload.machine_event.event_type_id = 6\nreturn [null, null, msg3]\n\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n\nfunction anotaInicioParada() {\n\n    console.log(\"inicio parada\")\n    node.warn(name_var_global);\n\n    let iParada = global.get(name_var_global);\n    let parada = {\n        \"hora\": new Date(),\n        \"state\": sm_atual.state || 0,\n        \"mode\": sm_atual.mode\n    }\n    flow.set(\"parada\", {\n        \"aux_id_falha\": Number(dadosPlc.aux_id_falha),\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true,\n        \"statechanged_id\": iParada.statechanged_id,\n        \"statechanged_reason\": iParada.statechanged_reason,\n        \"programada\": new Boolean(iParada.programada),\n        \"justifica\": false\n\n    });\n    global.set(\"parada\" + name_var_global, {\n        \"aux_id_falha\": Number(dadosPlc.aux_id_falha),\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true,\n        \"statechanged_id\": iParada.statechanged_id,\n        \"statechanged_reason\": iParada.statechanged_reason,\n        \"programada\": new Boolean(iParada.programada),\n        \"justifica\": false,\n        \"machine_id\": config.machine_id,\n        \"Equip\": config.machine_name\n\n    });\n    //console.clear()\n    //console.log(\"Inicio da Parada:\" + parada.hora.getHours() + \":\" + parada.hora.getMinutes())\n    return {\n        \"InicioParada\": parada.hora.getTime(),\n        \"FimParada\": 0,\n        \"tParada\": 0,\n        \"ID\": \"ID\",\n        \"Reason\": null,\n        \"ModeReason\": new Number(parada.mode),\n        \"StateReason\": new Number(parada.state) || 0,\n        \"Programada\": null,\n        \"Equip\": name_var_global\n    }\n}\n\nfunction consolidaParada() {\n    //////////////////////////////////////////////////////////////////////\n    //GAMBIA PARA ATRASAR O REGISTRO//////////////////////////////////////\n    //////////////////////////////////////////////////////////////////////\n\n    flow.set(\"ignora_registro_linha\", 20);\n    flow.set(\"ignora_registro_maquina\", 20);\n\n    ////fim da gambia///////////////////////////////////////////////////\n\n\n    console.log(\"fim parada\")\n    let retorno = new Date()\n    let parada = flow.get(\"parada\") || 0\n    let tParada = (retorno.getTime() - parada.hora) / 1000 / 60\n    let paradasSoma = flow.get(\"paradasSoma\") || flow.set(\"paradasSoma\", { \"Prog\": 0, \"Nprog\": 0 })\n\n    if (dadosPlc.programada == \"true\") {\n        paradasSoma.Prog = paradasSoma.Prog + tParada\n    } else {\n        paradasSoma.Nprog = paradasSoma.Nprog + tParada\n    }\n    flow.set(\"paradasSoma\", paradasSoma);\n    parada.active = false\n    flow.set(\"parada\", parada);\n    global.set(\"parada\" + name_var_global, parada);\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    return {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 8,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": {\n                \"aux_id_falha\": parada.aux_id_falha,\n                \"InicioParada\": parada.hora,\n                \"FimParada\": retorno.getTime(),\n                \"tParada\": Number(tParada.toFixed(2)),\n                \"ID\": isNaN(Number(parada.statechanged_id)) ? 0 : Number(parada.statechanged_id), // Garantir que ID seja um número\n                \"Reason\": parada.statechanged_reason,\n                \"ModeReason\": parada.mode,\n                \"StateReason\": parada.state || 0,\n                \"Programada\": parada.programada,\n                \"turno_atual\": turno.turno,\n                \"equip\": config.machine_name,\n                \"machine_id\": config.machine_id\n            }\n        }\n    }\n}\n\nfunction calculosOEE() {\n\n\n    //msg.filename = \".\\supZIA\\registroTurno_\" + name_var_global + \".json\"\n\n    var sumProg_NProgr = flow.get(\"sumProg_NProgr\") || [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }];\n\n    let dados_oee = {}\n    let tNProg = Number(sumProg_NProgr[0].soma_nao_programada)\n    let tProg = Number(sumProg_NProgr[0].soma_programada)\n    let tProducao = Number(tempoTranscorrido - (tProg + tNProg))\n\n    node.status({ fill: \"red\", shape: \"ring\", text: dados_oee.percDisp });\n\n    if (dadosPlc.mode == 2 && dadosPlc.state == 6) {\n        dados_oee.statusMachine = \"Rodando\"\n    } else dados_oee.statusMachine = \"Parada\"\n\n    ////////////\n    dados_oee.statusConexao = true\n    dados_oee.mode = Number(dadosPlc.mode)\n    dados_oee.state = Number(dadosPlc.state) || 0\n    dados_oee.rNominalSpeed = Number(dadosPlc.rNominalSpeed)\n    dados_oee.rSetSpeed = Number(dadosPlc.rSetSpeed)\n    dados_oee.rActualSpeed = Number(dadosPlc.rActualSpeed)\n    dados_oee.strRecipeName = String(dadosPlc.strRecipeName)\n    dados_oee.strBottle = String(dadosPlc.strBottle)\n    dados_oee.strCap = String(dadosPlc.strCap)\n    dados_oee.diProductionCounter = Number(dadosPlc.diProductionCounter)\n    dados_oee.diCounterReject_r1 = Number(dadosPlc.diCounterReject_r1)\n    dados_oee.diCounterReject_r2 = Number(dadosPlc.diCounterReject_r2)\n    dados_oee.iActualRecipe = Number(dadosPlc.iActualRecipe)\n    dados_oee.tempoTranscorrido = Number(tempoTranscorrido.toFixed(2))\n    dados_oee.percDisp = (tProducao) / (tempoTranscorrido - tProg) * 100\n\n    var teste = {\n        tProducao: tProducao,\n        tempoTranscorrido: tempoTranscorrido,\n        tProg: tProg,\n        tNProg: tNProg,\n\n\n\n    }\n    dados_oee.teste = teste;\n\n    node.status({ fill: \"red\", shape: \"ring\", text: JSON.stringify(teste) });\n\n    dados_oee.percDisp = Number(dados_oee.percDisp.toFixed(2))\n    dados_oee.percEfic = (dados_oee.diProductionCounter) / ((tProducao * dados_oee.rNominalSpeed) / 60) * 100\n    dados_oee.percEfic = Number(dados_oee.percEfic.toFixed(2))\n    dados_oee.percQual = (((dados_oee.diProductionCounter) - (dados_oee.diCounterReject_r1 + dados_oee.diCounterReject_r2)) / dados_oee.diProductionCounter) * 100\n    dados_oee.percQual = isNaN(Number(dados_oee.percQual)) ? 0 : Number(Number(dados_oee.percQual).toFixed(2));\n    dados_oee.percOEE = dados_oee.percDisp * dados_oee.percEfic * dados_oee.percQual / 10000\n    dados_oee.percOEE = Number(dados_oee.percOEE.toFixed(2))\n    dados_oee.turno = Number(turno.turno)\n    dados_oee.tempoParadaProgramada = Number(tProg.toFixed(2))\n    dados_oee.tempoParadaNaoProgramada = Number(tNProg.toFixed(2))\n    dados_oee.dimetaProduzidos = 100000\n    dados_oee.rmetaPerf = 95.00\n    dados_oee.rmetaDisp = 90.00\n    dados_oee.rmetaQual = 99.00\n    dados_oee.rmetaOEE = 90.00\n    dados_oee.equip = String(config.machine_name)\n\n    ////teste limites - ocorre quando o node é desligado\n    if (dados_oee.percDisp < 0) {\n        dados_oee.percDisp = 0\n    } else if (dados_oee.percDisp > 100) {\n        dados_oee.percDisp = 100\n    }\n\n    if (dados_oee.percEfic < 0) {\n        dados_oee.percEfic = 0\n    } else if (dados_oee.percEfic > 100) {\n        dados_oee.percEfic = 100\n    }\n\n    if (dados_oee.percQual < 0) {\n        dados_oee.percQual = 0\n    } else if (dados_oee.percQual > 100) {\n        dados_oee.percQual = 100\n    }\n\n    if (dados_oee.percOEE < 0) {\n        dados_oee.percOEE = 0\n    } else if (dados_oee.percOEE > 100) {\n        dados_oee.percOEE = 100\n    }\n\n\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    let calculo = {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 3,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": dados_oee\n        }\n    }\n\n    flow.set(\"calculoOEE\", calculo);\n\n\n    return calculo\n\n\n\n}\n\nfunction verificaAnotacao() {\n\n}\n\n\nfunction verificaAnotacaoInicioTurno() {\n    console.log(\"Inicio Turno \" + turno.turno)\n    ////Zera os valores para iniciar novo turno\n    flow.set(\"sumProg_NProgr\", [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }]);\n    if (sm_atual.state == 6 && sm_atual.mode == 2) {\n        //PRODUZINDO\n    } else {\n        //NAO PRODUZINDO\n        anotaInicioParada()\n        msg2 = null\n    }\n\n\n\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1000,
        "wires": [
            [
                "c856c3be1a85643a"
            ],
            [
                "62b3202e37e69068"
            ],
            [
                "f34a285d11a5b1e1",
                "b609ac669f885119"
            ]
        ]
    },
    {
        "id": "6c57bc432f38aede",
        "type": "inject",
        "z": "f7ad05cac9ca67b4",
        "g": "8840c09eaff5262e",
        "name": "cycle",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 290,
        "y": 1080,
        "wires": [
            [
                "7481db3d8e5ec93e",
                "b43ad4168df75421",
                "382b10f61f6dbe36"
            ]
        ]
    },
    {
        "id": "c856c3be1a85643a",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "3e402b30bacd9d10",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 840,
        "wires": [
            [
                "37a178fbea1dfc9c"
            ]
        ]
    },
    {
        "id": "406e92e2e4d91202",
        "type": "comment",
        "z": "f7ad05cac9ca67b4",
        "g": "3e402b30bacd9d10",
        "name": "Registro Troca de Turno",
        "info": "",
        "x": 1200,
        "y": 740,
        "wires": []
    },
    {
        "id": "86b857a048e0644b",
        "type": "http request",
        "z": "f7ad05cac9ca67b4",
        "g": "3e402b30bacd9d10",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "",
                "valueType": "other",
                "valueValue": ""
            }
        ],
        "x": 1890,
        "y": 840,
        "wires": [
            [
                "b5d73578be3d0328"
            ]
        ]
    },
    {
        "id": "b5d73578be3d0328",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "g": "3e402b30bacd9d10",
        "name": "debug 692",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2110,
        "y": 840,
        "wires": []
    },
    {
        "id": "e408166c53bfd320",
        "type": "comment",
        "z": "f7ad05cac9ca67b4",
        "g": "3e402b30bacd9d10",
        "name": "Turno + Tempo Transcorrido",
        "info": "",
        "x": 1220,
        "y": 900,
        "wires": []
    },
    {
        "id": "37a178fbea1dfc9c",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "3e402b30bacd9d10",
        "name": "Get fimTurnoOEE",
        "func": "msg.payload = flow.get(\"fimTurnoOEE\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 840,
        "wires": [
            [
                "8d58b4ab428063b0",
                "5ce217493306291a"
            ]
        ]
    },
    {
        "id": "8d58b4ab428063b0",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "3e402b30bacd9d10",
        "name": "statusMachineId",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.machine_event.payload.statusMachineId = 2\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.machine_event.payload.statusMachineId = 2\n            break;\n        case 5:\n            msg.payload.machine_event.payload.statusMachineId = 5\n            break;\n        case 6:\n            msg.payload.machine_event.payload.statusMachineId = 1\n            break;\n        case 9:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 840,
        "wires": [
            [
                "86b857a048e0644b"
            ]
        ]
    },
    {
        "id": "b17a672b5657d934",
        "type": "comment",
        "z": "f7ad05cac9ca67b4",
        "g": "3e402b30bacd9d10",
        "name": "Reset Counters",
        "info": "",
        "x": 1380,
        "y": 1040,
        "wires": []
    },
    {
        "id": "d0bdcdd7ae4538e0",
        "type": "inject",
        "z": "f7ad05cac9ca67b4",
        "g": "3e402b30bacd9d10",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1210,
        "y": 980,
        "wires": [
            [
                "e34ccf4c0c60ceb9"
            ]
        ]
    },
    {
        "id": "e34ccf4c0c60ceb9",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "3e402b30bacd9d10",
        "name": "function 320",
        "func": "const cmdResetAtivo = flow.get(\"cmdResetAtivo\");\nif (cmdResetAtivo) {\n    return msg\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 980,
        "wires": [
            [
                "5ce217493306291a"
            ]
        ]
    },
    {
        "id": "691eedf3851b2575",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "d": true,
        "g": "3e402b30bacd9d10",
        "name": "function 321",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nnode.warn(dadosPlc.diProductionCounter);\n\nif (dadosPlc.diProductionCounter!='0') {\n    return msg\n}\n\nlet cmdResetAtivo = flow.get(\"cmdResetAtivo\");\ncmdResetAtivo = false\nflow.set(\"cmdResetAtivo\", cmdResetAtivo);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 1020,
        "wires": [
            [
                "5ce217493306291a",
                "6229d4b53a5d4cbf"
            ]
        ]
    },
    {
        "id": "5ce217493306291a",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "3e402b30bacd9d10",
        "name": "set reset Counters",
        "func": "let cmdResetAtivo = true\nflow.set(\"cmdResetAtivo\", cmdResetAtivo);\n\nmsg.payload ={}\nmsg.payload.xResetCounter = 1\nmsg.payload.xResetReject_r1 = 1\nmsg.payload.xResetReject_r2 = 1\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 920,
        "wires": [
            [
                "691eedf3851b2575"
            ]
        ]
    },
    {
        "id": "6229d4b53a5d4cbf",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "g": "3e402b30bacd9d10",
        "name": "debug 693",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 1020,
        "wires": []
    },
    {
        "id": "f34a285d11a5b1e1",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "c426f54850392346",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1520,
        "wires": [
            [
                "f645c744cdadd93d",
                "330edf77db2f922c"
            ]
        ]
    },
    {
        "id": "3716e6829264aaec",
        "type": "http request",
        "z": "f7ad05cac9ca67b4",
        "g": "c426f54850392346",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2070,
        "y": 1540,
        "wires": [
            [
                "acd440088a24d46f"
            ]
        ]
    },
    {
        "id": "acd440088a24d46f",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "g": "c426f54850392346",
        "name": "debug 694",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2290,
        "y": 1540,
        "wires": []
    },
    {
        "id": "f645c744cdadd93d",
        "type": "delay",
        "z": "f7ad05cac9ca67b4",
        "g": "c426f54850392346",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "120",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1560,
        "y": 1500,
        "wires": [
            [
                "a97184bb542b1272"
            ]
        ]
    },
    {
        "id": "a97184bb542b1272",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "c426f54850392346",
        "name": "statusMachineId",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.machine_event.payload.statusMachineId = 3\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        case 5:\n            msg.payload.machine_event.payload.statusMachineId = 5\n            break;\n        case 6:\n            msg.payload.machine_event.payload.statusMachineId = 1\n            break;\n        case 9:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 1540,
        "wires": [
            [
                "3716e6829264aaec"
            ]
        ]
    },
    {
        "id": "330edf77db2f922c",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "c426f54850392346",
        "name": "imediato na troca de estado - com filtro****",
        "func": "let ignora_registro_maquina = flow.get(\"ignora_registro_maquina\");\n\nif (ignora_registro_maquina == 0) {\n\n\n    let ant_mode = context.get(\"ant_mode\") || 0;\n    let ant_state = context.get(\"ant_state\") || 0;\n    let config = flow.get(\"config\");\n    let name_var_global = \"plc\" + config.machine_name\n    let dadosPlc = global.get(name_var_global)\n    let mode = dadosPlc.mode\n    let state = dadosPlc.state\n\n    if (ant_mode != mode || ant_state != state) {\n        context.set(\"ant_mode\", mode);\n        context.set(\"ant_state\", state);\n        return msg\n    }\n\n\n} else {\n\n    ignora_registro_maquina = ignora_registro_maquina - 1\n    flow.set(\"ignora_registro_maquina\", ignora_registro_maquina);\n\n}\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 1580,
        "wires": [
            [
                "a97184bb542b1272"
            ]
        ]
    },
    {
        "id": "d75c606e1e276525",
        "type": "comment",
        "z": "f7ad05cac9ca67b4",
        "g": "7c97cedd515a1119",
        "name": "Registro Fim da Parada de Linha",
        "info": "",
        "x": 1270,
        "y": 1440,
        "wires": []
    },
    {
        "id": "dec30d66882e6385",
        "type": "http request",
        "z": "f7ad05cac9ca67b4",
        "g": "7c97cedd515a1119",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1910,
        "y": 1280,
        "wires": [
            [
                "053d5634bf2adbe2"
            ]
        ]
    },
    {
        "id": "053d5634bf2adbe2",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "g": "7c97cedd515a1119",
        "name": "debug 695",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2210,
        "y": 1300,
        "wires": []
    },
    {
        "id": "62b3202e37e69068",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "7c97cedd515a1119",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n\n    //msg.payload.machine_event.payload.ID = 999;\n\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1300,
        "wires": [
            [
                "4d681cc2d972dc5a"
            ]
        ]
    },
    {
        "id": "4d681cc2d972dc5a",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "7c97cedd515a1119",
        "name": "function 322",
        "func": "\nif (msg.payload != null) {\n\n    if (msg.payload.machine_event.payload.ID != 8888) {\n        return [msg, msg]\n    } else return [msg, msg];\n\n\n\n\n} else {\n\n    node.warn(\"Mudanca de estado sem registro\");\n\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 1300,
        "wires": [
            [
                "dec30d66882e6385"
            ],
            [
                "2d453ba056efc48a"
            ]
        ]
    },
    {
        "id": "7f2e092ff6c59cb2",
        "type": "postgresql",
        "z": "f7ad05cac9ca67b4",
        "g": "7c97cedd515a1119",
        "name": "",
        "query": "INSERT INTO public.appoint\n(payload)\nVALUES('{{{msg.payload}}}');",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1970,
        "y": 1360,
        "wires": [
            [
                "976e5035e94f5361"
            ]
        ]
    },
    {
        "id": "976e5035e94f5361",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "g": "7c97cedd515a1119",
        "name": "debug 696",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 1360,
        "wires": []
    },
    {
        "id": "2d453ba056efc48a",
        "type": "json",
        "z": "f7ad05cac9ca67b4",
        "g": "7c97cedd515a1119",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1790,
        "y": 1360,
        "wires": [
            [
                "7f2e092ff6c59cb2"
            ]
        ]
    },
    {
        "id": "83873082eb16b14e",
        "type": "link in",
        "z": "f7ad05cac9ca67b4",
        "g": "7c97cedd515a1119",
        "name": "apontamento maquina",
        "links": [
            "828061297503db73"
        ],
        "x": 1115,
        "y": 1400,
        "wires": [
            [
                "ead2818fef6ebedc"
            ]
        ]
    },
    {
        "id": "e45833eb01a9259a",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "g": "7c97cedd515a1119",
        "name": "debug 697",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 1400,
        "wires": []
    },
    {
        "id": "ead2818fef6ebedc",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "7c97cedd515a1119",
        "name": "Atualiza Parada - Apontamento",
        "func": "const config = flow.get(\"config\");\n\nlet parada = flow.get(\"parada\");\n\nparada.statechanged_id = msg.payload.newStopReason[1]\nparada.statechanged_reason = msg.payload.newStopReason[0]\nparada.programada = msg.payload.newStopReason[2]\nparada.justifica = true\n\n\nflow.set(\"parada\", parada);\nglobal.set(\"parada\" + config.machine_name, parada);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1400,
        "wires": [
            [
                "e45833eb01a9259a"
            ]
        ]
    },
    {
        "id": "986389cf83d02b1e",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "g": "705bc819b205edc1",
        "name": "debug 698",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1220,
        "wires": []
    },
    {
        "id": "b43ad4168df75421",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "705bc819b205edc1",
        "name": "Calc Actual Stop",
        "func": "const lastState = flow.get(\"lastState\");\n\nconst lastTime = new Date(lastState[0].timestamp);\nconst currentTime = new Date();\n\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  AJUSTE DE TEMPO xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//const timezoneOffset = currentTime.getTimezoneOffset();\nconst timezoneOffset = 0\n\n\n\nlastTime.setHours(lastTime.getHours() - timezoneOffset / 60);\n\nnode.status({ fill: \"red\", shape: \"ring\", text: lastState[1] });\n\n\n\n\n// Converte para segundos\nconst lastTimeInSeconds = Math.floor(lastTime.getTime() / 1000);\nconst currentTimeInSeconds = Math.floor(currentTime.getTime() / 1000);\n\nconst timeDifference = (currentTimeInSeconds - lastTimeInSeconds) / 60;\n\nmsg.payload = {}\n\nmsg.payload.actualDuration = lastState[1] = timeDifference\nmsg.payload.actualState = lastState[0].payload.machine_event.payload.state\nmsg.payload.actualMode = lastState[0].payload.machine_event.payload.mode\n\n\nconst tempoTranscorrido = flow.get(\"tempoTranscorrido\");\n\nif (lastState[1] > tempoTranscorrido) {\n    lastState[1] = tempoTranscorrido\n\n}\nflow.set(\"lastState\", lastState);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar sumProg_NProgr_parcial = flow.get(\"sumProg_NProgr_parcial\") || [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }];\nlet parada = flow.get(\"parada\");\nif (!isNaN(parada.tParadaAtual)) {\n    //node.warn(parada.active);\n    \n    var calcSumProg_NProgr = JSON.parse(JSON.stringify(sumProg_NProgr_parcial))\n    if (parada.active) {\n\n        if (parada.programada == 'true') {\n            //node.warn(\"Programada\");\n            calcSumProg_NProgr[0].soma_programada = Number(sumProg_NProgr_parcial[0].soma_programada) + Number(parada.tParadaAtual)\n            calcSumProg_NProgr[0].soma_nao_programada = Number(sumProg_NProgr_parcial[0].soma_nao_programada)\n\n            //node.warn(sumProg_NProgr[0].soma_programada);\n        } else {\n            \n            //node.warn(\"Nao Programada\");\n            //node.warn(Number(sumProg_NProgr_parcial[0].soma_nao_programada));\n            //node.warn(Number(parada.tParadaAtual));\n            calcSumProg_NProgr[0].soma_programada = Number(sumProg_NProgr_parcial[0].soma_programada)\n            calcSumProg_NProgr[0].soma_nao_programada = Number(sumProg_NProgr_parcial[0].soma_nao_programada) + Number(parada.tParadaAtual)\n            //node.warn(sumProg_NProgr[0].soma_nao_programada);\n        }\n    } else {\n        calcSumProg_NProgr = sumProg_NProgr_parcial\n\n    }\n} else {\n    calcSumProg_NProgr = sumProg_NProgr_parcial\n    \n}\n\nflow.set(\"sumProg_NProgr\", calcSumProg_NProgr) || [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1220,
        "wires": [
            [
                "986389cf83d02b1e"
            ]
        ]
    },
    {
        "id": "b609ac669f885119",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "monitor troca de estado",
        "func": "let config = flow.get(\"config\");\n//msg.config = config\n\n\n\nlet sm_atual = flow.get(\"sm_atual\");\nlet sm_anterior = flow.get(\"sm_anterior_iot\") || { mode: \"0\", state: \"0\" };\n\nif ((sm_atual.mode != sm_anterior.mode) || (sm_atual.state != sm_anterior.state)) {\n\n    //node.warn(\"mudou\");\n    flow.set(\"sm_anterior_iot\", sm_atual);\n\n    msg.machine_id = config.machine_id\n\n    return msg;\n\n\n\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1860,
        "wires": [
            [
                "40f7c21d022971d4"
            ]
        ]
    },
    {
        "id": "40f7c21d022971d4",
        "type": "json",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1430,
        "y": 1860,
        "wires": [
            [
                "0dea3e7d36721322"
            ]
        ]
    },
    {
        "id": "5ccdcefcf2d61c67",
        "type": "inject",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "60 segundos",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1580,
        "y": 1780,
        "wires": [
            [
                "b180622bc037e810"
            ]
        ]
    },
    {
        "id": "b180622bc037e810",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "consulta turno e ajsute de filtro",
        "func": "const config = flow.get(\"config\");\nmsg.machine_id = config.machine_id\n// Recupera a lista de horários de turnos a partir de uma variável global e o índice do turno desejado da variável de fluxo.\nlet horarios_turnos = global.get(\"turnos_times\");\nlet turno = flow.get(\"memo_turno\");\n\n// Faz uma cópia da lista de horários para evitar modificar o valor original na variável global.\nlet turnos_times = JSON.parse(JSON.stringify(horarios_turnos));\n\n// Obtém a data e hora atuais.\nconst today = new Date();\n// Define o início do dia (00:00:00) para a data atual. Essa data será usada para calcular o tempo em segundos desde a meia-noite.\nconst startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n// Converte o início do dia em formato epoch (segundos desde 1 de janeiro de 1970).\nconst epochTime = Math.floor(startOfDay.getTime() / 1000);\n\n\n\n\n\n// Define o ajuste de fuso horário em segundos. Neste caso, são 10800 segundos (ou 3 horas).\nconst timezoneOffset = -7200; // 2 horas em segundos\n\n// Define a quantidade de segundos em um dia, para lidar com turnos que ultrapassam a meia-noite.\nconst secondsInDay = 86400; // 24 horas em segundos\n\n// Itera sobre cada turno para calcular e ajustar os horários de início e fim.\nfor (let index = 0; index < turnos_times.length; index++) {\n    // Remove propriedades desnecessárias de cada turno para simplificar os dados.\n    delete turnos_times[index].created_at;\n    delete turnos_times[index].updated_at;\n    delete turnos_times[index].id;\n\n    // Extrai a parte do horário de início do turno (no formato 'HH:MM:SS') para conversão em segundos.\n    const [hours_s, minutes_s, seconds_s] = turnos_times[index].start_time.substring(11, 19).split(':').map(Number);\n    // Converte o horário de início em segundos: (horas * 3600) + (minutos * 60) + segundos.\n    const totalSecondsStart = hours_s * 3600 + minutes_s * 60 + seconds_s;\n\n    // Extrai a parte do horário de fim do turno (também no formato 'HH:MM:SS') para conversão em segundos.\n    const [hours_e, minutes_e, seconds_e] = turnos_times[index].end_time.substring(11, 19).split(':').map(Number);\n    // Converte o horário de fim em segundos: (horas * 3600) + (minutos * 60) + segundos.\n    const totalSecondsEnd = hours_e * 3600 + minutes_e * 60 + seconds_e;\n\n    // Calcula o horário de início absoluto do turno, somando o epoch do dia, o horário de início em segundos e o ajuste de fuso horário.\n    let start_time = new Date((epochTime + totalSecondsStart + timezoneOffset) * 1000);\n    // Calcula o horário de fim absoluto do turno da mesma forma.\n    let end_time = new Date((epochTime + totalSecondsEnd + timezoneOffset) * 1000);\n\n    // Verifica se o horário de início é maior que o horário de fim, indicando que o turno ultrapassa a meia-noite.\n    if (start_time > end_time) {\n        // Ajusta o horário de fim, somando um dia (em segundos) para representar corretamente um turno que termina no dia seguinte.\n        end_time = new Date((epochTime + totalSecondsEnd + timezoneOffset + secondsInDay) * 1000);\n    }\n\n    // Converte os horários de início e fim ajustados para o formato ISO e atualiza no objeto do turno.\n    turnos_times[index].start_time = start_time.toISOString();\n    turnos_times[index].end_time = end_time.toISOString();\n}\n\n// Define a saída da mensagem como o turno específico desejado (indexado com base no número do turno menos 1).\nmsg.payload = turnos_times[turno - 1];\nmsg.machine_id = config.machine_id\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 1860,
        "wires": [
            [
                "5974b17b9aa844f6",
                "0304080e0beef1b1",
                "8f9c69863ab6244e",
                "072a80763e493c06",
                "5af5da13384164e5"
            ]
        ]
    },
    {
        "id": "29855c18b5b9a3a0",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "monta resumo de tempos",
        "func": "const data = msg.payload;\n\n// Converte para o formato desejado, agrupando por `mode` e `state`\nconst result = data.reduce((acc, { mode, state, total_active_duration }) => {\n  if (!acc[mode]) acc[mode] = {}; // Cria a entrada para o mode se não existir\n  acc[mode][state] = (acc[mode][state] || 0) + Number(parseFloat(total_active_duration)); // Soma o total_active_duration\n  return acc;\n}, {});\n\n// verifica se a soma de todos os estados esta consistente com o tempo de turno transcorrifo\nlet config = flow.get(\"config\");\nlet turno = global.get(\"turno_\" + config.factory)\n//node.warn(turno);\n\n\n\n\n// Inicializa `msg.payload` com o objeto `omac`\nmsg.payload = { omac: result };\n\n\n\n// verifica o estado atual e altera o omac\nlet lastState = flow.get(\"lastState\");\n\nif (lastState && lastState[0] && lastState[0].payload) {\n  const mode = lastState[0].payload.machine_event.payload.mode;\n  const state = lastState[0].payload.machine_event.payload.state;\n\n  // Verifica se mode e state existem em msg.payload.omac antes de somar\n  if (msg.payload.omac[mode] && msg.payload.omac[mode][state] !== undefined) {\n    msg.payload.omac[mode][state] =\n      Number(parseFloat(msg.payload.omac[mode][state])) + Number(parseFloat(lastState[1]));\n  }\n}\n\n\n\n\nlet totalProductive = 0;\nlet totalNonProductive = 0;\n\n// Calcula os totais produtivos e não produtivos\nObject.entries(result).forEach(([mode, states]) => {\n  Object.entries(states).forEach(([state, activeMinutes]) => {\n    const minutes = Number(parseFloat(activeMinutes));\n\n    if (state === \"6\" && mode === \"2\") {\n      totalProductive += minutes;\n    } else {\n      totalNonProductive += minutes;\n    }\n  });\n});\n\n\n\n// Armazena `msg.payload` no fluxo para acesso posterior\nflow.set(\"temposOEE_parcial\", msg.payload);\n\n\n\n// Adiciona os somatórios ao `msg.payload`\nmsg.payload.somas = {\n  totalProductive: totalProductive,\n  totalNonProductive: totalNonProductive\n};\n\n\n\n// Retorna `msg` atualizado\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 1860,
        "wires": [
            [
                "95eec54cd7e4e2a1"
            ]
        ]
    },
    {
        "id": "7a65b17a666a8cae",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "debug 699",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 1940,
        "wires": []
    },
    {
        "id": "5e6bc4f9effdb8ca",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "consulta ultimo registro",
        "func": "msg.payload[0].payload = JSON.parse(msg.payload[0].payload)\nflow.set(\"lastState\", msg.payload);\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 1920,
        "wires": [
            [
                "7a65b17a666a8cae"
            ]
        ]
    },
    {
        "id": "b799046835a24eaf",
        "type": "inject",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2280,
        "y": 2060,
        "wires": [
            [
                "79d3fcf53a8feef4"
            ]
        ]
    },
    {
        "id": "fa2870091bd5f90e",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "debug 700",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2910,
        "y": 2060,
        "wires": []
    },
    {
        "id": "79d3fcf53a8feef4",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "function 323",
        "func": "let horarios_turnos = global.get(\"turnos_times\");\nlet turno = flow.get(\"memo_turno\");\n\nlet turnos_times = JSON.stringify(horarios_turnos)\nturnos_times = JSON.parse(turnos_times);\n//node.warn(turnos_times);\n\nconst today = new Date();\nconst startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\nconst epochTime = Math.floor(startOfDay.getTime() / 1000); // Converte de milissegundos para segundos\n//node.warn(epochTime); // Exibe a data de hoje às 00:00 em epoch (segundos)\n\nfor (let index = 0; index < turnos_times.length; index++) {\n    delete turnos_times[index].created_at\n    delete turnos_times[index].updated_at\n    delete turnos_times[index].id\n\n    const timePart_start = turnos_times[index].start_time.substring(11, 19); // '06:00:00'\n    // Divide a hora, minuto e segundo\n    const [hours_s, minutes_s, seconds_s] = timePart_start.split(':').map(Number);\n    // Converte para segundos\n    const totalMinutes_start = ((hours_s * 3600) + (minutes_s * 60) + (seconds_s));\n\n\n    const timePart_end = turnos_times[index].end_time.substring(11, 19); // '06:00:00'\n    // Divide a hora, minuto e segundo\n    const [hours_e, minutes_e, seconds_e] = timePart_end.split(':').map(Number);\n    // Converte para segundos\n    const totalMinutes_end = ((hours_e * 3600) + (minutes_e * 60) + (seconds_e));\n\n    //node.warn(totalMinutes_start);\n    //node.warn(totalMinutes_end);\n\n    const start_time = new Date((epochTime + totalMinutes_start)*1000)\n    const end_time = new Date((epochTime + totalMinutes_end)*1000)\n\n  \n\n    turnos_times[index].start_time = start_time.toISOString()\n    turnos_times[index].end_time = end_time.toISOString()\n\n\n\n  \n\n}\n\nmsg.payload = turnos_times[turno-1]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 2060,
        "wires": [
            [
                "34c6b311a2735348"
            ]
        ]
    },
    {
        "id": "eb25355057b0ba69",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "debug 701",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 2000,
        "wires": []
    },
    {
        "id": "95eec54cd7e4e2a1",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "debug 702",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 1860,
        "wires": []
    },
    {
        "id": "0dea3e7d36721322",
        "type": "postgresql",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "",
        "query": "INSERT INTO public.machine_events\n(id_machine, payload)\nVALUES({{{msg.machine_id}}}, '{{{msg.payload}}}');",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1590,
        "y": 1860,
        "wires": [
            [
                "b180622bc037e810"
            ]
        ]
    },
    {
        "id": "5974b17b9aa844f6",
        "type": "postgresql",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n),\nfiltered_intervals AS (\n    SELECT \n        id_machine,\n        mode,\n        state,\n        \n        -- Calcula o início e o fim ajustados do evento, limitados pelo intervalo de filtro\n        GREATEST(timestamp at time zone 'UTC' at time zone 'GMT-3', '{{{msg.payload.start_time}}}'::timestamp) AS adjusted_start,\n        LEAST(next_timestamp at time zone 'UTC' at time zone 'GMT-3', '{{{msg.payload.end_time}}}'::timestamp) AS adjusted_end\n        \n    FROM \n        state_intervals\n    WHERE \n        next_timestamp at time zone 'UTC' at time zone 'GMT-3' > '{{{msg.payload.start_time}}}'::timestamp  -- start_filter\n        AND timestamp at time zone 'UTC' at time zone 'GMT-3' <'{{{msg.payload.end_time}}}'::timestamp     -- end_filter\n        AND id_machine = 7  -- substitua 1 pelo id_machine desejado\n)\nSELECT \n    id_machine,\n    mode,\n    state,\n    \n    -- Calcula o tempo ativo total ajustado dentro do intervalo\n    SUM(\n        CASE \n            WHEN adjusted_end > adjusted_start THEN \n                EXTRACT(EPOCH FROM (adjusted_end - adjusted_start)) / 60  -- Tempo em minutos\n            ELSE \n                0\n        END\n    ) AS total_active_duration\nFROM \n    filtered_intervals\nGROUP BY \n    id_machine,\n    mode,\n    state\nORDER BY \n    id_machine,\n    mode,\n    state;\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2270,
        "y": 1860,
        "wires": [
            [
                "c633ef4863f65a1c"
            ]
        ]
    },
    {
        "id": "34c6b311a2735348",
        "type": "postgresql",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n)\nSELECT \n    id,\n    timestamp,\n    id_machine,\n    payload,\n    mode,\n    state,\n    next_timestamp,\n    -- Calcula o tempo que o estado ficou ativo\n    CASE \n        WHEN next_timestamp IS NOT NULL THEN \n            AGE(next_timestamp, timestamp)\n        ELSE \n            NULL\n    END AS active_duration\nFROM \n    state_intervals\nORDER BY \n    timestamp;",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2690,
        "y": 2060,
        "wires": [
            [
                "fa2870091bd5f90e"
            ]
        ]
    },
    {
        "id": "0304080e0beef1b1",
        "type": "postgresql",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "",
        "query": "SELECT *\nFROM machine_events\nWHERE id_machine =7\nORDER BY timestamp DESC\nlimit 1\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2270,
        "y": 1920,
        "wires": [
            [
                "5e6bc4f9effdb8ca"
            ]
        ]
    },
    {
        "id": "8f9c69863ab6244e",
        "type": "postgresql",
        "z": "f7ad05cac9ca67b4",
        "d": true,
        "g": "c267a35f335af2c4",
        "name": "Lista FIltrada Tempo e Maquina",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n)\nSELECT \n    id,\n    timestamp AS start_time,       -- Hora inicial do estado\n    next_timestamp AS end_time,    -- Hora final do estado\n    id_machine,\n    payload,\n    mode,\n    state,\n    -- Calcula o tempo que o estado ficou ativo em minutos\n    CASE \n        WHEN next_timestamp IS NOT NULL THEN \n            EXTRACT(EPOCH FROM (next_timestamp - timestamp)) / 60  -- Tempo em minutos\n        ELSE \n            NULL\n    END AS active_duration\nFROM \n    state_intervals\nWHERE \n    -- Filtros aplicados na tabela de saída\n    next_timestamp > '{{{msg.payload.start_time}}}'::timestamp  -- start_filter\n    AND timestamp < '{{{msg.payload.end_time}}}'::timestamp   -- end_filter\n    AND id_machine = 1  -- substitua 123 pelo id_machine desejado\nORDER BY \n    timestamp;\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2330,
        "y": 2000,
        "wires": [
            [
                "eb25355057b0ba69"
            ]
        ]
    },
    {
        "id": "c633ef4863f65a1c",
        "type": "delay",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2520,
        "y": 1860,
        "wires": [
            [
                "29855c18b5b9a3a0"
            ]
        ]
    },
    {
        "id": "072a80763e493c06",
        "type": "postgresql",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "",
        "query": "SELECT\n    SUM(CASE \n            WHEN (payload::jsonb->'machine_event'->'payload'->>'Programada')::boolean = true THEN \n                (payload::jsonb->'machine_event'->'payload'->>'tParada')::numeric \n            ELSE 0 \n        END) AS soma_programada,\n    SUM(CASE \n            WHEN (payload::jsonb->'machine_event'->'payload'->>'Programada')::boolean = false THEN \n                (payload::jsonb->'machine_event'->'payload'->>'tParada')::numeric \n            ELSE 0 \n        END) AS soma_nao_programada\nFROM public.appoint\nWHERE \n    to_timestamp((payload::jsonb->'machine_event'->'payload'->>'InicioParada')::bigint / 1000) AT TIME ZONE 'UTC' >= '{{{msg.payload.start_time}}}'\n    AND to_timestamp((payload::jsonb->'machine_event'->'payload'->>'FimParada')::bigint / 1000) AT TIME ZONE 'UTC' <= '{{{msg.payload.end_time}}}'\n    AND ((payload::jsonb->'machine_event'->'payload'->>'machine_id')::int) = 7\n    ",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2270,
        "y": 1800,
        "wires": [
            [
                "6e557644845cf499"
            ]
        ]
    },
    {
        "id": "81913956ac1124a5",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "debug 703",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 1800,
        "wires": []
    },
    {
        "id": "6e557644845cf499",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "SET Prog e Nao Pog",
        "func": "const soma_programada = Number(msg.payload[0].soma_programada) || 0\nconst soma_nao_programada = Number(msg.payload[0].soma_nao_programada) || 0\n\nconst sumProg_NProgr_parcial = [{\n    \"soma_programada\":soma_programada,\n    \"soma_nao_programada\": soma_nao_programada\n}]\n\nflow.set(\"sumProg_NProgr_parcial\", sumProg_NProgr_parcial);\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2740,
        "y": 1800,
        "wires": [
            [
                "81913956ac1124a5"
            ]
        ]
    },
    {
        "id": "5af5da13384164e5",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "g": "c267a35f335af2c4",
        "name": "debug 704",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 2020,
        "wires": []
    },
    {
        "id": "5d374ed49c4e1cca",
        "type": "http request",
        "z": "f7ad05cac9ca67b4",
        "g": "484a492735669b11",
        "name": "GET StopReasons",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1590,
        "y": 220,
        "wires": [
            [
                "d4490c31d033ef76"
            ]
        ]
    },
    {
        "id": "d4490c31d033ef76",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "484a492735669b11",
        "name": "function 324",
        "func": "const data = JSON.parse(msg.payload)\nlet id = Math.floor(msg.id_maq)\n\nif (Number.isNaN(id)) {\n    id = null\n}\n\n\nmsg.payload = {}\n\n\nfunction StopsByMachine(data, selectedId = null) {\n    const machineMap = new Map();\n    data.forEach(event => {\n        event.machines.forEach(machine => {\n            if (!machineMap.has(machine.id)) {\n                machineMap.set(machine.id, { id: machine.id, name: machine.name, stopReasons: [] });\n            }\n            machineMap.get(machine.id).stopReasons.push([event.plc_code, event.name, event.expected]);\n        });\n    });\n\n    if (selectedId !== null) {\n        return machineMap.has(selectedId) ? machineMap.get(selectedId) : null;\n    }\n\n    return Array.from(machineMap.values());\n}\n\n\n\nfunction listUniqueMachineNames(data) {\n\n    const machines = new Map();\n    data.forEach(event => {\n        event.machines.forEach(machine => {\n            machines.set(machine.id, machine.name);\n        });\n    });\n\n    const result = Array.from(machines).map(([id, name]) => ({ id, name }));\n\n    return result\n\n\n}\n\n\n\n// Chamar a função e imprimir o resultado\nmsg.payload.maquinas = listUniqueMachineNames(data);\n\n\n\n// Executar a função e imprimir o resultado\nmsg.payload.stopreasons = StopsByMachine(data, id);\n\nflow.set(\"stopreasons\", msg.payload.stopreasons);\n\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 220,
        "wires": [
            [
                "253fe9ac9810b46b"
            ]
        ]
    },
    {
        "id": "2a5816c1872e0eac",
        "type": "inject",
        "z": "f7ad05cac9ca67b4",
        "g": "484a492735669b11",
        "name": "",
        "props": [],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1250,
        "y": 220,
        "wires": [
            [
                "5e700a8b2e42223f"
            ]
        ]
    },
    {
        "id": "253fe9ac9810b46b",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "g": "484a492735669b11",
        "name": "debug 705",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 220,
        "wires": []
    },
    {
        "id": "5e700a8b2e42223f",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "484a492735669b11",
        "name": "Config",
        "func": "\nlet config = flow.get(\"config\")\n\n//msg.id_maq = msg.req.params.id_maq\nmsg.id_maq = config.machine_id\n\n//node.warn(\"Aqui\");\n\nif (config.send == true) {\n  \n\n    msg.url = config.url + \"/stop_reasons.json\"\n    msg.headers = {}\n    msg.headers['Authorization'] = config.token_line\n    msg.payload = {}\n\n\nreturn msg\n\n\n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 220,
        "wires": [
            [
                "5d374ed49c4e1cca"
            ]
        ]
    },
    {
        "id": "a92fb897fea8b2e9",
        "type": "inject",
        "z": "f7ad05cac9ca67b4",
        "d": true,
        "g": "484a492735669b11",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "100",
        "topic": "",
        "x": 1250,
        "y": 280,
        "wires": [
            [
                "640c3ec896b5b891"
            ]
        ]
    },
    {
        "id": "640c3ec896b5b891",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "484a492735669b11",
        "name": "lista paradas",
        "func": "msg.payload = {}\n\n\nlet lista_paradas = [\n    {\n        \"id\": 2,\n        \"descr\": \"\",\n        \"cod_class\": 0, \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    }\n]\n\n\nconst paradas = flow.get(\"stopreasons\");\n\nnode.warn(lista_paradas);\nnode.warn(paradas);\n\nfor (let index = 0; index < paradas.stopReasons.length; index++) {\n    //node.warn(paradas.stopReasons[index][0]);\n    lista_paradas[index].id = 9999\n    lista_paradas[index].descr = paradas.stopReasons[index][1]\n    lista_paradas[index].cod_class = paradas.stopReasons[index][0]\n    lista_paradas[index].ZZZZZZZZZZudtZIA_Par3 = 5\n    lista_paradas[index].progr = paradas.stopReasons[index][2]\n}\n\n\nnode.warn(lista_paradas);\n\nmsg.payload.paradas = lista_paradas\n\nreturn msg\n\n\n// msg.payload = {\n//     \"id\": 23,\n//     \"descr\": \"\",\n//     \"cod_class\": 0,\n//     \"ZZZZZZZZZZudtZIA_Par3\": 0,\n//     \"progr\": false\n// }\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 280,
        "wires": [
            [
                "72e74f5712d04bd3",
                "3375b875e63ffb05"
            ]
        ]
    },
    {
        "id": "72e74f5712d04bd3",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "g": "484a492735669b11",
        "name": "debug 706",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 340,
        "wires": []
    },
    {
        "id": "58453b6aa86e88fa",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "09f36abc8ddd73ab",
        "name": "Alarme",
        "func": "let memo_aux_id_falha = context.get(\"aux_id_falha\");\nif (msg.payload.aux_id_falha != memo_aux_id_falha) {\n    if (msg.payload.aux_id_falha != 0 && msg.payload.aux_id_falha != 9999) {\n        let config = flow.get(\"config\");\n        let dados_alm = {\n            TimeStamp: new Date(),\n            nameMachine: config.machine_name,\n            ID: msg.payload.aux_id_falha,\n            reason: msg.payload.lastalm\n        };\n        const d = new Date();\n        let minutes = d.getMinutes();\n        let agora = new Date()\n        msg.payload = {\n            \"authenticity_token\": \"L3uhfD4yxArDD6++xrFmFX9LLKfX5PyMstpcUL0zi6SRrHAzTqfBCj1iKfYp4o6GLK9emMZYiAmxF1T9C7BQ==\",\n            \"machine_event\": {\n                \"timestamp(1i)\": agora.getFullYear().toString(),\n                \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n                \"timestamp(3i)\": agora.getDate().toString(),\n                \"timestamp(4i)\": agora.getHours().toString(),\n                \"timestamp(5i)\": agora.getMinutes().toString(),\n                \"event_type_id\": 5,\n                //        \"timestamp(3i)\": d.getDay(),\n                //        \"timestamp(2i)\": d.getMonth(),\n                //        \"timestamp(1i)\": d.getFullYear(),\n                //        \"timestamp(4i)\": d.getHours(),\n                //        \"timestamp(5i)\": d.getMinutes(),\n                \"payload\": dados_alm\n            }\n        }\n        context.set(\"aux_id_falha\", dados_alm.ID);\n        return msg\n    }\n}\ncontext.set(\"aux_id_falha\", msg.payload.aux_id_falha);\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 2660,
        "wires": [
            [
                "354bd04dc2cc2df4"
            ]
        ]
    },
    {
        "id": "ad51db84bbe6e299",
        "type": "http request",
        "z": "f7ad05cac9ca67b4",
        "g": "09f36abc8ddd73ab",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1510,
        "y": 2660,
        "wires": [
            [
                "a3de45c801bf6c05"
            ]
        ]
    },
    {
        "id": "a3de45c801bf6c05",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "g": "09f36abc8ddd73ab",
        "name": "debug 707",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 2660,
        "wires": []
    },
    {
        "id": "354bd04dc2cc2df4",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "09f36abc8ddd73ab",
        "name": "function 325",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2660,
        "wires": [
            [
                "ad51db84bbe6e299",
                "b2d5881d0ba1aabe"
            ]
        ]
    },
    {
        "id": "6bba61499e9c64a4",
        "type": "link in",
        "z": "f7ad05cac9ca67b4",
        "g": "481344f3aac63db9",
        "name": "link in 35",
        "links": [
            "615e1f011ffb0b71"
        ],
        "x": 275,
        "y": 1680,
        "wires": [
            [
                "d321020b76e933dc"
            ]
        ]
    },
    {
        "id": "c409dc4efd8c8ec8",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "481344f3aac63db9",
        "name": "function 343",
        "func": "const config = flow.get(\"config\");\nconst guilt = msg.payload[config.machine_name]\nlet name_var_global = \"plc\" + config.machine_name\n\n\n\nif (guilt) {\n    node.warn(\"my warning\");\n    //atualiza a hora da parada com a hora que a enchedora (gargalo) parou\n    let parada = flow.get(\"parada\");\n    const parada_linha = JSON.parse(JSON.stringify(parada))\n    parada_linha.hora = new Date().getTime()\n    parada_linha.machine_id = config.machine_id\n    parada_linha.machine_name = config.machine_name\n    parada_linha.active = true\n    global.set(\"parada_linha\", parada_linha)\n    return msg;\n\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1680,
        "wires": [
            [
                "eaeb557161bb3cd0"
            ]
        ]
    },
    {
        "id": "d321020b76e933dc",
        "type": "delay",
        "z": "f7ad05cac9ca67b4",
        "g": "481344f3aac63db9",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 1680,
        "wires": [
            [
                "c409dc4efd8c8ec8"
            ]
        ]
    },
    {
        "id": "4aba47952de30549",
        "type": "link in",
        "z": "f7ad05cac9ca67b4",
        "g": "481344f3aac63db9",
        "name": "link in 36",
        "links": [
            "31d753b6c2f98a0f"
        ],
        "x": 275,
        "y": 1740,
        "wires": [
            [
                "a0341471feea052e"
            ]
        ]
    },
    {
        "id": "a0341471feea052e",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "481344f3aac63db9",
        "name": "function 344",
        "func": "let config = flow.get(\"config\");\nlet retorno = new Date()\nlet parada = global.get(\"parada_linha\");\n\nif (parada.machine_id == config.machine_id) {\n\n    let tParada = (retorno.getTime() - parada.hora) / 1000 / 60\n    //let paradasSoma = flow.get(\"paradasSoma\") || flow.set(\"paradasSoma\", { \"Prog\": 0, \"Nprog\": 0 })\n    let turno = global.get(\"turno_\" + config.factory)\n    let machine_event = {}\n\n    machine_event = {\n        \"timestamp(1i)\": retorno.getFullYear().toString(),\n        \"timestamp(2i)\": (retorno.getMonth() + 1).toString(),\n        \"timestamp(3i)\": retorno.getDate().toString(),\n        \"timestamp(4i)\": retorno.getHours().toString(),\n        \"timestamp(5i)\": retorno.getMinutes().toString(),\n        \"timestamp(6i)\": retorno.getSeconds().toString(),\n        \"event_type_id\": 4,\n        \"payload\": {\n            \"aux_id_falha\": parada.aux_id_falha,\n            \"InicioParada\": parada.hora,\n            \"FimParada\": new Date().getTime(),\n            \"tParada\": Number(tParada.toFixed(2)),\n            \"ID\": isNaN(Number(parada.statechanged_id)) ? 0 : Number(parada.statechanged_id), // Garantir que ID seja um número\n            \"Reason\": parada.statechanged_reason,\n            \"ModeReason\": parada.mode,\n            \"StateReason\": parada.state || 0,\n            \"Programada\": parada.programada,\n            \"turno_atual\": turno.turno,\n            \"equip\": config.machine_name,\n            \"machine_id\": config.machine_id,\n            \"guilt\": false\n        }\n    }\n\n    parada.active = false\n    msg.payload.machine_event = machine_event\n\n\n\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1740,
        "wires": [
            [
                "efb6b527106f6d5c"
            ]
        ]
    },
    {
        "id": "61247923fa1ac3e0",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "g": "481344f3aac63db9",
        "name": "debug 724",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1740,
        "wires": []
    },
    {
        "id": "efb6b527106f6d5c",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "481344f3aac63db9",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n\n    //msg.payload.machine_event.payload.ID = 999;\n\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1740,
        "wires": [
            [
                "f055952d105307bc"
            ]
        ]
    },
    {
        "id": "eaeb557161bb3cd0",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "g": "481344f3aac63db9",
        "name": "debug 725",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1680,
        "wires": []
    },
    {
        "id": "382b10f61f6dbe36",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "g": "481344f3aac63db9",
        "name": "Update tempo parada linha",
        "func": "let parada_linha = global.get(\"parada_linha\");\n\nif (parada_linha.active) {\n    let retorno = new Date()\n    \n    let tParada = (retorno.getTime() - parada_linha.hora) / 1000 / 60\n    parada_linha.tParadaAtual = tParada\n\n\n\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "f055952d105307bc",
        "type": "http request",
        "z": "f7ad05cac9ca67b4",
        "g": "481344f3aac63db9",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 770,
        "y": 1740,
        "wires": [
            [
                "61247923fa1ac3e0"
            ]
        ]
    },
    {
        "id": "02c56811e0c69e88",
        "type": "pccc in",
        "z": "f7ad05cac9ca67b4",
        "endpoint": "5af0070c91460327",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "27bdd2759b1b77ac"
            ]
        ]
    },
    {
        "id": "3cf0fb65695157ab",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "name": "debug 728",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 300,
        "wires": []
    },
    {
        "id": "27bdd2759b1b77ac",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "name": "function 347",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet str_recipename\n\nswitch (msg.payload.iActualRecipe) {\n    case 1:\n        str_recipename = msg.payload.RecipeName1\n        break;\n    case 2:\n        str_recipename = msg.payload.RecipeName2\n        break;\n    case 3:\n        str_recipename = msg.payload.RecipeName3\n        break;\n    case 4:\n        str_recipename = msg.payload.RecipeName4\n        break;\n    case 5:\n        str_recipename = msg.payload.RecipeName5\n        break;\n    case 6:\n        str_recipename = msg.payload.RecipeName6\n        break;\n    case 7:\n        str_recipename = msg.payload.RecipeName7\n        break;\n    case 8:\n        str_recipename = msg.payload.RecipeName8\n        break;\n    case 9:\n        str_recipename = msg.payload.RecipeName9\n        break;\n    case 10:\n        str_recipename = msg.payload.RecipeName10\n        break;\n    case 11:\n        str_recipename = msg.payload.RecipeName11\n        break;\n    case 12:\n        str_recipename = msg.payload.RecipeName12\n        break;\n    case 13:\n        str_recipename = msg.payload.RecipeName13\n        break;\n    case 14:\n        str_recipename = msg.payload.RecipeName14\n        break;\n    case 15:\n        str_recipename = msg.payload.RecipeName15\n        break;\n    case 16:\n        str_recipename = msg.payload.RecipeName16\n        break;\n    case 17:\n        str_recipename = msg.payload.RecipeName17\n        break;\n    case 18:\n        str_recipename = msg.payload.RecipeName18\n        break;\n    case 19:\n        str_recipename = msg.payload.RecipeName19\n        break;\n    case 20:\n        str_recipename = msg.payload.RecipeName20\n        break;\n    case 21:\n        str_recipename = msg.payload.RecipeName21\n        break;\n    case 22:\n        str_recipename = msg.payload.RecipeName22\n        break;\n    case 23:\n        str_recipename = msg.payload.RecipeName23\n        break;\n    default:\n\n}\n\nlet plcenchedora = global.get(\"plcenchedora\");\n\n\n\nlet plc = {\n    rNominalSpeed: plcenchedora.rNominalSpeed,\n    xResetCounter: msg.payload.xResetCounter,\n    xResetReject_r1: msg.payload.xResetReject_r1,\n    xResetReject_r2: msg.payload.xResetReject_r2,\n    aux_id_falha: msg.payload.aux_id_falha,\n    iActualRecipe: msg.payload.iActualRecipe,\n    strRecipeName: str_recipename,\n    mode: msg.payload.mode,\n    state: msg.payload.state,\n    //state:6,\n    rActualSpeed: msg.payload.rActualSpeed,\n    diCounterReject_r1: msg.payload.diCounterReject_r1,\n    diCounterReject_r2: msg.payload.diCounterReject_r2,\n    diProductionCounter: msg.payload.diProductionCounter,\n    starved: msg.payload.starved,\n    blocked: msg.payload.blocked\n}\n\nif (plc.blocked && plc.state == 5) {\n    plc.aux_id_falha = 100\n}\n\n\n\nglobal.set(name_var_global, plc);\n\nmsg.payload = plc\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 300,
        "wires": [
            [
                "2ae098ae8eb12d52",
                "3cf0fb65695157ab"
            ]
        ]
    },
    {
        "id": "2ae098ae8eb12d52",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "name": "find line",
        "func": "let config = flow.get(\"config\");\n\nlet name_var_global = \"plc\" + config.machine_name\n\n\nlet plc = msg.payload\n\nlet cod = msg.payload.aux_id_falha\n\nconst lista_falha = flow.get(\"alm_list\");\n\n\nconst lines = lista_falha.split('\\n');\n//node.warn(lines);\n\n\n// Percorrer cada linha e dividi-la em colunas\nlines.forEach(line => {\n    const columns = line.split(',');\n    if (columns.length > 1) {\n        var id = columns[0].trim();\n        var desc_alm = columns[1].trim();\n        var desc_classe = columns[2].trim();\n        var classe = columns[3].trim();\n        var programadada = columns[4].trim();\n    }\n\n    if (cod == id) {\n        let str_cod = desc_classe\n        let class_cod = classe\n        let programada = Boolean(Number(programadada))\n        plc.statechanged_id = class_cod\n        plc.statechanged_reason = str_cod\n        plc.programada = programada\n        plc.lastalm = desc_alm\n\n        return\n\n\n\n    }\n\n    \n\n});\n\n\n\nplc = JSON.parse(JSON.stringify(plc))\nglobal.set(name_var_global, plc);\nmsg.payload = plc\nreturn msg\n\n\n\n//return msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 400,
        "wires": [
            [
                "c8800acc43a6e806",
                "62a5c650783760ea",
                "494a87730d6dd25c",
                "92dc176fb2c7b6be",
                "b77fcb165527b3e9"
            ]
        ]
    },
    {
        "id": "c8800acc43a6e806",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.aux_id_falha",
        "statusType": "msg",
        "x": 970,
        "y": 400,
        "wires": []
    },
    {
        "id": "62a5c650783760ea",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.statechanged_id",
        "statusType": "msg",
        "x": 970,
        "y": 480,
        "wires": []
    },
    {
        "id": "494a87730d6dd25c",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "name": "Mostrar linha",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.statechanged_reason",
        "statusType": "msg",
        "x": 970,
        "y": 540,
        "wires": []
    },
    {
        "id": "92dc176fb2c7b6be",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "name": "debug 731",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload.lastalm",
        "statusType": "msg",
        "x": 970,
        "y": 600,
        "wires": []
    },
    {
        "id": "e9dd5896a33e0fe9",
        "type": "file in",
        "z": "f7ad05cac9ca67b4",
        "name": "Lista Falhas",
        "filename": "alm_list_07",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": true,
        "x": 350,
        "y": 220,
        "wires": [
            [
                "8065851157adfe88"
            ]
        ]
    },
    {
        "id": "1110e94954967594",
        "type": "inject",
        "z": "f7ad05cac9ca67b4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 220,
        "wires": [
            [
                "e9dd5896a33e0fe9"
            ]
        ]
    },
    {
        "id": "763289c0c5db0750",
        "type": "debug",
        "z": "f7ad05cac9ca67b4",
        "name": "debug 732",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 220,
        "wires": []
    },
    {
        "id": "8065851157adfe88",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "name": "function 348",
        "func": "flow.set(\"alm_list\", msg.payload);\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 220,
        "wires": [
            [
                "763289c0c5db0750"
            ]
        ]
    },
    {
        "id": "b77fcb165527b3e9",
        "type": "link out",
        "z": "f7ad05cac9ca67b4",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "c3f2c7edba8c5335"
        ],
        "x": 865,
        "y": 640,
        "wires": []
    },
    {
        "id": "3375b875e63ffb05",
        "type": "eth-ip out",
        "z": "f7ad05cac9ca67b4",
        "g": "484a492735669b11",
        "endpoint": "8d756ed66187c2a2",
        "variable": "cmdZIA",
        "program": "",
        "name": "",
        "x": 2060,
        "y": 300,
        "wires": []
    },
    {
        "id": "57df05094ed09c1b",
        "type": "inject",
        "z": "f7ad05cac9ca67b4",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1630,
        "y": 520,
        "wires": [
            [
                "e6de61fc5cd0230f"
            ]
        ]
    },
    {
        "id": "b657faa328cc8621",
        "type": "pccc out",
        "z": "f7ad05cac9ca67b4",
        "endpoint": "5af0070c91460327",
        "variable": "diProductionCounter",
        "name": "",
        "x": 2240,
        "y": 500,
        "wires": []
    },
    {
        "id": "e6de61fc5cd0230f",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "name": "function 362",
        "func": "msg.payload = 0\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 500,
        "wires": [
            [
                "b657faa328cc8621"
            ]
        ]
    },
    {
        "id": "95086a7063ab5e2f",
        "type": "function",
        "z": "f7ad05cac9ca67b4",
        "name": "function 367",
        "func": "\nconst parada = flow.get(\"parada\");\n\nparada.active = false\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "9d729f73f00a8cd3",
        "type": "inject",
        "z": "f7ad05cac9ca67b4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 560,
        "wires": [
            [
                "95086a7063ab5e2f"
            ]
        ]
    },
    {
        "id": "bb72a36971711bd0",
        "type": "s7 in",
        "z": "63695bbdb69c560b",
        "endpoint": "9ac76089066debc7",
        "mode": "all",
        "variable": "lifebit",
        "diff": true,
        "name": "",
        "x": 150,
        "y": 200,
        "wires": [
            [
                "af82197f35f96d20",
                "f2d73b2470658cd6"
            ]
        ]
    },
    {
        "id": "e0721809864032b4",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "name": "debug 602",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 200,
        "wires": []
    },
    {
        "id": "af82197f35f96d20",
        "type": "function",
        "z": "63695bbdb69c560b",
        "name": "function 287",
        "func": "let state\nswitch (msg.payload.state) {\n    case 0:\n        state = 2\n        break;\n    case 1:\n        state = 6\n        break;\n    case 2:\n        state = 9\n        break;\n    case 3:\n        state = 9\n        break;\n    case 4:\n        state = 11\n        break;\n    default:\n}\n\nlet mode\nswitch (msg.payload.mode) {\n    case 0:\n        mode = 1\n        break;\n    case 1:\n        mode = 2\n        break;\n    case 2:\n        mode = 1\n        break;\n    default:\n        mode = 1\n}\n\n\nlet recipeName\nswitch (msg.payload.iActualRecipe) {\n    case 2:\n        recipeName = \"pallet de 2 camadas\"\n        break;\n    case 3:\n        recipeName = \"pallet de 3 camadas\"\n        break;\n    default:\n}\n\n\n\nmsg.payload.mode = 2\nmsg.payload.state = state\nmsg.payload.strRecipeName = recipeName\nmsg.payload.rNominalSpeed = 40\n\n\nif (msg.payload.state == 5) {\n    msg.payload.blocked = true\n} else {\n    msg.payload.blocked = false\n\n}\n\n\nif (msg.payload.statechanged_id == 0) {\n    msg.payload.statechanged_reason = ''\n}\n\n\n\nlet config = flow.get(\"config\");\n\nlet name_var_global = \"plc\" + config.machine_name\n\n\nlet plc = msg.payload\n\nplc = JSON.parse(JSON.stringify(plc))\nglobal.set(name_var_global, plc);\nmsg.payload = plc\nreturn msg\n\n\n\n//return msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 200,
        "wires": [
            [
                "e0721809864032b4"
            ]
        ]
    },
    {
        "id": "22c36b82dcf97662",
        "type": "inject",
        "z": "63695bbdb69c560b",
        "g": "b685f7f94ef63fe6",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "9468ae7d0b8ebe13"
            ]
        ]
    },
    {
        "id": "9468ae7d0b8ebe13",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "b685f7f94ef63fe6",
        "name": "CONFIG",
        "func": "//configuracaao de linha\n\nlet config = {}\n\nconfig.machine_name = \"aplicadora\"\n\nconfig.factory = 1\nconfig.machine_id = 8\nconfig.token_machine = \"Bearer \" + \"157f7feab53e32be5a51f9837a3f4f97326377e0\"\nconfig.token_line = \"Bearer \" + \"00bc757a398cc98d299fd6fc2119929c48647db9\"\nconfig.url = \"http://127.0.0.1:3003\"\nconfig.url_machine = config.url + \"/machine_events\"\nconfig.url_line = config.url + \"/production_line_events\"\nconfig.send = true /// habilita POST\n\nflow.set(\"config\", config);\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 100,
        "wires": [
            [
                "78ec60f92860c93d"
            ]
        ]
    },
    {
        "id": "78ec60f92860c93d",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "g": "b685f7f94ef63fe6",
        "name": "debug 603",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 100,
        "wires": []
    },
    {
        "id": "47484667f6579e72",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "name": "debug 604",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 2200,
        "wires": []
    },
    {
        "id": "e4e0d4e9a4eb4b04",
        "type": "link in",
        "z": "63695bbdb69c560b",
        "name": "link in 7",
        "links": [],
        "x": 255,
        "y": 2320,
        "wires": [
            [
                "ae17c7aedbc87db4"
            ]
        ]
    },
    {
        "id": "a70fd5c23a077e47",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "001c5e758ddbe87a",
        "name": "Turnos, Tempos Acumulados",
        "func": "\nlet msg1 = new Object()\nlet msg2 = new Object()\nlet msg3 = new Object()\nlet config = flow.get(\"config\");\nlet a\n\n\n\nlet turno = global.get(\"turno_\" + config.factory)\nlet memo_turno = flow.get(\"memo_turno\") || 0\n\n\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\n\nlet sm_atual = {\n    \"state\": dadosPlc.state || 2,\n    \"mode\": dadosPlc.mode || 2\n}\nflow.set(\"sm_atual\", sm_atual);\nlet sm_anterior = flow.get(\"sm_anterior\") || flow.set(\"sm_anterior\", sm_atual)\n\n\nlet tempoTranscorrido\nif (memo_turno == turno.turno) { //&& turno.turno != 0\n    a = 1\n\n\n    flow.set(\"tempoTranscorrido\", turno.tempoTranscorrido);\n    tempoTranscorrido = turno.tempoTranscorrido\n\n    calculosOEE()\n\n} else {\n\n    a = 2\n\n    tempoTranscorrido = flow.get(\"tempoTranscorrido\") || 0\n\n}\n\n\n\nlet parada = flow.get(\"parada\") || { \"hora\": 0, \"state\": \"0\", \"mode\": \"0\", \"active\": false, \"tParadaAtual\": 0 }\n\n\n\n// Atualiza o tempo da parada atual\nif ((sm_atual.state != 6 || sm_atual.mode != 2) && turno.turno != 0) {\n    let agora = new Date().getTime()\n    let tParadaAtual = agora - parada.hora\n    parada.tParadaAtual = tParadaAtual / 60 / 1000\n    flow.set(\"parada\", parada);\n    global.set(\"parada\" + name_var_global, parada);\n}\n\n\n\n\n// Aciona saida indicando que houve mudanca do modo de operacao\nif (sm_atual.mode != sm_anterior.mode || sm_atual.state != sm_anterior.state) {\n    //Verifica se a maquina saiu do estado Execute\n    //Sempre que a maquina sair de execute devemos anotar o horario da parada\n    if ((sm_anterior.state == 6 && sm_anterior.mode == 2) && (sm_atual.state != sm_anterior.state || sm_atual.mode != sm_anterior.mode)) {\n        console.log(\"NÃO PRODUZINDO\")\n        anotaInicioParada()\n        msg2 = null\n    } else if ((sm_anterior.state != 6 || sm_anterior.mode != 2) && (sm_atual.state == 6 && sm_atual.mode == 2)) {\n        console.log(\"PRODUZINDO\")\n        msg2.payload = consolidaParada()\n        calculosOEE()\n        flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n    }\n    flow.set(\"sm_anterior\", sm_atual)\n\n\n    return [null, msg2]\n}\n\n\n\n\n\n/// rotinas que devem ser executadas na troca de turno\nif (memo_turno != turno.turno) {\n    msg1 = null\n    msg2 = null\n\n    console.log(\"TrocaTurno\")\n    node.warn(\"TrocaTurno\")\n\n    if (memo_turno != 0) {\n        console.log(\"Fim turno \" + memo_turno)\n        msg1 = { payload: 1 }\n\n        if (parada.active == true) { // se no fim do turno estiver em parada consolida\n            msg2 = {}\n            msg2.payload = {}\n            msg2.payload = consolidaParada()\n\n            calculosOEE()\n\n            flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n            if (turno.turno != 0) { // se entrar em um novo turno reinicia a parada\n                console.log(\"Inicio turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n                anotaInicioParada()\n\n            }\n        } else {\n            if (turno.turno != 0) {\n                console.log(\"Iniccio Turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n            }\n        }\n\n\n        calculosOEE()\n        let calculoOEE = flow.get(\"calculoOEE\");\n        flow.set(\"fimTurnoOEE\", calculoOEE);\n        flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n\n\n\n    } else if (memo_turno == 0) {\n        msg1 = null\n        console.log(\"verificaAnotacaoTurno\") // verifica e cria msg2 se necssario e zera anotacao de parada\n\n        verificaAnotacaoInicioTurno()\n\n    } else {\n\n        msg1 = null\n    }\n\n    //anota registro de turno\n\n\n\n    flow.set(\"memo_turno\", turno.turno)\n\n    return [msg1, msg2]\n}\nmsg3.payload = calculosOEE()\nmsg3.payload.machine_event.event_type_id = 6\nreturn [null, null, msg3]\n\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n\nfunction anotaInicioParada() {\n\n    console.log(\"inicio parada\")\n    node.warn(name_var_global);\n\n    let iParada = global.get(name_var_global);\n\n    node.warn(iParada.statechanged_id)\n\n    let parada = {\n        \"hora\": new Date(),\n        \"state\": sm_atual.state || 0,\n        \"mode\": sm_atual.mode\n    }\n    flow.set(\"parada\", {\n        \"aux_id_falha\": Number(dadosPlc.aux_id_falha),\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true,\n        \"statechanged_id\": iParada.statechanged_id,\n        \"statechanged_reason\": iParada.statechanged_reason,\n        \"programada\": new Boolean(iParada.programada),\n        \"justifica\": false\n\n    });\n    global.set(\"parada\" + name_var_global, {\n        \"aux_id_falha\": Number(dadosPlc.aux_id_falha),\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true,\n        \"statechanged_id\": iParada.statechanged_id,\n        \"statechanged_reason\": iParada.statechanged_reason,\n        \"programada\": new Boolean(iParada.programada),\n        \"justifica\": false,\n        \"machine_id\": config.machine_id,\n        \"Equip\": config.machine_name\n\n    });\n    //console.clear()\n    //console.log(\"Inicio da Parada:\" + parada.hora.getHours() + \":\" + parada.hora.getMinutes())\n    return {\n        \"InicioParada\": parada.hora.getTime(),\n        \"FimParada\": 0,\n        \"tParada\": 0,\n        \"ID\": \"ID\",\n        \"Reason\": null,\n        \"ModeReason\": new Number(parada.mode),\n        \"StateReason\": new Number(parada.state) || 0,\n        \"Programada\": null,\n        \"Equip\": name_var_global\n    }\n}\n\nfunction consolidaParada() {\n    //////////////////////////////////////////////////////////////////////\n    //GAMBIA PARA ATRASAR O REGISTRO//////////////////////////////////////\n    //////////////////////////////////////////////////////////////////////\n\n    flow.set(\"ignora_registro_linha\", 20);\n    flow.set(\"ignora_registro_maquina\", 20);\n\n    ////fim da gambia///////////////////////////////////////////////////\n\n\n    console.log(\"fim parada\")\n    let retorno = new Date()\n    let parada = flow.get(\"parada\") || 0\n    let tParada = (retorno.getTime() - parada.hora) / 1000 / 60\n    let paradasSoma = flow.get(\"paradasSoma\") || flow.set(\"paradasSoma\", { \"Prog\": 0, \"Nprog\": 0 })\n\n    if (dadosPlc.programada == \"true\") {\n        paradasSoma.Prog = paradasSoma.Prog + tParada\n    } else {\n        paradasSoma.Nprog = paradasSoma.Nprog + tParada\n    }\n    flow.set(\"paradasSoma\", paradasSoma);\n    parada.active = false\n    flow.set(\"parada\", parada);\n    global.set(\"parada\" + name_var_global, parada);\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    return {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 8,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": {\n                \"aux_id_falha\": parada.aux_id_falha,\n                \"InicioParada\": parada.hora,\n                \"FimParada\": retorno.getTime(),\n                \"tParada\": Number(tParada.toFixed(2)),\n                \"ID\": isNaN(Number(parada.statechanged_id)) ? 0 : Number(parada.statechanged_id), // Garantir que ID seja um número\n                \"Reason\": parada.statechanged_reason,\n                \"ModeReason\": parada.mode,\n                \"StateReason\": parada.state || 0,\n                \"Programada\": parada.programada,\n                \"turno_atual\": turno.turno,\n                \"equip\": config.machine_name,\n                \"machine_id\": config.machine_id\n            }\n        }\n    }\n}\n\nfunction calculosOEE() {\n\n\n    //msg.filename = \".\\supZIA\\registroTurno_\" + name_var_global + \".json\"\n\n    var sumProg_NProgr = flow.get(\"sumProg_NProgr\") || [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }];\n\n    let dados_oee = {}\n    let tNProg = Number(sumProg_NProgr[0].soma_nao_programada)\n    let tProg = Number(sumProg_NProgr[0].soma_programada)\n    let tProducao = Number(tempoTranscorrido - (tProg + tNProg))\n\n    node.status({ fill: \"red\", shape: \"ring\", text: dados_oee.percDisp });\n\n    if (dadosPlc.mode == 2 && dadosPlc.state == 6) {\n        dados_oee.statusMachine = \"Rodando\"\n    } else dados_oee.statusMachine = \"Parada\"\n\n    ////////////\n    dados_oee.statusConexao = true\n    dados_oee.mode = Number(dadosPlc.mode)\n    dados_oee.state = Number(dadosPlc.state) || 0\n    dados_oee.rNominalSpeed = Number(dadosPlc.rNominalSpeed)\n    dados_oee.rSetSpeed = Number(dadosPlc.rSetSpeed)\n    dados_oee.rActualSpeed = Number(dadosPlc.rActualSpeed)\n    dados_oee.strRecipeName = String(dadosPlc.strRecipeName)\n    dados_oee.strBottle = String(dadosPlc.strBottle)\n    dados_oee.strCap = String(dadosPlc.strCap)\n    dados_oee.diProductionCounter = Number(dadosPlc.diProductionCounter)\n    dados_oee.diCounterReject_r1 = Number(dadosPlc.diCounterReject_r1)\n    dados_oee.diCounterReject_r2 = Number(dadosPlc.diCounterReject_r2)\n    dados_oee.iActualRecipe = Number(dadosPlc.iActualRecipe)\n    dados_oee.tempoTranscorrido = Number(tempoTranscorrido.toFixed(2))\n    dados_oee.percDisp = (tProducao) / (tempoTranscorrido - tProg) * 100\n\n    var teste = {\n        tProducao: tProducao,\n        tempoTranscorrido: tempoTranscorrido,\n        tProg: tProg,\n        tNProg: tNProg,\n\n\n\n    }\n    dados_oee.teste = teste;\n\n    node.status({ fill: \"red\", shape: \"ring\", text: JSON.stringify(teste) });\n\n    dados_oee.percDisp = Number(dados_oee.percDisp.toFixed(2))\n    dados_oee.percEfic = (dados_oee.diProductionCounter) / ((tProducao * dados_oee.rNominalSpeed) / 60) * 100\n    dados_oee.percEfic = Number(dados_oee.percEfic.toFixed(2))\n    dados_oee.percQual = (((dados_oee.diProductionCounter) - (dados_oee.diCounterReject_r1 + dados_oee.diCounterReject_r2)) / dados_oee.diProductionCounter) * 100\n    dados_oee.percQual = isNaN(Number(dados_oee.percQual)) ? 0 : Number(Number(dados_oee.percQual).toFixed(2));\n    dados_oee.percOEE = dados_oee.percDisp * dados_oee.percEfic * dados_oee.percQual / 10000\n    dados_oee.percOEE = Number(dados_oee.percOEE.toFixed(2))\n    dados_oee.turno = Number(turno.turno)\n    dados_oee.tempoParadaProgramada = Number(tProg.toFixed(2))\n    dados_oee.tempoParadaNaoProgramada = Number(tNProg.toFixed(2))\n    dados_oee.dimetaProduzidos = 100000\n    dados_oee.rmetaPerf = 95.00\n    dados_oee.rmetaDisp = 90.00\n    dados_oee.rmetaQual = 99.00\n    dados_oee.rmetaOEE = 90.00\n    dados_oee.equip = String(config.machine_name)\n\n    ////teste limites - ocorre quando o node é desligado\n    if (dados_oee.percDisp < 0) {\n        dados_oee.percDisp = 0\n    } else if (dados_oee.percDisp > 100) {\n        dados_oee.percDisp = 100\n    }\n\n    if (dados_oee.percEfic < 0) {\n        dados_oee.percEfic = 0\n    } else if (dados_oee.percEfic > 100) {\n        dados_oee.percEfic = 100\n    }\n\n    if (dados_oee.percQual < 0) {\n        dados_oee.percQual = 0\n    } else if (dados_oee.percQual > 100) {\n        dados_oee.percQual = 100\n    }\n\n    if (dados_oee.percOEE < 0) {\n        dados_oee.percOEE = 0\n    } else if (dados_oee.percOEE > 100) {\n        dados_oee.percOEE = 100\n    }\n\n\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    let calculo = {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 3,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": dados_oee\n        }\n    }\n\n    flow.set(\"calculoOEE\", calculo);\n\n\n    return calculo\n\n\n\n}\n\nfunction verificaAnotacao() {\n\n}\n\n\nfunction verificaAnotacaoInicioTurno() {\n    console.log(\"Inicio Turno \" + turno.turno)\n    ////Zera os valores para iniciar novo turno\n    flow.set(\"sumProg_NProgr\", [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }]);\n    if (sm_atual.state == 6 && sm_atual.mode == 2) {\n        //PRODUZINDO\n    } else {\n        //NAO PRODUZINDO\n        anotaInicioParada()\n        msg2 = null\n    }\n\n\n\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 900,
        "wires": [
            [
                "4f5ad93377cd77c4"
            ],
            [
                "9ce2885490b165d5"
            ],
            [
                "6b38a6eedcaba546",
                "8671fdc594a696f6"
            ]
        ]
    },
    {
        "id": "77bd64a1c393b6ba",
        "type": "inject",
        "z": "63695bbdb69c560b",
        "g": "001c5e758ddbe87a",
        "name": "cycle",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 980,
        "wires": [
            [
                "a70fd5c23a077e47",
                "699460bcf6f1d161",
                "53dfe18a78a73ccd"
            ]
        ]
    },
    {
        "id": "4f5ad93377cd77c4",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 740,
        "wires": [
            [
                "99b713b6e462d657"
            ]
        ]
    },
    {
        "id": "bc66b1123110fa7e",
        "type": "comment",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "Registro Troca de Turno",
        "info": "",
        "x": 1120,
        "y": 640,
        "wires": []
    },
    {
        "id": "4478ec2bd5aefe0b",
        "type": "http request",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "",
                "valueType": "other",
                "valueValue": ""
            }
        ],
        "x": 1810,
        "y": 740,
        "wires": [
            [
                "49382970cc8de5cd"
            ]
        ]
    },
    {
        "id": "49382970cc8de5cd",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "debug 610",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2030,
        "y": 740,
        "wires": []
    },
    {
        "id": "e4a683d21a7b7af7",
        "type": "comment",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "Turno + Tempo Transcorrido",
        "info": "",
        "x": 1140,
        "y": 800,
        "wires": []
    },
    {
        "id": "99b713b6e462d657",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "Get fimTurnoOEE",
        "func": "msg.payload = flow.get(\"fimTurnoOEE\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 740,
        "wires": [
            [
                "b6859ea46214fb1b",
                "3d82b1f73106e66c"
            ]
        ]
    },
    {
        "id": "b6859ea46214fb1b",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "statusMachineId",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.machine_event.payload.statusMachineId = 2\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.machine_event.payload.statusMachineId = 2\n            break;\n        case 5:\n            msg.payload.machine_event.payload.statusMachineId = 5\n            break;\n        case 6:\n            msg.payload.machine_event.payload.statusMachineId = 1\n            break;\n        case 9:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 740,
        "wires": [
            [
                "4478ec2bd5aefe0b"
            ]
        ]
    },
    {
        "id": "ffa87f66c72364e0",
        "type": "comment",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "Reset Counters",
        "info": "",
        "x": 1300,
        "y": 940,
        "wires": []
    },
    {
        "id": "d8214967b0ad53b9",
        "type": "inject",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1130,
        "y": 880,
        "wires": [
            [
                "a3ae5cc6e7e2dfa1"
            ]
        ]
    },
    {
        "id": "a3ae5cc6e7e2dfa1",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "function 289",
        "func": "const cmdResetAtivo = flow.get(\"cmdResetAtivo\");\nif (cmdResetAtivo) {\n    return msg\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 880,
        "wires": [
            [
                "3d82b1f73106e66c"
            ]
        ]
    },
    {
        "id": "9357aa87e0e50d93",
        "type": "function",
        "z": "63695bbdb69c560b",
        "d": true,
        "g": "50f7d195c76ca2be",
        "name": "function 290",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nnode.warn(dadosPlc.diProductionCounter);\n\nif (dadosPlc.diProductionCounter!='0') {\n    return msg\n}\n\nlet cmdResetAtivo = flow.get(\"cmdResetAtivo\");\ncmdResetAtivo = false\nflow.set(\"cmdResetAtivo\", cmdResetAtivo);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 920,
        "wires": [
            [
                "3d82b1f73106e66c",
                "856a0a412b6139fd"
            ]
        ]
    },
    {
        "id": "3d82b1f73106e66c",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "set reset Counters",
        "func": "let cmdResetAtivo = true\nflow.set(\"cmdResetAtivo\", cmdResetAtivo);\n\nmsg.payload ={}\nmsg.payload.xResetCounter = 1\nmsg.payload.xResetReject_r1 = 1\nmsg.payload.xResetReject_r2 = 1\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 820,
        "wires": [
            [
                "9357aa87e0e50d93",
                "cfaa607bf0a50867",
                "87aa67e30c3cdd8e",
                "2bf899289c26d22a"
            ]
        ]
    },
    {
        "id": "856a0a412b6139fd",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "debug 611",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1810,
        "y": 920,
        "wires": []
    },
    {
        "id": "6b38a6eedcaba546",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "8662194735015a0b",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1420,
        "wires": [
            [
                "a7ad225c928b0411",
                "3dabc7b70a1e01c7"
            ]
        ]
    },
    {
        "id": "3cc6cc2d39f21eb1",
        "type": "http request",
        "z": "63695bbdb69c560b",
        "g": "8662194735015a0b",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1990,
        "y": 1440,
        "wires": [
            [
                "31c79b238f737f9b"
            ]
        ]
    },
    {
        "id": "31c79b238f737f9b",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "g": "8662194735015a0b",
        "name": "debug 612",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2210,
        "y": 1440,
        "wires": []
    },
    {
        "id": "a7ad225c928b0411",
        "type": "delay",
        "z": "63695bbdb69c560b",
        "g": "8662194735015a0b",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "120",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1480,
        "y": 1400,
        "wires": [
            [
                "f27627600997d6c6"
            ]
        ]
    },
    {
        "id": "f27627600997d6c6",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "8662194735015a0b",
        "name": "statusMachineId",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.machine_event.payload.statusMachineId = 3\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        case 5:\n            msg.payload.machine_event.payload.statusMachineId = 5\n            break;\n        case 6:\n            msg.payload.machine_event.payload.statusMachineId = 1\n            break;\n        case 9:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 1440,
        "wires": [
            [
                "3cc6cc2d39f21eb1"
            ]
        ]
    },
    {
        "id": "3dabc7b70a1e01c7",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "8662194735015a0b",
        "name": "imediato na troca de estado - com filtro****",
        "func": "let ignora_registro_maquina = flow.get(\"ignora_registro_maquina\");\n\nif (ignora_registro_maquina == 0) {\n\n\n    let ant_mode = context.get(\"ant_mode\") || 0;\n    let ant_state = context.get(\"ant_state\") || 0;\n    let config = flow.get(\"config\");\n    let name_var_global = \"plc\" + config.machine_name\n    let dadosPlc = global.get(name_var_global)\n    let mode = dadosPlc.mode\n    let state = dadosPlc.state\n\n    if (ant_mode != mode || ant_state != state) {\n        context.set(\"ant_mode\", mode);\n        context.set(\"ant_state\", state);\n        return msg\n    }\n\n\n} else {\n\n    ignora_registro_maquina = ignora_registro_maquina - 1\n    flow.set(\"ignora_registro_maquina\", ignora_registro_maquina);\n\n}\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 1480,
        "wires": [
            [
                "f27627600997d6c6"
            ]
        ]
    },
    {
        "id": "b59c2330f15607c2",
        "type": "comment",
        "z": "63695bbdb69c560b",
        "g": "5c839d8c4783654c",
        "name": "Registro Fim da Parada de Linha",
        "info": "",
        "x": 1190,
        "y": 1340,
        "wires": []
    },
    {
        "id": "8efce6cf5db2a977",
        "type": "http request",
        "z": "63695bbdb69c560b",
        "g": "5c839d8c4783654c",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1830,
        "y": 1180,
        "wires": [
            [
                "e9663eb1bbad32e2"
            ]
        ]
    },
    {
        "id": "e9663eb1bbad32e2",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "g": "5c839d8c4783654c",
        "name": "debug 613",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2130,
        "y": 1200,
        "wires": []
    },
    {
        "id": "9ce2885490b165d5",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "5c839d8c4783654c",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n\n    //msg.payload.machine_event.payload.ID = 999;\n\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1200,
        "wires": [
            [
                "d71b9dd0bb602eb2"
            ]
        ]
    },
    {
        "id": "d71b9dd0bb602eb2",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "5c839d8c4783654c",
        "name": "function 291",
        "func": "\nif (msg.payload != null) {\n\n    if (msg.payload.machine_event.payload.ID != 8888) {\n        return [msg, msg]\n    } else return [msg, msg];\n\n\n\n\n} else {\n\n    node.warn(\"Mudanca de estado sem registro\");\n\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 1200,
        "wires": [
            [
                "8efce6cf5db2a977"
            ],
            [
                "dc0a407ee12e427c"
            ]
        ]
    },
    {
        "id": "f8bbbe5a25d0b116",
        "type": "postgresql",
        "z": "63695bbdb69c560b",
        "g": "5c839d8c4783654c",
        "name": "",
        "query": "INSERT INTO public.appoint\n(payload)\nVALUES('{{{msg.payload}}}');",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1890,
        "y": 1260,
        "wires": [
            [
                "23d486325d0de270"
            ]
        ]
    },
    {
        "id": "23d486325d0de270",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "g": "5c839d8c4783654c",
        "name": "debug 614",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2110,
        "y": 1260,
        "wires": []
    },
    {
        "id": "dc0a407ee12e427c",
        "type": "json",
        "z": "63695bbdb69c560b",
        "g": "5c839d8c4783654c",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1710,
        "y": 1260,
        "wires": [
            [
                "f8bbbe5a25d0b116"
            ]
        ]
    },
    {
        "id": "87efc1ca7b673e36",
        "type": "link in",
        "z": "63695bbdb69c560b",
        "g": "5c839d8c4783654c",
        "name": "apontamento maquina",
        "links": [
            "828061297503db73"
        ],
        "x": 1035,
        "y": 1300,
        "wires": [
            [
                "26f4f6790fe688b9"
            ]
        ]
    },
    {
        "id": "f3d925381765ee37",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "g": "5c839d8c4783654c",
        "name": "debug 615",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 1300,
        "wires": []
    },
    {
        "id": "26f4f6790fe688b9",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "5c839d8c4783654c",
        "name": "Atualiza Parada - Apontamento",
        "func": "const config = flow.get(\"config\");\n\nlet parada = flow.get(\"parada\");\n\nparada.statechanged_id = msg.payload.newStopReason[1]\nparada.statechanged_reason = msg.payload.newStopReason[0]\nparada.programada = msg.payload.newStopReason[2]\nparada.justifica = true\n\n\nflow.set(\"parada\", parada);\nglobal.set(\"parada\" + config.machine_name, parada);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1300,
        "wires": [
            [
                "f3d925381765ee37"
            ]
        ]
    },
    {
        "id": "0d7501b11ceede8e",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "g": "1d64cd13264e87dc",
        "name": "debug 616",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 1120,
        "wires": []
    },
    {
        "id": "699460bcf6f1d161",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "1d64cd13264e87dc",
        "name": "Calc Actual Stop",
        "func": "const lastState = flow.get(\"lastState\");\n\nconst lastTime = new Date(lastState[0].timestamp);\nconst currentTime = new Date();\n\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  AJUSTE DE TEMPO xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//const timezoneOffset = currentTime.getTimezoneOffset();\nconst timezoneOffset = 0\n\n\n\nlastTime.setHours(lastTime.getHours() - timezoneOffset / 60);\n\nnode.status({ fill: \"red\", shape: \"ring\", text: lastState[1] });\n\n\n\n\n// Converte para segundos\nconst lastTimeInSeconds = Math.floor(lastTime.getTime() / 1000);\nconst currentTimeInSeconds = Math.floor(currentTime.getTime() / 1000);\n\nconst timeDifference = (currentTimeInSeconds - lastTimeInSeconds) / 60;\n\nmsg.payload = {}\n\nmsg.payload.actualDuration = lastState[1] = timeDifference\nmsg.payload.actualState = lastState[0].payload.machine_event.payload.state\nmsg.payload.actualMode = lastState[0].payload.machine_event.payload.mode\n\n\nconst tempoTranscorrido = flow.get(\"tempoTranscorrido\");\n\nif (lastState[1] > tempoTranscorrido) {\n    lastState[1] = tempoTranscorrido\n\n}\nflow.set(\"lastState\", lastState);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar sumProg_NProgr_parcial = flow.get(\"sumProg_NProgr_parcial\");\nlet parada = flow.get(\"parada\");\nif (!isNaN(parada.tParadaAtual)) {\n    //node.warn(parada.active);\n    \n    var calcSumProg_NProgr = JSON.parse(JSON.stringify(sumProg_NProgr_parcial))\n    if (parada.active) {\n\n        if (parada.programada == 'true') {\n            //node.warn(\"Programada\");\n            calcSumProg_NProgr[0].soma_programada = Number(sumProg_NProgr_parcial[0].soma_programada) + Number(parada.tParadaAtual)\n            calcSumProg_NProgr[0].soma_nao_programada = Number(sumProg_NProgr_parcial[0].soma_nao_programada)\n\n            //node.warn(sumProg_NProgr[0].soma_programada);\n        } else {\n            \n            //node.warn(\"Nao Programada\");\n            //node.warn(Number(sumProg_NProgr_parcial[0].soma_nao_programada));\n            //node.warn(Number(parada.tParadaAtual));\n            calcSumProg_NProgr[0].soma_programada = Number(sumProg_NProgr_parcial[0].soma_programada)\n            calcSumProg_NProgr[0].soma_nao_programada = Number(sumProg_NProgr_parcial[0].soma_nao_programada) + Number(parada.tParadaAtual)\n            //node.warn(sumProg_NProgr[0].soma_nao_programada);\n        }\n    } else {\n        calcSumProg_NProgr = sumProg_NProgr_parcial\n\n    }\n} else {\n    calcSumProg_NProgr = sumProg_NProgr_parcial\n    \n}\n\nflow.set(\"sumProg_NProgr\", calcSumProg_NProgr) || [{ \"soma_programada\": 0, \"soma_nao_programada\": 0 }];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1120,
        "wires": [
            [
                "0d7501b11ceede8e"
            ]
        ]
    },
    {
        "id": "8671fdc594a696f6",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "monitor troca de estado",
        "func": "let config = flow.get(\"config\");\n//msg.config = config\n\n\n\nlet sm_atual = flow.get(\"sm_atual\");\nlet sm_anterior = flow.get(\"sm_anterior_iot\") || { mode: \"0\", state: \"0\" };\n\nif ((sm_atual.mode != sm_anterior.mode) || (sm_atual.state != sm_anterior.state)) {\n\n    //node.warn(\"mudou\");\n    flow.set(\"sm_anterior_iot\", sm_atual);\n\n    msg.machine_id = config.machine_id\n\n    return msg;\n\n\n\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1760,
        "wires": [
            [
                "b41e7307a9895ae8"
            ]
        ]
    },
    {
        "id": "b41e7307a9895ae8",
        "type": "json",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1350,
        "y": 1760,
        "wires": [
            [
                "acb48dd64de6d199"
            ]
        ]
    },
    {
        "id": "e135d81be222e084",
        "type": "inject",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "60 segundos",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1500,
        "y": 1680,
        "wires": [
            [
                "ac16f4208291e06c"
            ]
        ]
    },
    {
        "id": "ac16f4208291e06c",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "consulta turno e ajsute de filtro",
        "func": "const config = flow.get(\"config\");\nmsg.machine_id = config.machine_id\n// Recupera a lista de horários de turnos a partir de uma variável global e o índice do turno desejado da variável de fluxo.\nlet horarios_turnos = global.get(\"turnos_times\");\nlet turno = flow.get(\"memo_turno\");\n\n// Faz uma cópia da lista de horários para evitar modificar o valor original na variável global.\nlet turnos_times = JSON.parse(JSON.stringify(horarios_turnos));\n\n// Obtém a data e hora atuais.\nconst today = new Date();\n// Define o início do dia (00:00:00) para a data atual. Essa data será usada para calcular o tempo em segundos desde a meia-noite.\nconst startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n// Converte o início do dia em formato epoch (segundos desde 1 de janeiro de 1970).\nconst epochTime = Math.floor(startOfDay.getTime() / 1000);\n\n\n\n\n\n// Define o ajuste de fuso horário em segundos. Neste caso, são 10800 segundos (ou 3 horas).\nconst timezoneOffset = -7200; // 2 horas em segundos\n\n// Define a quantidade de segundos em um dia, para lidar com turnos que ultrapassam a meia-noite.\nconst secondsInDay = 86400; // 24 horas em segundos\n\n// Itera sobre cada turno para calcular e ajustar os horários de início e fim.\nfor (let index = 0; index < turnos_times.length; index++) {\n    // Remove propriedades desnecessárias de cada turno para simplificar os dados.\n    delete turnos_times[index].created_at;\n    delete turnos_times[index].updated_at;\n    delete turnos_times[index].id;\n\n    // Extrai a parte do horário de início do turno (no formato 'HH:MM:SS') para conversão em segundos.\n    const [hours_s, minutes_s, seconds_s] = turnos_times[index].start_time.substring(11, 19).split(':').map(Number);\n    // Converte o horário de início em segundos: (horas * 3600) + (minutos * 60) + segundos.\n    const totalSecondsStart = hours_s * 3600 + minutes_s * 60 + seconds_s;\n\n    // Extrai a parte do horário de fim do turno (também no formato 'HH:MM:SS') para conversão em segundos.\n    const [hours_e, minutes_e, seconds_e] = turnos_times[index].end_time.substring(11, 19).split(':').map(Number);\n    // Converte o horário de fim em segundos: (horas * 3600) + (minutos * 60) + segundos.\n    const totalSecondsEnd = hours_e * 3600 + minutes_e * 60 + seconds_e;\n\n    // Calcula o horário de início absoluto do turno, somando o epoch do dia, o horário de início em segundos e o ajuste de fuso horário.\n    let start_time = new Date((epochTime + totalSecondsStart + timezoneOffset) * 1000);\n    // Calcula o horário de fim absoluto do turno da mesma forma.\n    let end_time = new Date((epochTime + totalSecondsEnd + timezoneOffset) * 1000);\n\n    // Verifica se o horário de início é maior que o horário de fim, indicando que o turno ultrapassa a meia-noite.\n    if (start_time > end_time) {\n        // Ajusta o horário de fim, somando um dia (em segundos) para representar corretamente um turno que termina no dia seguinte.\n        end_time = new Date((epochTime + totalSecondsEnd + timezoneOffset + secondsInDay) * 1000);\n    }\n\n    // Converte os horários de início e fim ajustados para o formato ISO e atualiza no objeto do turno.\n    turnos_times[index].start_time = start_time.toISOString();\n    turnos_times[index].end_time = end_time.toISOString();\n}\n\n// Define a saída da mensagem como o turno específico desejado (indexado com base no número do turno menos 1).\nmsg.payload = turnos_times[turno - 1];\nmsg.machine_id = config.machine_id\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 1760,
        "wires": [
            [
                "4b9c82b444ccbe24",
                "677436f6092c1f4a",
                "67edac93c4fae8a0",
                "dc550227573dd72b",
                "b29e83a809198510"
            ]
        ]
    },
    {
        "id": "5a6f67a824513af8",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "monta resumo de tempos",
        "func": "const data = msg.payload;\n\n// Converte para o formato desejado, agrupando por `mode` e `state`\nconst result = data.reduce((acc, { mode, state, total_active_duration }) => {\n  if (!acc[mode]) acc[mode] = {}; // Cria a entrada para o mode se não existir\n  acc[mode][state] = (acc[mode][state] || 0) + Number(parseFloat(total_active_duration)); // Soma o total_active_duration\n  return acc;\n}, {});\n\n// verifica se a soma de todos os estados esta consistente com o tempo de turno transcorrifo\nlet config = flow.get(\"config\");\nlet turno = global.get(\"turno_\" + config.factory)\n//node.warn(turno);\n\n\n\n\n// Inicializa `msg.payload` com o objeto `omac`\nmsg.payload = { omac: result };\n\n\n\n// verifica o estado atual e altera o omac\nlet lastState = flow.get(\"lastState\");\n\nif (lastState && lastState[0] && lastState[0].payload) {\n  const mode = lastState[0].payload.machine_event.payload.mode;\n  const state = lastState[0].payload.machine_event.payload.state;\n\n  // Verifica se mode e state existem em msg.payload.omac antes de somar\n  if (msg.payload.omac[mode] && msg.payload.omac[mode][state] !== undefined) {\n    msg.payload.omac[mode][state] =\n      Number(parseFloat(msg.payload.omac[mode][state])) + Number(parseFloat(lastState[1]));\n  }\n}\n\n\n\n\nlet totalProductive = 0;\nlet totalNonProductive = 0;\n\n// Calcula os totais produtivos e não produtivos\nObject.entries(result).forEach(([mode, states]) => {\n  Object.entries(states).forEach(([state, activeMinutes]) => {\n    const minutes = Number(parseFloat(activeMinutes));\n\n    if (state === \"6\" && mode === \"2\") {\n      totalProductive += minutes;\n    } else {\n      totalNonProductive += minutes;\n    }\n  });\n});\n\n\n\n// Armazena `msg.payload` no fluxo para acesso posterior\nflow.set(\"temposOEE_parcial\", msg.payload);\n\n\n\n// Adiciona os somatórios ao `msg.payload`\nmsg.payload.somas = {\n  totalProductive: totalProductive,\n  totalNonProductive: totalNonProductive\n};\n\n\n\n// Retorna `msg` atualizado\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2710,
        "y": 1760,
        "wires": [
            [
                "febcacdf51e33ffc"
            ]
        ]
    },
    {
        "id": "a24370e5199311a6",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "debug 617",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2950,
        "y": 1840,
        "wires": []
    },
    {
        "id": "8d65a65c10aff41d",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "consulta ultimo registro",
        "func": "msg.payload[0].payload = JSON.parse(msg.payload[0].payload)\nflow.set(\"lastState\", msg.payload);\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2590,
        "y": 1820,
        "wires": [
            [
                "a24370e5199311a6"
            ]
        ]
    },
    {
        "id": "81cbf4d152a131c0",
        "type": "inject",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2200,
        "y": 1960,
        "wires": [
            [
                "ca023ebe4e22c8e4"
            ]
        ]
    },
    {
        "id": "419d7db91ef40770",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "debug 618",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2830,
        "y": 1960,
        "wires": []
    },
    {
        "id": "ca023ebe4e22c8e4",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "function 292",
        "func": "let horarios_turnos = global.get(\"turnos_times\");\nlet turno = flow.get(\"memo_turno\");\n\nlet turnos_times = JSON.stringify(horarios_turnos)\nturnos_times = JSON.parse(turnos_times);\n//node.warn(turnos_times);\n\nconst today = new Date();\nconst startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\nconst epochTime = Math.floor(startOfDay.getTime() / 1000); // Converte de milissegundos para segundos\n//node.warn(epochTime); // Exibe a data de hoje às 00:00 em epoch (segundos)\n\nfor (let index = 0; index < turnos_times.length; index++) {\n    delete turnos_times[index].created_at\n    delete turnos_times[index].updated_at\n    delete turnos_times[index].id\n\n    const timePart_start = turnos_times[index].start_time.substring(11, 19); // '06:00:00'\n    // Divide a hora, minuto e segundo\n    const [hours_s, minutes_s, seconds_s] = timePart_start.split(':').map(Number);\n    // Converte para segundos\n    const totalMinutes_start = ((hours_s * 3600) + (minutes_s * 60) + (seconds_s));\n\n\n    const timePart_end = turnos_times[index].end_time.substring(11, 19); // '06:00:00'\n    // Divide a hora, minuto e segundo\n    const [hours_e, minutes_e, seconds_e] = timePart_end.split(':').map(Number);\n    // Converte para segundos\n    const totalMinutes_end = ((hours_e * 3600) + (minutes_e * 60) + (seconds_e));\n\n    //node.warn(totalMinutes_start);\n    //node.warn(totalMinutes_end);\n\n    const start_time = new Date((epochTime + totalMinutes_start)*1000)\n    const end_time = new Date((epochTime + totalMinutes_end)*1000)\n\n  \n\n    turnos_times[index].start_time = start_time.toISOString()\n    turnos_times[index].end_time = end_time.toISOString()\n\n\n\n  \n\n}\n\nmsg.payload = turnos_times[turno-1]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1960,
        "wires": [
            [
                "1a99b7ebee27c22b"
            ]
        ]
    },
    {
        "id": "42692fcffd6b83fb",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "debug 619",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2950,
        "y": 1900,
        "wires": []
    },
    {
        "id": "febcacdf51e33ffc",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "debug 620",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2950,
        "y": 1760,
        "wires": []
    },
    {
        "id": "acb48dd64de6d199",
        "type": "postgresql",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "",
        "query": "INSERT INTO public.machine_events\n(id_machine, payload)\nVALUES({{{msg.machine_id}}}, '{{{msg.payload}}}');",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1510,
        "y": 1760,
        "wires": [
            [
                "ac16f4208291e06c"
            ]
        ]
    },
    {
        "id": "4b9c82b444ccbe24",
        "type": "postgresql",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n),\nfiltered_intervals AS (\n    SELECT \n        id_machine,\n        mode,\n        state,\n        \n        -- Calcula o início e o fim ajustados do evento, limitados pelo intervalo de filtro\n        GREATEST(timestamp at time zone 'UTC' at time zone 'GMT-3', '{{{msg.payload.start_time}}}'::timestamp) AS adjusted_start,\n        LEAST(next_timestamp at time zone 'UTC' at time zone 'GMT-3', '{{{msg.payload.end_time}}}'::timestamp) AS adjusted_end\n        \n    FROM \n        state_intervals\n    WHERE \n        next_timestamp at time zone 'UTC' at time zone 'GMT-3' > '{{{msg.payload.start_time}}}'::timestamp  -- start_filter\n        AND timestamp at time zone 'UTC' at time zone 'GMT-3' <'{{{msg.payload.end_time}}}'::timestamp     -- end_filter\n        AND id_machine = 8  -- substitua 1 pelo id_machine desejado\n)\nSELECT \n    id_machine,\n    mode,\n    state,\n    \n    -- Calcula o tempo ativo total ajustado dentro do intervalo\n    SUM(\n        CASE \n            WHEN adjusted_end > adjusted_start THEN \n                EXTRACT(EPOCH FROM (adjusted_end - adjusted_start)) / 60  -- Tempo em minutos\n            ELSE \n                0\n        END\n    ) AS total_active_duration\nFROM \n    filtered_intervals\nGROUP BY \n    id_machine,\n    mode,\n    state\nORDER BY \n    id_machine,\n    mode,\n    state;\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2190,
        "y": 1760,
        "wires": [
            [
                "f4ae56a830bc3607"
            ]
        ]
    },
    {
        "id": "1a99b7ebee27c22b",
        "type": "postgresql",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n)\nSELECT \n    id,\n    timestamp,\n    id_machine,\n    payload,\n    mode,\n    state,\n    next_timestamp,\n    -- Calcula o tempo que o estado ficou ativo\n    CASE \n        WHEN next_timestamp IS NOT NULL THEN \n            AGE(next_timestamp, timestamp)\n        ELSE \n            NULL\n    END AS active_duration\nFROM \n    state_intervals\nORDER BY \n    timestamp;",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2610,
        "y": 1960,
        "wires": [
            [
                "419d7db91ef40770"
            ]
        ]
    },
    {
        "id": "677436f6092c1f4a",
        "type": "postgresql",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "",
        "query": "SELECT *\nFROM machine_events\nWHERE id_machine =8\nORDER BY timestamp DESC\nlimit 1\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2190,
        "y": 1820,
        "wires": [
            [
                "8d65a65c10aff41d"
            ]
        ]
    },
    {
        "id": "67edac93c4fae8a0",
        "type": "postgresql",
        "z": "63695bbdb69c560b",
        "d": true,
        "g": "d208d704f82d0491",
        "name": "Lista FIltrada Tempo e Maquina",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n)\nSELECT \n    id,\n    timestamp AS start_time,       -- Hora inicial do estado\n    next_timestamp AS end_time,    -- Hora final do estado\n    id_machine,\n    payload,\n    mode,\n    state,\n    -- Calcula o tempo que o estado ficou ativo em minutos\n    CASE \n        WHEN next_timestamp IS NOT NULL THEN \n            EXTRACT(EPOCH FROM (next_timestamp - timestamp)) / 60  -- Tempo em minutos\n        ELSE \n            NULL\n    END AS active_duration\nFROM \n    state_intervals\nWHERE \n    -- Filtros aplicados na tabela de saída\n    next_timestamp > '{{{msg.payload.start_time}}}'::timestamp  -- start_filter\n    AND timestamp < '{{{msg.payload.end_time}}}'::timestamp   -- end_filter\n    AND id_machine = 1  -- substitua 123 pelo id_machine desejado\nORDER BY \n    timestamp;\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2250,
        "y": 1900,
        "wires": [
            [
                "42692fcffd6b83fb"
            ]
        ]
    },
    {
        "id": "f4ae56a830bc3607",
        "type": "delay",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2440,
        "y": 1760,
        "wires": [
            [
                "5a6f67a824513af8"
            ]
        ]
    },
    {
        "id": "dc550227573dd72b",
        "type": "postgresql",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "",
        "query": "SELECT\n    SUM(CASE \n            WHEN (payload::jsonb->'machine_event'->'payload'->>'Programada')::boolean = true THEN \n                (payload::jsonb->'machine_event'->'payload'->>'tParada')::numeric \n            ELSE 0 \n        END) AS soma_programada,\n    SUM(CASE \n            WHEN (payload::jsonb->'machine_event'->'payload'->>'Programada')::boolean = false THEN \n                (payload::jsonb->'machine_event'->'payload'->>'tParada')::numeric \n            ELSE 0 \n        END) AS soma_nao_programada\nFROM public.appoint\nWHERE \n    to_timestamp((payload::jsonb->'machine_event'->'payload'->>'InicioParada')::bigint / 1000) AT TIME ZONE 'UTC' >= '{{{msg.payload.start_time}}}'\n    AND to_timestamp((payload::jsonb->'machine_event'->'payload'->>'FimParada')::bigint / 1000) AT TIME ZONE 'UTC' <= '{{{msg.payload.end_time}}}'\n    AND ((payload::jsonb->'machine_event'->'payload'->>'machine_id')::int) = 8\n    ",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2190,
        "y": 1700,
        "wires": [
            [
                "8efe442c912879d4"
            ]
        ]
    },
    {
        "id": "78827966e41b9ee0",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "debug 621",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2950,
        "y": 1700,
        "wires": []
    },
    {
        "id": "8efe442c912879d4",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "SET Prog e Nao Pog",
        "func": "const soma_programada = Number(msg.payload[0].soma_programada) || 0\nconst soma_nao_programada = Number(msg.payload[0].soma_nao_programada) || 0\n\nconst sumProg_NProgr_parcial = [{\n    \"soma_programada\":soma_programada,\n    \"soma_nao_programada\": soma_nao_programada\n}]\n\nflow.set(\"sumProg_NProgr_parcial\", sumProg_NProgr_parcial);\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2660,
        "y": 1700,
        "wires": [
            [
                "78827966e41b9ee0"
            ]
        ]
    },
    {
        "id": "b29e83a809198510",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "g": "d208d704f82d0491",
        "name": "debug 622",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1910,
        "y": 1920,
        "wires": []
    },
    {
        "id": "0407af19b5d68332",
        "type": "http request",
        "z": "63695bbdb69c560b",
        "g": "3ecfe0897db45215",
        "name": "GET StopReasons",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1670,
        "y": 160,
        "wires": [
            [
                "6d770953700287f9"
            ]
        ]
    },
    {
        "id": "6d770953700287f9",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "3ecfe0897db45215",
        "name": "function 293",
        "func": "const data = JSON.parse(msg.payload)\nlet id = Math.floor(msg.id_maq)\n\nif (Number.isNaN(id)) {\n    id = null\n}\n\n\nmsg.payload = {}\n\n\nfunction StopsByMachine(data, selectedId = null) {\n    const machineMap = new Map();\n    data.forEach(event => {\n        event.machines.forEach(machine => {\n            if (!machineMap.has(machine.id)) {\n                machineMap.set(machine.id, { id: machine.id, name: machine.name, stopReasons: [] });\n            }\n            machineMap.get(machine.id).stopReasons.push([event.plc_code, event.name, event.expected]);\n        });\n    });\n\n    if (selectedId !== null) {\n        return machineMap.has(selectedId) ? machineMap.get(selectedId) : null;\n    }\n\n    return Array.from(machineMap.values());\n}\n\n\n\nfunction listUniqueMachineNames(data) {\n\n    const machines = new Map();\n    data.forEach(event => {\n        event.machines.forEach(machine => {\n            machines.set(machine.id, machine.name);\n        });\n    });\n\n    const result = Array.from(machines).map(([id, name]) => ({ id, name }));\n\n    return result\n\n\n}\n\n\n\n// Chamar a função e imprimir o resultado\nmsg.payload.maquinas = listUniqueMachineNames(data);\n\n\n\n// Executar a função e imprimir o resultado\nmsg.payload.stopreasons = StopsByMachine(data, id);\n\nflow.set(\"stopreasons\", msg.payload.stopreasons);\n\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 160,
        "wires": [
            [
                "ac0529bdfb3bc11c"
            ]
        ]
    },
    {
        "id": "28a2b103a33ef7d9",
        "type": "inject",
        "z": "63695bbdb69c560b",
        "g": "3ecfe0897db45215",
        "name": "",
        "props": [],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1330,
        "y": 160,
        "wires": [
            [
                "28d5dfe14b3cd92e"
            ]
        ]
    },
    {
        "id": "ac0529bdfb3bc11c",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "g": "3ecfe0897db45215",
        "name": "debug 623",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 160,
        "wires": []
    },
    {
        "id": "28d5dfe14b3cd92e",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "3ecfe0897db45215",
        "name": "Config",
        "func": "\nlet config = flow.get(\"config\")\n\n//msg.id_maq = msg.req.params.id_maq\nmsg.id_maq = config.machine_id\n\n//node.warn(\"Aqui\");\n\nif (config.send == true) {\n  \n\n    msg.url = config.url + \"/stop_reasons.json\"\n    msg.headers = {}\n    msg.headers['Authorization'] = config.token_line\n    msg.payload = {}\n\n\nreturn msg\n\n\n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 160,
        "wires": [
            [
                "0407af19b5d68332"
            ]
        ]
    },
    {
        "id": "397dc81d0d405877",
        "type": "inject",
        "z": "63695bbdb69c560b",
        "d": true,
        "g": "3ecfe0897db45215",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "100",
        "topic": "",
        "x": 1330,
        "y": 220,
        "wires": [
            [
                "cb64f3e3d730c88a"
            ]
        ]
    },
    {
        "id": "cb64f3e3d730c88a",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "3ecfe0897db45215",
        "name": "lista paradas",
        "func": "msg.payload = {}\n\n\nlet lista_paradas = [\n    {\n        \"id\": 2,\n        \"descr\": \"\",\n        \"cod_class\": 0, \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    },\n    {\n        \"id\": 0,\n        \"descr\": \"\",\n        \"cod_class\": 0,\n        \"ZZZZZZZZZZudtZIA_Par3\": 0,\n        \"progr\": false\n    }\n]\n\n\nconst paradas = flow.get(\"stopreasons\");\n\nnode.warn(lista_paradas);\nnode.warn(paradas);\n\nfor (let index = 0; index < paradas.stopReasons.length; index++) {\n    //node.warn(paradas.stopReasons[index][0]);\n    lista_paradas[index].id = 9999\n    lista_paradas[index].descr = paradas.stopReasons[index][1]\n    lista_paradas[index].cod_class = paradas.stopReasons[index][0]\n    lista_paradas[index].ZZZZZZZZZZudtZIA_Par3 = 5\n    lista_paradas[index].progr = paradas.stopReasons[index][2]\n}\n\n\nnode.warn(lista_paradas);\n\nmsg.payload.paradas = lista_paradas\n\nreturn msg\n\n\n// msg.payload = {\n//     \"id\": 23,\n//     \"descr\": \"\",\n//     \"cod_class\": 0,\n//     \"ZZZZZZZZZZudtZIA_Par3\": 0,\n//     \"progr\": false\n// }\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 220,
        "wires": [
            [
                "d602aeceb1b7e529",
                "b5b373566f7d7a9d"
            ]
        ]
    },
    {
        "id": "d602aeceb1b7e529",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "g": "3ecfe0897db45215",
        "name": "debug 624",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1910,
        "y": 280,
        "wires": []
    },
    {
        "id": "b5b373566f7d7a9d",
        "type": "eth-ip out",
        "z": "63695bbdb69c560b",
        "g": "3ecfe0897db45215",
        "endpoint": "8d756ed66187c2a2",
        "variable": "cmdZIA",
        "program": "",
        "name": "",
        "x": 2140,
        "y": 240,
        "wires": []
    },
    {
        "id": "ae17c7aedbc87db4",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "61b4b1488485fb35",
        "name": "Alarme",
        "func": "let memo_aux_id_falha = context.get(\"aux_id_falha\");\nif (msg.payload.aux_id_falha != memo_aux_id_falha) {\n    if (msg.payload.aux_id_falha != 0 && msg.payload.aux_id_falha != 9999) {\n        let config = flow.get(\"config\");\n        let dados_alm = {\n            TimeStamp: new Date(),\n            nameMachine: config.machine_name,\n            ID: msg.payload.aux_id_falha,\n            reason: msg.payload.lastalm\n        };\n        const d = new Date();\n        let minutes = d.getMinutes();\n        let agora = new Date()\n        msg.payload = {\n            \"authenticity_token\": \"L3uhfD4yxArDD6++xrFmFX9LLKfX5PyMstpcUL0zi6SRrHAzTqfBCj1iKfYp4o6GLK9emMZYiAmxF1T9C7BQ==\",\n            \"machine_event\": {\n                \"timestamp(1i)\": agora.getFullYear().toString(),\n                \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n                \"timestamp(3i)\": agora.getDate().toString(),\n                \"timestamp(4i)\": agora.getHours().toString(),\n                \"timestamp(5i)\": agora.getMinutes().toString(),\n                \"event_type_id\": 5,\n                //        \"timestamp(3i)\": d.getDay(),\n                //        \"timestamp(2i)\": d.getMonth(),\n                //        \"timestamp(1i)\": d.getFullYear(),\n                //        \"timestamp(4i)\": d.getHours(),\n                //        \"timestamp(5i)\": d.getMinutes(),\n                \"payload\": dados_alm\n            }\n        }\n        context.set(\"aux_id_falha\", dados_alm.ID);\n        return msg\n    }\n}\ncontext.set(\"aux_id_falha\", msg.payload.aux_id_falha);\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 2340,
        "wires": [
            [
                "40d19a73c2ff508a"
            ]
        ]
    },
    {
        "id": "53558d1d247cf6b3",
        "type": "http request",
        "z": "63695bbdb69c560b",
        "g": "61b4b1488485fb35",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1290,
        "y": 2340,
        "wires": [
            [
                "5cc5aeb27ac3a346"
            ]
        ]
    },
    {
        "id": "5cc5aeb27ac3a346",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "g": "61b4b1488485fb35",
        "name": "debug 625",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 2340,
        "wires": []
    },
    {
        "id": "40d19a73c2ff508a",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "61b4b1488485fb35",
        "name": "function 294",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 2340,
        "wires": [
            [
                "53558d1d247cf6b3",
                "47484667f6579e72"
            ]
        ]
    },
    {
        "id": "f2d73b2470658cd6",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "name": "debug 710",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 280,
        "wires": []
    },
    {
        "id": "b5d7e3b2df25f84c",
        "type": "s7 out",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "endpoint": "9ac76089066debc7",
        "variable": "xResetCounter",
        "name": "",
        "x": 2720,
        "y": 820,
        "wires": []
    },
    {
        "id": "42d4d117caa7f391",
        "type": "s7 out",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "endpoint": "9ac76089066debc7",
        "variable": "xResetReject_r1",
        "name": "",
        "x": 2730,
        "y": 880,
        "wires": []
    },
    {
        "id": "8c17a3e5394074c0",
        "type": "s7 out",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "endpoint": "9ac76089066debc7",
        "variable": "xResetReject_r2",
        "name": "",
        "x": 2730,
        "y": 940,
        "wires": []
    },
    {
        "id": "cfaa607bf0a50867",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "function 326",
        "func": "msg.payload = true\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 820,
        "wires": [
            [
                "b5d7e3b2df25f84c",
                "7be1b336c5543d29"
            ]
        ]
    },
    {
        "id": "87aa67e30c3cdd8e",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "function 327",
        "func": "msg.payload = true\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 880,
        "wires": [
            [
                "42d4d117caa7f391",
                "b15f3a842b21ef8a"
            ]
        ]
    },
    {
        "id": "2bf899289c26d22a",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "function 328",
        "func": "msg.payload = true\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 940,
        "wires": [
            [
                "8c17a3e5394074c0",
                "801286379f081907"
            ]
        ]
    },
    {
        "id": "8c232fb6b3cc1e99",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "function 329",
        "func": "msg.payload = false\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 840,
        "wires": [
            [
                "b5d7e3b2df25f84c"
            ]
        ]
    },
    {
        "id": "05fefa6e42a60890",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "function 330",
        "func": "msg.payload = false\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 900,
        "wires": [
            [
                "42d4d117caa7f391"
            ]
        ]
    },
    {
        "id": "eb2e0512cea60c0e",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "function 331",
        "func": "msg.payload = false\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 960,
        "wires": [
            [
                "8c17a3e5394074c0"
            ]
        ]
    },
    {
        "id": "7be1b336c5543d29",
        "type": "delay",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2320,
        "y": 840,
        "wires": [
            [
                "8c232fb6b3cc1e99"
            ]
        ]
    },
    {
        "id": "b15f3a842b21ef8a",
        "type": "delay",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2320,
        "y": 900,
        "wires": [
            [
                "05fefa6e42a60890"
            ]
        ]
    },
    {
        "id": "801286379f081907",
        "type": "delay",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2320,
        "y": 960,
        "wires": [
            [
                "eb2e0512cea60c0e"
            ]
        ]
    },
    {
        "id": "e3a9e8136178c7a0",
        "type": "inject",
        "z": "63695bbdb69c560b",
        "g": "50f7d195c76ca2be",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1780,
        "y": 640,
        "wires": [
            [
                "cfaa607bf0a50867",
                "87aa67e30c3cdd8e",
                "2bf899289c26d22a"
            ]
        ]
    },
    {
        "id": "1ee0f625bcf17066",
        "type": "link in",
        "z": "63695bbdb69c560b",
        "g": "b2b8da4a1ccd565f",
        "name": "link in 37",
        "links": [
            "615e1f011ffb0b71"
        ],
        "x": 205,
        "y": 1540,
        "wires": [
            [
                "aeb411faad21092d"
            ]
        ]
    },
    {
        "id": "e699a6af84f9cf1d",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "b2b8da4a1ccd565f",
        "name": "function 345",
        "func": "const config = flow.get(\"config\");\nconst guilt = msg.payload[config.machine_name]\nlet name_var_global = \"plc\" + config.machine_name\n\n\n\nif (guilt) {\n    node.warn(\"my warning\");\n    //atualiza a hora da parada com a hora que a enchedora (gargalo) parou\n    let parada = flow.get(\"parada\");\n    parada.hora = new Date().getTime()\n    parada.machine_id = config.machine_id\n    parada.machine_name = config.machine_name\n    global.set(\"parada_linha\", JSON.parse(JSON.stringify(parada)))\n    return msg;\n\n}\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1540,
        "wires": [
            [
                "e84eb9d976ecdae9"
            ]
        ]
    },
    {
        "id": "aeb411faad21092d",
        "type": "delay",
        "z": "63695bbdb69c560b",
        "g": "b2b8da4a1ccd565f",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 330,
        "y": 1540,
        "wires": [
            [
                "e699a6af84f9cf1d"
            ]
        ]
    },
    {
        "id": "0347694e576fae9b",
        "type": "link in",
        "z": "63695bbdb69c560b",
        "g": "b2b8da4a1ccd565f",
        "name": "link in 38",
        "links": [
            "31d753b6c2f98a0f"
        ],
        "x": 205,
        "y": 1600,
        "wires": [
            [
                "444fe8802b21876c"
            ]
        ]
    },
    {
        "id": "444fe8802b21876c",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "b2b8da4a1ccd565f",
        "name": "function 346",
        "func": "let config = flow.get(\"config\");\nlet retorno = new Date()\nlet parada = global.get(\"parada_linha\");\n\nif (parada.machine_id == config.machine_id) {\n\n    let tParada = (retorno.getTime() - parada.hora) / 1000 / 60\n    //let paradasSoma = flow.get(\"paradasSoma\") || flow.set(\"paradasSoma\", { \"Prog\": 0, \"Nprog\": 0 })\n    let turno = global.get(\"turno_\" + config.factory)\n    let machine_event = {}\n\n    machine_event = {\n        \"timestamp(1i)\": retorno.getFullYear().toString(),\n        \"timestamp(2i)\": (retorno.getMonth() + 1).toString(),\n        \"timestamp(3i)\": retorno.getDate().toString(),\n        \"timestamp(4i)\": retorno.getHours().toString(),\n        \"timestamp(5i)\": retorno.getMinutes().toString(),\n        \"timestamp(6i)\": retorno.getSeconds().toString(),\n        \"event_type_id\": 4,\n        \"payload\": {\n            \"aux_id_falha\": parada.aux_id_falha,\n            \"InicioParada\": parada.hora,\n            \"FimParada\": new Date().getTime(),\n            \"tParada\": Number(tParada.toFixed(2)),\n            \"ID\": isNaN(Number(parada.statechanged_id)) ? 0 : Number(parada.statechanged_id), // Garantir que ID seja um número\n            \"Reason\": parada.statechanged_reason,\n            \"ModeReason\": parada.mode,\n            \"StateReason\": parada.state || 0,\n            \"Programada\": parada.programada,\n            \"turno_atual\": turno.turno,\n            \"equip\": config.machine_name,\n            \"machine_id\": config.machine_id,\n            \"guilt\": false\n        }\n    }\n\n    parada.active = false\n    msg.payload.machine_event = machine_event\n\n\n\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1600,
        "wires": [
            [
                "e09a76c58a6d5fab"
            ]
        ]
    },
    {
        "id": "286a0988d3ae1b05",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "g": "b2b8da4a1ccd565f",
        "name": "debug 726",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 1600,
        "wires": []
    },
    {
        "id": "e09a76c58a6d5fab",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "b2b8da4a1ccd565f",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n\n    //msg.payload.machine_event.payload.ID = 999;\n\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1600,
        "wires": [
            [
                "4cfb753e19ca1fe5"
            ]
        ]
    },
    {
        "id": "e84eb9d976ecdae9",
        "type": "debug",
        "z": "63695bbdb69c560b",
        "g": "b2b8da4a1ccd565f",
        "name": "debug 727",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1540,
        "wires": []
    },
    {
        "id": "53dfe18a78a73ccd",
        "type": "function",
        "z": "63695bbdb69c560b",
        "g": "b2b8da4a1ccd565f",
        "name": "Update tempo parada linha",
        "func": "let parada_linha = global.get(\"parada_linha\");\n\nif (parada_linha.active) {\n    let retorno = new Date()\n    \n    let tParada = (retorno.getTime() - parada_linha.hora) / 1000 / 60\n    parada_linha.tParadaAtual = tParada\n\n\n\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "4cfb753e19ca1fe5",
        "type": "http request",
        "z": "63695bbdb69c560b",
        "g": "b2b8da4a1ccd565f",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 700,
        "y": 1600,
        "wires": [
            [
                "286a0988d3ae1b05"
            ]
        ]
    }
]