[
    {
        "id": "4db49bf22c1f0280",
        "type": "tab",
        "label": "Linha 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ce929e136e2f6ff5",
        "type": "tab",
        "label": "Enchedora ID:1 - Gargalo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "68c6c71bd0ac9406",
        "type": "tab",
        "label": "Exemplo -Posicionador 1",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "f46fe07098dce9ef",
        "type": "tab",
        "label": "Paletizadora ID:2",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "10ef8279905934fb",
        "type": "tab",
        "label": "Enchedora 2",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "1970b9c232f39d52",
        "type": "group",
        "z": "4db49bf22c1f0280",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7af793d5767a1133",
            "e67f2a20d8119d5e",
            "08e6b58d3e67b780",
            "73914dad6d4354bf",
            "efc4d64ca38076e0",
            "e4e8225d3c084a5c"
        ],
        "x": 54,
        "y": 1179,
        "w": 872,
        "h": 182
    },
    {
        "id": "8f0c3a971271978e",
        "type": "group",
        "z": "4db49bf22c1f0280",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4b95fa5ea4027d62",
            "6899d40ddfa707e8",
            "9172bf5b4c7926b0",
            "f34d91307f64feae",
            "24867f3a39d8eafa",
            "02532e907f678402",
            "45f7703907e37279",
            "ad214b190eb34035",
            "3b78aab0b21ee186",
            "e3674d78a6065173",
            "41676cabcf6b2306",
            "765414879711521b",
            "24354cc009049ebc",
            "7e7e680b99ebaba8",
            "4cb37d45ecb620e1"
        ],
        "x": 84,
        "y": 139,
        "w": 1482,
        "h": 282
    },
    {
        "id": "21233e68f680bf99",
        "type": "group",
        "z": "4db49bf22c1f0280",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f09509a76ac68842",
            "dd94f7666d21c78b",
            "f38fbdf32af1d619"
        ],
        "x": 84,
        "y": 39,
        "w": 832,
        "h": 82
    },
    {
        "id": "06b890dc92fb2779",
        "type": "group",
        "z": "4db49bf22c1f0280",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7701a1c0f838ebba",
            "5ba83c6c433e70ca",
            "e348c3bb0bbc962d",
            "83d1ec2f99bfd9a5",
            "74bd2e3df1d5bb53",
            "c6e66ef33358c761",
            "c33d237947fd95c1",
            "23daab4d54516d45",
            "6c8cc47adc6fcb08"
        ],
        "x": 94,
        "y": 439,
        "w": 1472,
        "h": 122
    },
    {
        "id": "0c1043edee8ca81d",
        "type": "group",
        "z": "10ef8279905934fb",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "676ba2608b785a1a",
            "32edecb7d8f2c6a1",
            "0870debd4edab50f",
            "e75cf5a9404125c5",
            "c436c8984633edaa",
            "85ab39b2f5274d39",
            "a22970a200ef8775",
            "6ed1cd52e6f81784",
            "80166d2223971ccd",
            "1a80cbdc4c1c5198"
        ],
        "x": 2194,
        "y": 519,
        "w": 1522,
        "h": 202
    },
    {
        "id": "bc3b7c66ae6a3b74",
        "type": "group",
        "z": "10ef8279905934fb",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "c0e11ef2525e6c66",
            "93350edacf2141a6",
            "4b96423a0a26f93f",
            "404cf849585cfce0",
            "33c033e7803825e7",
            "61a756e66186ee1b",
            "fdc61b5730aad40c",
            "c31b818659136ed3",
            "7c6328ce8a12a605",
            "c918d0253a529801",
            "7e2c719b5ad05ff9",
            "fb1fbc10def0094a",
            "f0d5cdbe1dd8f78d",
            "816ce7e77b0345c3",
            "0710eece5ed4a4f0",
            "eed04eb30c58ef0c"
        ],
        "x": 2534,
        "y": 1573,
        "w": 2102,
        "h": 2154
    },
    {
        "id": "53cf2fa7ec13b25f",
        "type": "group",
        "z": "10ef8279905934fb",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c4b72df56c9ba979",
            "ab8eeadad62249bf",
            "12f94fb39bfcc6e3",
            "d497ab19a52767f8",
            "b1ed8277842d63da",
            "76636f85b6b84088",
            "25c98fed1fdeecb5",
            "25c6e998801184cc",
            "d8e0d017538cd9dd",
            "a34363e06bd9db21"
        ],
        "x": 134,
        "y": 2559,
        "w": 1962,
        "h": 282
    },
    {
        "id": "c6f222c616b4cf8b",
        "type": "group",
        "z": "10ef8279905934fb",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "78c2aa06f412474f",
            "a805fd575e376ddb",
            "c3dd91ab4d9e1202",
            "32c56db91c24321e",
            "eed6a9d390d34443",
            "80547e73ed54cdce",
            "18e7e6d2cb925a6f",
            "31a429734a227401",
            "2f14b3875ecc494f",
            "dd80cacc53da1052"
        ],
        "x": 74,
        "y": 1684,
        "w": 2092,
        "h": 197
    },
    {
        "id": "e4a33f9ec8c93a80",
        "type": "group",
        "z": "10ef8279905934fb",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "bc6582c007559cad",
            "601e1d2d5f2a8b87",
            "f8c036e856646dd5",
            "a145af23432a30de",
            "f02b42b84b71a53f"
        ],
        "x": 944,
        "y": 2139,
        "w": 1212,
        "h": 182
    },
    {
        "id": "b18569625feb3411",
        "type": "group",
        "z": "10ef8279905934fb",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d971a286d7a2e63b",
            "a69c0806e7246bf1",
            "f32e51b07ad360e7",
            "54bfdd686966f390"
        ],
        "x": 694,
        "y": 1099,
        "w": 1252,
        "h": 82
    },
    {
        "id": "4f0c9cc18b4583a5",
        "type": "group",
        "z": "10ef8279905934fb",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d509d02e2f9f575f",
            "4078e3f1cfddced6"
        ],
        "x": 2774,
        "y": 3779,
        "w": 692,
        "h": 82
    },
    {
        "id": "b0a577cc84ae5ed6",
        "type": "group",
        "z": "10ef8279905934fb",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cf55baf94df49d42",
            "a220fa37d9e956d1"
        ],
        "x": 2774,
        "y": 3919,
        "w": 692,
        "h": 82
    },
    {
        "id": "c0fec9d8cc7cb04c",
        "type": "group",
        "z": "10ef8279905934fb",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e251751c1aa5d1f5",
            "8689b9ca8bf48afd",
            "5f960507820d92a2",
            "5af5e1d44eac2aea",
            "e952819b9664f0f4",
            "1933f6aa26b0c039"
        ],
        "x": 2914,
        "y": 2539,
        "w": 632,
        "h": 182
    },
    {
        "id": "0ab2118cb8d9b8b8",
        "type": "group",
        "z": "10ef8279905934fb",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e45e32e2f75486fd",
            "53e621514404c166",
            "c6b837ed82e3852d",
            "ceaa6c62c7992e73",
            "65c68a1ba3a0ab43"
        ],
        "x": 424,
        "y": 3199,
        "w": 1602,
        "h": 82
    },
    {
        "id": "e70072d6a56b0c0e",
        "type": "group",
        "z": "ce929e136e2f6ff5",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "eccf40c66bd716ee",
            "6e2c32d255969a5f",
            "18e5145679420ebe",
            "d55c9bf6dcc68e63",
            "535d1cd4e9714389"
        ],
        "x": 74,
        "y": 59,
        "w": 972,
        "h": 122
    },
    {
        "id": "f93d0c790a22dc0e",
        "type": "group",
        "z": "ce929e136e2f6ff5",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ac38ab5fe96ef756",
            "061ca2f07d78dc6a",
            "fb2116c352c779f6",
            "3b4e357f27c2980a",
            "2a5e1574f1de2dee",
            "ba291e20c238c272",
            "21fb91effa2e6b68",
            "7a9758fef8f93c6c",
            "98773b9f69f40686",
            "98ed1a17c3dbc67e",
            "4681c87c5786d137",
            "01f326ee4cef1e23",
            "7989cd83b04769c2"
        ],
        "x": -26,
        "y": 233,
        "w": 2118,
        "h": 974
    },
    {
        "id": "3f2e936b2e73aad3",
        "type": "group",
        "z": "ce929e136e2f6ff5",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "3bf6f41aa1cbed2c",
            "c6ffa2d6c6a0d4eb",
            "b3d902cdb2ba088a",
            "9e4615e27461d49c",
            "141fd2d1f97cb10b",
            "e95755973a3861dc",
            "fe8041d2d42c9fed"
        ],
        "x": 1094,
        "y": 1239,
        "w": 1192,
        "h": 162
    },
    {
        "id": "c8424e2346af4976",
        "type": "group",
        "z": "f46fe07098dce9ef",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cb4950465ed06e56",
            "47aa9e3bf6a744a2",
            "5e3b4e6b62d0a0b0",
            "c29b5266e8bbf963",
            "bd83c3e88718c9a6"
        ],
        "x": 74,
        "y": 59,
        "w": 1212,
        "h": 82
    },
    {
        "id": "68264f585bb5e8a4",
        "type": "group",
        "z": "f46fe07098dce9ef",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d1759e679c2ab325",
            "7cbf76c805b989b0",
            "c3f2f84803bc78c8",
            "f31e720ee80bfd05",
            "fe981cd3aac4ad16",
            "85e3c8efc5f61295",
            "92c480224b54cf8a"
        ],
        "x": 58,
        "y": 233,
        "w": 1874,
        "h": 854
    },
    {
        "id": "59f623d71e654ca6",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ec08ab8acee509be",
            "851749049c6dcfbd",
            "812656207b60b475",
            "6520b762c94df55f",
            "d940bbe660aaf166",
            "8286d6bd0a9d47aa",
            "5193cfdc0c4e9adc",
            "84a3a38089eb5b55",
            "669b9113f1179e08",
            "e7440e2e78ec8b63"
        ],
        "x": 2254,
        "y": 519,
        "w": 1522,
        "h": 202
    },
    {
        "id": "4145bc8a22617df3",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "fefd1cf3c40b27be",
            "70f7e312be09e180",
            "a44cd01551e111a2",
            "0b9c26147475e9a0",
            "9d77b6a99f2d17f3",
            "e6f87ab81ec6df34",
            "08cc81fd7ebb8937",
            "1903416abfc902c3",
            "097299724ddfd9a7",
            "e3d3bc25164f0a1f",
            "149aa416c32264fe",
            "1d6b6c673f452dda",
            "aa35aeb92c2dd0d2",
            "22a0a19a1efd9853",
            "98998a1633d82261",
            "e2e2f8d8cb126123"
        ],
        "x": 2594,
        "y": 1573,
        "w": 2102,
        "h": 2154
    },
    {
        "id": "01c39ead661e41e4",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e00e329433ce51e3",
            "b76811875a1bf957",
            "956606b7858c9991",
            "866bc8213653c163",
            "f30b63788e44ded4",
            "02a7e8f4b8e3d380",
            "31664258a580e0a4",
            "61d3d4aa814e5435",
            "d9c69f013272670f",
            "c36a71f44076f791"
        ],
        "x": 194,
        "y": 2559,
        "w": 1962,
        "h": 282
    },
    {
        "id": "0604c6ea021b07c0",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "efaea9b26efc215f",
            "781118fc13670aea",
            "7a4a3874b9a25cad",
            "4a0520147f8e3a3d",
            "14a1b267d0eb8a6e",
            "319e7ad2e07e1e5d",
            "7369be01d946e825",
            "8f04fefffee248a1",
            "2a5795388439e525",
            "44cfe54f724206c6",
            "53232f762de84f0b"
        ],
        "x": 154,
        "y": 1664,
        "w": 2062,
        "h": 217
    },
    {
        "id": "c4162b7fc225aa84",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "aa959d6dd17e8e46",
            "b9ea3c966c6dbea3",
            "ed42d3a133756cd7",
            "331cf843029402ca",
            "d9b3a5ea45395a0f"
        ],
        "x": 1134,
        "y": 2139,
        "w": 1082,
        "h": 182
    },
    {
        "id": "d8871f42a247b3ed",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b8a95c6bb7f5cac2",
            "fd3cfd88dcbd4639",
            "388c5ab790dee33a"
        ],
        "x": 134,
        "y": 79,
        "w": 862,
        "h": 82
    },
    {
        "id": "ee55c66084446fe9",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "53c37be8e06998b2",
            "30a1290528a4ff07",
            "355e9037456fee86",
            "283feb4290280998"
        ],
        "x": 854,
        "y": 1439,
        "w": 1252,
        "h": 82
    },
    {
        "id": "867b38a14411d76d",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "01fb227729f3cb97",
            "a50977bbf082e43d",
            "2c3e5e46433b91c1",
            "1fa37cf867749907",
            "b18c2478bf65f6e1",
            "fa2f1cd6f1f0cb6f",
            "9b6a9f86a218be57",
            "7bbff6591f41d1d1",
            "4e59058a1dc05ced",
            "2f73ed9e6dd8dc44",
            "4036f4a06b8f8740",
            "95900e409ee961a5",
            "07dbdfff6be73712",
            "a0352ee4d1777d31",
            "471f12bdd9aa1ca9",
            "6922a50cc6b7fade",
            "643e7e1129f458c7",
            "5d5ea873fe77da47",
            "844e9b6450179a8e",
            "7037616d8c63ef34",
            "00cc58897ce8d661",
            "68fb9711bb42b53c",
            "bdfe30c73d6909d5",
            "77036d9152fb6b26",
            "a91a076e0ab378d2",
            "ed4ab7a8085fafc6",
            "2b2a64daa13770c5"
        ],
        "x": 74,
        "y": 213,
        "w": 2632,
        "h": 1188
    },
    {
        "id": "709ad69e2fd995aa",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "03f6fe828ba36d4f",
            "8766fef998471723"
        ],
        "x": 2834,
        "y": 3779,
        "w": 692,
        "h": 82
    },
    {
        "id": "2ce866e91f8eed28",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "532be47dd43c1121",
            "4a12abef616d3ae8"
        ],
        "x": 2834,
        "y": 3919,
        "w": 692,
        "h": 82
    },
    {
        "id": "cd8a7e893a94fc1c",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ecc564ba5fe7dcf0",
            "6dc16ea4962723cb",
            "820afb8d23329f6c",
            "8b9185dd5e2ed9c0",
            "d1380b7c7e99a4fe",
            "cbfc1fe192fe548a"
        ],
        "x": 2974,
        "y": 2539,
        "w": 632,
        "h": 182
    },
    {
        "id": "459ca32beb43d15c",
        "type": "group",
        "z": "ce929e136e2f6ff5",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fb2b60893845cad2",
            "753158a2e663a0fd",
            "963baede95ce8bea",
            "766d1b6b1a134c73",
            "e8cf77d8a6dc4c08",
            "42e4e64a3a80f33b",
            "734251fd41dc7978",
            "9a4bf7a228778cb9",
            "663624e8ca0a1e78",
            "066b296d73187079",
            "fd7fc09cdabffddb",
            "60e6dc96f61bbded",
            "d075eeed73cb2341",
            "a8cc0ec420cbc79f",
            "c905665172f33734",
            "a8b041b0adf7adde",
            "284080670eb707c0",
            "e751ba8f8a53c996",
            "63c0c4a38217c95b"
        ],
        "x": 514,
        "y": 1499,
        "w": 2032,
        "h": 442
    },
    {
        "id": "ba291e20c238c272",
        "type": "group",
        "z": "ce929e136e2f6ff5",
        "g": "f93d0c790a22dc0e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "334f41c689eb3660",
            "0a6631ed217c492b",
            "6e387f94df3ff1a6"
        ],
        "x": 84,
        "y": 259,
        "w": 582,
        "h": 82
    },
    {
        "id": "2a5e1574f1de2dee",
        "type": "group",
        "z": "ce929e136e2f6ff5",
        "g": "f93d0c790a22dc0e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "270a5c1f9c676570",
            "f0361fc4c4221498",
            "ca0f070278aeeb0a",
            "cd65876f83318ed0"
        ],
        "x": 994,
        "y": 259,
        "w": 892,
        "h": 142
    },
    {
        "id": "c31b818659136ed3",
        "type": "group",
        "z": "10ef8279905934fb",
        "g": "bc3b7c66ae6a3b74",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9f069734b8759bc9",
            "4ef1e214f3b49a86",
            "5bcf27d66dfa06c8",
            "e53d139e189a8680",
            "5d8acdd46de83014",
            "f4a32fae653f45e0",
            "56cea5fb3b56547c",
            "51349c793fee797a",
            "15dbccdabdfd10d7",
            "f3742f0bdeb01c68",
            "d09079f0e9d0c66f",
            "d05cc842f9caa87d",
            "b313ceaa7c57be09",
            "b7b93733d1af124e",
            "ecd184f71236e207",
            "6cccd65d7c970e45",
            "ac67c16a51163b09",
            "54334d96f4edcc15"
        ],
        "x": 2914,
        "y": 1759,
        "w": 532,
        "h": 722
    },
    {
        "id": "7c6328ce8a12a605",
        "type": "group",
        "z": "10ef8279905934fb",
        "g": "bc3b7c66ae6a3b74",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a57dd2c44a0261a8",
            "05dfec7c5bfed67f",
            "5adb327a404f24dc"
        ],
        "x": 2794,
        "y": 1599,
        "w": 652,
        "h": 122
    },
    {
        "id": "c918d0253a529801",
        "type": "group",
        "z": "10ef8279905934fb",
        "g": "bc3b7c66ae6a3b74",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "427d7aa80895c1c8",
            "bb27108b21a66b63",
            "40a6816805a3faef",
            "75b0552c3aadacae",
            "851d0a19a0d80c61"
        ],
        "x": 2754,
        "y": 2779,
        "w": 832,
        "h": 222
    },
    {
        "id": "7e2c719b5ad05ff9",
        "type": "group",
        "z": "10ef8279905934fb",
        "g": "bc3b7c66ae6a3b74",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "258b3d055e651cdb",
            "baa709204faa1d54",
            "df6ee32a1d623560",
            "c4fec526d95fcca9",
            "38853eae2b2c811f"
        ],
        "x": 2774,
        "y": 3039,
        "w": 752,
        "h": 202
    },
    {
        "id": "fb1fbc10def0094a",
        "type": "group",
        "z": "10ef8279905934fb",
        "g": "bc3b7c66ae6a3b74",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ca14ca76a638213e",
            "b5842303dc6c651c"
        ],
        "x": 2774,
        "y": 3499,
        "w": 632,
        "h": 82
    },
    {
        "id": "f0d5cdbe1dd8f78d",
        "type": "group",
        "z": "10ef8279905934fb",
        "g": "bc3b7c66ae6a3b74",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5c6b38406fca3d33",
            "ae105990f804fade",
            "50110d7dee98c2c9",
            "713238d37e61e2b0",
            "5e59cee2b5db616a"
        ],
        "x": 2774,
        "y": 3259,
        "w": 752,
        "h": 202
    },
    {
        "id": "0710eece5ed4a4f0",
        "type": "group",
        "z": "10ef8279905934fb",
        "g": "bc3b7c66ae6a3b74",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "18bf34b2f5aa31a5",
            "8b6ac2950d537884"
        ],
        "x": 2774,
        "y": 3619,
        "w": 692,
        "h": 82
    },
    {
        "id": "fb2116c352c779f6",
        "type": "group",
        "z": "ce929e136e2f6ff5",
        "g": "f93d0c790a22dc0e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "bf265bc99871facb",
            "c6704a6e95f0f28e",
            "b104760d2f6fc749",
            "4712cf5fce29b017",
            "1652bfb0b174eecb",
            "4ee0d78b61d6aa6a",
            "200fb71a7b263246",
            "fa9625595cba3231",
            "5cc17c473eca9da1",
            "51c633dae1c50ca1",
            "cf2653469d5daa48"
        ],
        "x": 754,
        "y": 419,
        "w": 1152,
        "h": 302
    },
    {
        "id": "3b4e357f27c2980a",
        "type": "group",
        "z": "ce929e136e2f6ff5",
        "g": "f93d0c790a22dc0e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0d73da9c00922ad0",
            "90c61f829cfa54fa",
            "d1036018d1cad445",
            "99347ed529053daa",
            "def0a58acd0ffa8c",
            "86413e78c81e37bb"
        ],
        "x": 774,
        "y": 1059,
        "w": 1152,
        "h": 122
    },
    {
        "id": "92c480224b54cf8a",
        "type": "group",
        "z": "f46fe07098dce9ef",
        "g": "68264f585bb5e8a4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3e3199eee0a78822",
            "24154bf98161f7b2",
            "14cec4408b3cf1c9"
        ],
        "x": 84,
        "y": 259,
        "w": 582,
        "h": 82
    },
    {
        "id": "85e3c8efc5f61295",
        "type": "group",
        "z": "f46fe07098dce9ef",
        "g": "68264f585bb5e8a4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "571ea843c213a724",
            "04d3e6172b506258",
            "d09bd9609a2e6c29",
            "2815940960a8b447"
        ],
        "x": 994,
        "y": 259,
        "w": 892,
        "h": 142
    },
    {
        "id": "c3f2f84803bc78c8",
        "type": "group",
        "z": "f46fe07098dce9ef",
        "g": "68264f585bb5e8a4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f1090e0bc6e6adde",
            "217c5f54fdf153e2",
            "7be583ebbf219649",
            "d29ecd7e6464b7ec"
        ],
        "x": 754,
        "y": 739,
        "w": 1152,
        "h": 142
    },
    {
        "id": "f31e720ee80bfd05",
        "type": "group",
        "z": "f46fe07098dce9ef",
        "g": "68264f585bb5e8a4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e4525bfc1bc67b17",
            "09f25d0473380597",
            "eac21530c0fe6bce",
            "3e1d08bd4eec3124",
            "f1572b774033e546",
            "7647f1a64a742173",
            "6f3651e797427b7b",
            "df24d2e2596fb3a7",
            "ef666b4a3582ea93",
            "1136ecc15b611154",
            "bef0860f190cb83a"
        ],
        "x": 754,
        "y": 419,
        "w": 1152,
        "h": 302
    },
    {
        "id": "fe981cd3aac4ad16",
        "type": "group",
        "z": "f46fe07098dce9ef",
        "g": "68264f585bb5e8a4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9c2ea5624f837e72",
            "4f0bf9fa0d33df5d",
            "b7713f58325bd9f3",
            "8accc8a1ead3aca5",
            "b5cbe1c30fedefb6",
            "b838acfd6f03cfda"
        ],
        "x": 754,
        "y": 939,
        "w": 1152,
        "h": 122
    },
    {
        "id": "1903416abfc902c3",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "g": "4145bc8a22617df3",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e079dd8896b98e95",
            "256bc123441d3d4b",
            "28ca4d5b88c45d0f",
            "b385cd555fefb797",
            "d51d06222836f8a4",
            "7c548feb40b876e7",
            "3761cb1b3725dfed",
            "57f581be1fb49398",
            "14a27e42c41528cf",
            "af6cebe74f32216a",
            "17646e49e1ee5eaf",
            "3110a58a951081d2",
            "be16a8eba7a0e787",
            "38e0f58e7a800d5e",
            "9899e8a13f56970f",
            "2a1b43560e362234",
            "f2a427b6366c55c5",
            "590be0d44482ca38"
        ],
        "x": 2974,
        "y": 1759,
        "w": 532,
        "h": 722
    },
    {
        "id": "097299724ddfd9a7",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "g": "4145bc8a22617df3",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6393e3e7497bdf4c",
            "4aa1979b695e4eaf",
            "406f6dc3dd4c1102"
        ],
        "x": 2854,
        "y": 1599,
        "w": 652,
        "h": 122
    },
    {
        "id": "e3d3bc25164f0a1f",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "g": "4145bc8a22617df3",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5a7b73dae41723f6",
            "b9480ee5fa423d61",
            "dd9f47e4adc48085",
            "2cb276775ecb6f0c",
            "56301b3a69bcf6ce",
            "f6a8406206fd9e53",
            "e561c28c461ed5ee"
        ],
        "x": 2814,
        "y": 2779,
        "w": 832,
        "h": 222
    },
    {
        "id": "149aa416c32264fe",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "g": "4145bc8a22617df3",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cbdbad40ded3f3d3",
            "b54a2723521a1285",
            "970b5135365a9285",
            "377e995a18565801",
            "70f5c595077e2c90",
            "895a18068f512581",
            "2613c5d2cb06b676"
        ],
        "x": 2834,
        "y": 3039,
        "w": 752,
        "h": 202
    },
    {
        "id": "1d6b6c673f452dda",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "g": "4145bc8a22617df3",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "42b3458174591bc1",
            "094e1f44e4c1505a"
        ],
        "x": 2834,
        "y": 3499,
        "w": 652,
        "h": 82
    },
    {
        "id": "aa35aeb92c2dd0d2",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "g": "4145bc8a22617df3",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d53412584d14811c",
            "481582d17772f656",
            "70b22f3114c08763",
            "716a0f9c5dd77b95",
            "22fc76a8aca66399",
            "d728a419db469003",
            "fc0752dba04e459a"
        ],
        "x": 2834,
        "y": 3259,
        "w": 752,
        "h": 202
    },
    {
        "id": "98998a1633d82261",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "g": "4145bc8a22617df3",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1f67f56566e21e97",
            "54ba80ddf7befb62"
        ],
        "x": 2834,
        "y": 3619,
        "w": 692,
        "h": 82
    },
    {
        "id": "2c3e5e46433b91c1",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "bee9a20d7dd49437",
            "9f0224839acc721b",
            "3d549f73688d4245",
            "1b70a4f28b196640",
            "603bde7a62af2c4d",
            "2e3745ef1ff2f054",
            "45448a545092ddb1",
            "47c6aca040f5268a",
            "b2945951e3ba1c7c",
            "51f67bb12eebea4c",
            "6f5da15f86b9f5de"
        ],
        "x": 874,
        "y": 519,
        "w": 1252,
        "h": 242
    },
    {
        "id": "1fa37cf867749907",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "31a0924335ef5cd1",
            "0304b1c4475aa7ce",
            "9c506b841406ed13",
            "960b90b0b1fdbaab",
            "d12b3342e21815e0",
            "7b05d22aa92cc3fe",
            "21524eca5faabfc0"
        ],
        "x": 814,
        "y": 239,
        "w": 1172,
        "h": 222
    },
    {
        "id": "b18c2478bf65f6e1",
        "type": "group",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0c77d52105beac06",
            "89891a05dbdb4849",
            "a9e3f868bec8a605",
            "2c6c6c3230cdceac",
            "4703310b06c0f007"
        ],
        "x": 934,
        "y": 899,
        "w": 1172,
        "h": 82
    },
    {
        "id": "21fb91effa2e6b68",
        "type": "group",
        "z": "ce929e136e2f6ff5",
        "g": "f93d0c790a22dc0e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ada018c035eabe44",
            "bb65914917f00966",
            "405ad91eff12fc9b",
            "6a6bf494443bdff0",
            "6e4151324231cead",
            "368dc217fde1e6d8",
            "bcbb66e600d3d2f8",
            "d1492894a70b8bb0",
            "6afefe578e3ccaa1",
            "f7317e38a104b64b",
            "1407a90c7325bb5f"
        ],
        "x": 794,
        "y": 759,
        "w": 1272,
        "h": 262
    },
    {
        "id": "c22e14e170657944",
        "type": "eth-ip endpoint",
        "address": "192.168.5.1",
        "slot": "0",
        "cycletime": "100",
        "timeout": "10000",
        "name": "PLC_Enchedora",
        "connectedMess": true,
        "vartable": {
            "": {
                "dados_ZIA": {
                    "type": "STRUCT",
                    "mapping": "plcenchedora"
                },
                "cmdZIA": {
                    "type": "STRUCT",
                    "mapping": "reset"
                }
            }
        }
    },
    {
        "id": "4556d5bb4d9f69bc",
        "type": "eth-ip endpoint",
        "d": true,
        "address": "192.168.5.1",
        "slot": "0",
        "cycletime": "3000",
        "timeout": "10000",
        "name": "PLC_Paletizadora",
        "connectedMess": true,
        "vartable": {
            "": {
                "dados_ZIA": {
                    "type": "STRUCT",
                    "mapping": "plcpaletizadora"
                },
                "cmdZIA": {
                    "type": "STRUCT",
                    "mapping": "reset"
                }
            }
        }
    },
    {
        "id": "15aa5d80673142f2",
        "type": "postgreSQLConfig",
        "name": "ZIA_IOT",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "zia_iot",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "zegla@1982",
        "passwordFieldType": "str"
    },
    {
        "id": "4b95fa5ea4027d62",
        "type": "http request",
        "z": "4db49bf22c1f0280",
        "g": "8f0c3a971271978e",
        "name": "GET turnos",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 630,
        "y": 240,
        "wires": [
            [
                "f34d91307f64feae",
                "7e7e680b99ebaba8"
            ]
        ]
    },
    {
        "id": "6899d40ddfa707e8",
        "type": "inject",
        "z": "4db49bf22c1f0280",
        "g": "8f0c3a971271978e",
        "name": "",
        "props": [],
        "repeat": "1200",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 240,
        "wires": [
            [
                "765414879711521b"
            ]
        ]
    },
    {
        "id": "9172bf5b4c7926b0",
        "type": "debug",
        "z": "4db49bf22c1f0280",
        "g": "8f0c3a971271978e",
        "name": "debug 348",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1010,
        "y": 320,
        "wires": []
    },
    {
        "id": "f34d91307f64feae",
        "type": "json",
        "z": "4db49bf22c1f0280",
        "g": "8f0c3a971271978e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 830,
        "y": 240,
        "wires": [
            [
                "24354cc009049ebc"
            ]
        ]
    },
    {
        "id": "24867f3a39d8eafa",
        "type": "function",
        "z": "4db49bf22c1f0280",
        "g": "8f0c3a971271978e",
        "name": "Turnos, Tempo Transcorr",
        "func": "\n/////////////////////////////////////////////////////////\nlet config = flow.get(\"config\");\n///////////////////// define os horários de início e fim de cada turno, com os dados do GET\nlet turno = calculaTurno(msg.payload)\nglobal.set(\"turno_\" + config.factory, turno);\n\nlet turno_anterior = global.get(\"turno_anterior_\" + config.factory) || global.set(\"turno_anterior_\" + config.factory, turno.turno);\n\natualiza_memoTurno()\nmsg = {}\nmsg.payload = turno\nreturn msg\n\n//verifica se houve mudancao de turno\nfunction atualiza_memoTurno() {\n    if ((turno.turno != turno_anterior) && turno_anterior != 0) {\n        global.set(\"turno_anterior_\" + config.factory, turno.turno)\n    }\n}\n\n/**\n* @param {string | any[]} b\n*/\nfunction calculaTurno(b) {\n    let agora = new Date();\n    let a = {}\n\n    //agora.setFullYear(2000, 0, 1);\n    /////////////////// itera sobre os turnos para encontrar o atual\n    let turnoAtual = null;\n    for (let i = 0; i < b.length; i++) {\n        b[i].start_time = new Date(b[i].start_time)\n        b[i].end_time = new Date(b[i].end_time)\n        agora.setFullYear(2000, 0, 1);\n        const inicio = b[i].start_time\n        let fim = b[i].end_time\n\n        /////////////// verifica se o turno atravessa a meia-noite\n        if (fim < inicio) {\n            fim.setFullYear(2000, 0, 2);\n            if (agora < new Date(`01/02/2000 00:00`) && agora > inicio) {\n            } else {\n                agora.setFullYear(2000, 0, 2);\n            }\n        }\n        //////////////// verifica se a hora atual está dentro do turno\n        if (agora >= inicio && agora < fim) {\n            turnoAtual = i;\n            break;\n        }\n    }\n    //////////////////// exibe o turno atual e o tempo transcorrido\n    if (turnoAtual !== null) {\n        const inicioTurno = b[turnoAtual].start_time\n        //console.log(inicioTurno)\n        let fimTurno = b[turnoAtual].end_time\n        /////////////// verifica se o turno atravessa a meia-noite\n        if (fimTurno < inicioTurno) {\n            fimTurno.setFullYear(2000, 0, 2)\n        }\n\n\n        const tempoTranscorrido = ((agora.getTime() - inicioTurno.getTime()) / 1000 / 60);\n        a.payload = {\n            //...a.payload,\n            turno: turnoAtual + 1,\n            tempoTranscorrido: tempoTranscorrido\n        };\n    } else {\n        a.payload = {\n            //...a.payload,\n            turno: 0,\n            tempoTranscorrido: 0\n        };\n    }\n    return a.payload\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 320,
        "wires": [
            [
                "9172bf5b4c7926b0"
            ]
        ]
    },
    {
        "id": "02532e907f678402",
        "type": "change",
        "z": "4db49bf22c1f0280",
        "g": "8f0c3a971271978e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "turnos_times",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 240,
        "wires": [
            [
                "45f7703907e37279"
            ]
        ]
    },
    {
        "id": "45f7703907e37279",
        "type": "debug",
        "z": "4db49bf22c1f0280",
        "g": "8f0c3a971271978e",
        "name": "debug 351",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload[0].start_time",
        "statusType": "msg",
        "x": 1450,
        "y": 240,
        "wires": []
    },
    {
        "id": "ad214b190eb34035",
        "type": "inject",
        "z": "4db49bf22c1f0280",
        "g": "8f0c3a971271978e",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 320,
        "wires": [
            [
                "3b78aab0b21ee186"
            ]
        ]
    },
    {
        "id": "3b78aab0b21ee186",
        "type": "change",
        "z": "4db49bf22c1f0280",
        "g": "8f0c3a971271978e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "turnos_times",
                "tot": "flow",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 320,
        "wires": [
            [
                "24867f3a39d8eafa"
            ]
        ],
        "info": "leitura da memoria dos turnos configurados"
    },
    {
        "id": "e3674d78a6065173",
        "type": "catch",
        "z": "4db49bf22c1f0280",
        "g": "8f0c3a971271978e",
        "name": "",
        "scope": [
            "24867f3a39d8eafa"
        ],
        "uncaught": false,
        "x": 770,
        "y": 380,
        "wires": [
            [
                "41676cabcf6b2306"
            ]
        ],
        "info": "catch error da funcao."
    },
    {
        "id": "41676cabcf6b2306",
        "type": "debug",
        "z": "4db49bf22c1f0280",
        "g": "8f0c3a971271978e",
        "name": "debug 354",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 380,
        "wires": []
    },
    {
        "id": "7af793d5767a1133",
        "type": "catch",
        "z": "4db49bf22c1f0280",
        "g": "1970b9c232f39d52",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 200,
        "y": 1240,
        "wires": [
            [
                "e67f2a20d8119d5e"
            ]
        ]
    },
    {
        "id": "e67f2a20d8119d5e",
        "type": "file",
        "z": "4db49bf22c1f0280",
        "g": "1970b9c232f39d52",
        "name": "",
        "filename": "./supZIA/catchs.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 450,
        "y": 1220,
        "wires": [
            [
                "08e6b58d3e67b780"
            ]
        ]
    },
    {
        "id": "08e6b58d3e67b780",
        "type": "debug",
        "z": "4db49bf22c1f0280",
        "g": "1970b9c232f39d52",
        "name": "debug 424",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1220,
        "wires": []
    },
    {
        "id": "73914dad6d4354bf",
        "type": "file in",
        "z": "4db49bf22c1f0280",
        "g": "1970b9c232f39d52",
        "name": "",
        "filename": "./supZIA/catchs.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 510,
        "y": 1320,
        "wires": [
            [
                "e4e8225d3c084a5c"
            ]
        ]
    },
    {
        "id": "efc4d64ca38076e0",
        "type": "inject",
        "z": "4db49bf22c1f0280",
        "g": "1970b9c232f39d52",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 1300,
        "wires": [
            [
                "73914dad6d4354bf"
            ]
        ]
    },
    {
        "id": "e4e8225d3c084a5c",
        "type": "debug",
        "z": "4db49bf22c1f0280",
        "g": "1970b9c232f39d52",
        "name": "debug 425",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1320,
        "wires": []
    },
    {
        "id": "f09509a76ac68842",
        "type": "inject",
        "z": "4db49bf22c1f0280",
        "g": "21233e68f680bf99",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "dd94f7666d21c78b"
            ]
        ]
    },
    {
        "id": "dd94f7666d21c78b",
        "type": "function",
        "z": "4db49bf22c1f0280",
        "g": "21233e68f680bf99",
        "name": "CONFIG",
        "func": "//configuracaao de linha\n\nlet config = {}\n\nconfig.machine_name = \"enchedora\"\n\nconfig.factory = 1\n\n//config.token_machine = \"Bearer \" + \"518bdf3701d869a89b4e241d5e63559459b1ce2e\"\nconfig.token_line = \"Bearer \" + \"00bc757a398cc98d299fd6fc2119929c48647db9\"\nconfig.url = \"http://127.0.0.1:3003\"\nconfig.url_machine = config.url + \"/machine_events\"\nconfig.url_line = config.url + \"/production_line_events\"\nconfig.send = true /// habilita POST\n\nflow.set(\"config\", config);\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 80,
        "wires": [
            [
                "f38fbdf32af1d619"
            ]
        ]
    },
    {
        "id": "f38fbdf32af1d619",
        "type": "debug",
        "z": "4db49bf22c1f0280",
        "g": "21233e68f680bf99",
        "name": "debug 432",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 80,
        "wires": []
    },
    {
        "id": "765414879711521b",
        "type": "function",
        "z": "4db49bf22c1f0280",
        "g": "8f0c3a971271978e",
        "name": "Config Line Troca de Turno",
        "func": "let config = flow.get(\"config\")\n\nif (config.send == true) {\n    msg.url = config.url + \"/shifts.json\"\n    msg.headers = {}\n    msg.headers['Authorization'] = config.token_line\n    msg.payload = {}\n    return msg\n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 240,
        "wires": [
            [
                "4b95fa5ea4027d62"
            ]
        ]
    },
    {
        "id": "7701a1c0f838ebba",
        "type": "http response",
        "z": "4db49bf22c1f0280",
        "g": "06b890dc92fb2779",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1450,
        "y": 480,
        "wires": []
    },
    {
        "id": "5ba83c6c433e70ca",
        "type": "http request",
        "z": "4db49bf22c1f0280",
        "g": "06b890dc92fb2779",
        "name": "GET StopReasons",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 870,
        "y": 480,
        "wires": [
            [
                "c33d237947fd95c1",
                "e348c3bb0bbc962d"
            ]
        ]
    },
    {
        "id": "e348c3bb0bbc962d",
        "type": "function",
        "z": "4db49bf22c1f0280",
        "g": "06b890dc92fb2779",
        "name": "function 256",
        "func": "const data = JSON.parse(msg.payload)\nlet id = Math.floor(msg.id_maq)\n\nif (Number.isNaN(id)) {\n    id = null\n}\n\n\nmsg.payload ={}\n\n\nfunction StopsByMachine(data, selectedId = null) {\n    const machineMap = new Map();\n    data.forEach(event => {\n        event.machines.forEach(machine => {\n            if (!machineMap.has(machine.id)) {\n                machineMap.set(machine.id, { id: machine.id, name: machine.name, stopReasons: [] });\n            }\n            machineMap.get(machine.id).stopReasons.push(event.name);\n        });\n    });\n\n    if (selectedId !== null) {\n        return machineMap.has(selectedId) ? machineMap.get(selectedId) : null;\n    }\n\n    return Array.from(machineMap.values());\n}\n\n\n\nfunction listUniqueMachineNames(data) {\n    \n    const machines = new Map();\n    data.forEach(event => {\n    event.machines.forEach(machine => {\n        machines.set(machine.id, machine.name);\n    });\n});\n\nconst result = Array.from(machines).map(([id, name]) => ({ id, name }));\n\nreturn result\n\n\n}\n\n\n\n// Chamar a função e imprimir o resultado\nmsg.payload.maquinas = listUniqueMachineNames(data);\n\n\n\n// Executar a função e imprimir o resultado\nmsg.payload.stopreasons = StopsByMachine(data,id);\n\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 480,
        "wires": [
            [
                "c6e66ef33358c761",
                "7701a1c0f838ebba"
            ]
        ]
    },
    {
        "id": "83d1ec2f99bfd9a5",
        "type": "inject",
        "z": "4db49bf22c1f0280",
        "g": "06b890dc92fb2779",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 290,
        "y": 520,
        "wires": [
            [
                "6c8cc47adc6fcb08"
            ]
        ]
    },
    {
        "id": "74bd2e3df1d5bb53",
        "type": "http in",
        "z": "4db49bf22c1f0280",
        "g": "06b890dc92fb2779",
        "name": "",
        "url": "/maquinas/:id_maq?",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 480,
        "wires": [
            [
                "6c8cc47adc6fcb08"
            ]
        ]
    },
    {
        "id": "c6e66ef33358c761",
        "type": "debug",
        "z": "4db49bf22c1f0280",
        "g": "06b890dc92fb2779",
        "name": "debug 485",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 520,
        "wires": []
    },
    {
        "id": "c33d237947fd95c1",
        "type": "debug",
        "z": "4db49bf22c1f0280",
        "g": "06b890dc92fb2779",
        "name": "debug 487",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 520,
        "wires": []
    },
    {
        "id": "24354cc009049ebc",
        "type": "function",
        "z": "4db49bf22c1f0280",
        "g": "8f0c3a971271978e",
        "name": "Ajuste Fuso",
        "func": "\nmsg.payload.sort((a, b) => a.number - b.number);\n\n\n// Ajustar `start_time` e `end_time` para -2 horas\nmsg.payload.forEach(obj => {\n  obj.start_time = new Date(new Date(obj.start_time).getTime() - 2 * 60 * 60 * 1000).toISOString();\n  obj.end_time = new Date(new Date(obj.end_time).getTime() - 2 * 60 * 60 * 1000).toISOString();\n});\n\n\nmsg.teste = msg.payload[1].start_time\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 240,
        "wires": [
            [
                "02532e907f678402",
                "4cb37d45ecb620e1"
            ]
        ]
    },
    {
        "id": "23daab4d54516d45",
        "type": "debug",
        "z": "4db49bf22c1f0280",
        "g": "06b890dc92fb2779",
        "name": "debug 490",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 520,
        "wires": []
    },
    {
        "id": "6c8cc47adc6fcb08",
        "type": "function",
        "z": "4db49bf22c1f0280",
        "g": "06b890dc92fb2779",
        "name": "Config",
        "func": "\nlet config = flow.get(\"config\")\n\n//msg.id_maq = msg.req.params.id_maq\nmsg.id_maq = 2\n\nnode.warn(\"Aqui\");\n\nif (config.send == true) {\n  \n\n    msg.url = config.url + \"/stop_reasons.json\"\n    msg.headers = {}\n    msg.headers['Authorization'] = config.token_line\n    msg.payload = {}\n\n\nreturn msg\n\n\n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 480,
        "wires": [
            [
                "5ba83c6c433e70ca",
                "23daab4d54516d45"
            ]
        ]
    },
    {
        "id": "7e7e680b99ebaba8",
        "type": "debug",
        "z": "4db49bf22c1f0280",
        "g": "8f0c3a971271978e",
        "name": "debug 491",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 180,
        "wires": []
    },
    {
        "id": "4cb37d45ecb620e1",
        "type": "change",
        "z": "4db49bf22c1f0280",
        "g": "8f0c3a971271978e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "turnos_times",
                "pt": "global",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 180,
        "wires": [
            [
                "45f7703907e37279"
            ]
        ]
    },
    {
        "id": "35ea7d8e27794ec6",
        "type": "function",
        "z": "4db49bf22c1f0280",
        "name": "Production Counter",
        "func": "let dados_1 = global.get(\"plcenchedora\");\nlet dados_2 = global.get(\"plcpaletizadora\");\n\n\nlet productionsCounters = {\n    1: dados_1.diProductionCounter - dados_1.diCounterReject_r1 - dados_1.diCounterReject_r1,\n    //2: dados_2.diProductionCounter - dados_2.diCounterReject_r1 - dados_2.diCounterReject_r1,\n    2: 1000,\n}\n\nglobal.set(\"productionsCounters\", productionsCounters);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 80,
        "wires": [
            [
                "d050d5ef7f10a817"
            ]
        ]
    },
    {
        "id": "d675c43bda4c40a5",
        "type": "inject",
        "z": "4db49bf22c1f0280",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1210,
        "y": 80,
        "wires": [
            [
                "35ea7d8e27794ec6"
            ]
        ]
    },
    {
        "id": "d050d5ef7f10a817",
        "type": "debug",
        "z": "4db49bf22c1f0280",
        "name": "debug 528",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1810,
        "y": 60,
        "wires": []
    },
    {
        "id": "eccf40c66bd716ee",
        "type": "file in",
        "z": "ce929e136e2f6ff5",
        "g": "e70072d6a56b0c0e",
        "name": "Lista Falhas",
        "filename": "alm_list",
        "filenameType": "str",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": true,
        "x": 570,
        "y": 100,
        "wires": [
            [
                "6e2c32d255969a5f"
            ]
        ]
    },
    {
        "id": "6e2c32d255969a5f",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "e70072d6a56b0c0e",
        "name": "find line",
        "func": "let array_cod = msg.payload.split(',')\nlet cod = Number(array_cod[0])\n\nlet id = msg.auxfalha\n\n//node.warn(id);\n\nif (cod == id) {\n    let str_cod = array_cod[1]\n    let class_cod = array_cod[2]\n    let programada = Boolean(Number(array_cod[3]))\n    let plcenchedora = global.get(\"plcenchedora\");\n\n    //node.warn(plcenchedora);\n\n    plcenchedora.statechanged_id = class_cod\n    plcenchedora.statechanged_reason = str_cod\n    plcenchedora.programada = programada\n\n    //arrange object\n\n    // delete plcenchedora.ZZZZZZZZZZudtZIA8\n    // delete plcenchedora.ZZZZZZZZZZudtZIA11\n    // delete plcenchedora.ZZZZZZZZZZudtZIA14\n    // delete plcenchedora.ZZZZZZZZZZudtZIA20\n    global.set(\"plcenchedora\", plcenchedora);\n\n    msg.payload = plcenchedora\n\n    return msg\n\n}\n\n\n//return msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 100,
        "wires": [
            [
                "18e5145679420ebe"
            ]
        ]
    },
    {
        "id": "18e5145679420ebe",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "g": "e70072d6a56b0c0e",
        "name": "Mostrar linha",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 930,
        "y": 140,
        "wires": []
    },
    {
        "id": "d55c9bf6dcc68e63",
        "type": "eth-ip in",
        "z": "ce929e136e2f6ff5",
        "g": "e70072d6a56b0c0e",
        "endpoint": "c22e14e170657944",
        "mode": "single",
        "variable": "dados_ZIA",
        "program": "",
        "name": "",
        "gatherMetrics": true,
        "includeTimestamp": true,
        "x": 160,
        "y": 100,
        "wires": [
            [
                "535d1cd4e9714389"
            ]
        ]
    },
    {
        "id": "535d1cd4e9714389",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "e70072d6a56b0c0e",
        "name": "function 2",
        "func": "let ant_plc = global.get(\"plcenchedora\") || 0;\nlet atual_plc = msg.payload.value\n// delete atual_plc.ZZZZZZZZZZudtZIA8\n// delete atual_plc.ZZZZZZZZZZudtZIA11\n// delete atual_plc.ZZZZZZZZZZudtZIA14\n// delete atual_plc.ZZZZZZZZZZudtZIA20\n\nglobal.set(\"plcenchedora\", msg.payload.value);\n\n//verifica se houve mudanca no codigo de erro e estado do equipamento\nif (atual_plc.aux_id_falha != ant_plc.aux_id_falha) { \n    msg.auxfalha = atual_plc.aux_id_falha\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [
            [
                "eccf40c66bd716ee"
            ]
        ]
    },
    {
        "id": "334f41c689eb3660",
        "type": "inject",
        "z": "ce929e136e2f6ff5",
        "g": "ba291e20c238c272",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 300,
        "wires": [
            [
                "0a6631ed217c492b"
            ]
        ]
    },
    {
        "id": "0a6631ed217c492b",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "ba291e20c238c272",
        "name": "CONFIG",
        "func": "//configuracaao de linha\n\nlet config = {}\n\nconfig.machine_name = \"enchedora\"\n\nconfig.factory = 1\nconfig.machine_id = 1\nconfig.token_machine = \"Bearer \" + \"49c10ddc3fe0a764679dc0fd60b35a2aadba85e3\"\nconfig.token_line = \"Bearer \" + \"00bc757a398cc98d299fd6fc2119929c48647db9\"\nconfig.url = \"http://127.0.0.1:3003\"\nconfig.url_machine = config.url + \"/machine_events\"\nconfig.url_line = config.url + \"/production_line_events\"\nconfig.send = true /// habilita POST\n\nflow.set(\"config\", config);\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 300,
        "wires": [
            [
                "6e387f94df3ff1a6"
            ]
        ]
    },
    {
        "id": "6e387f94df3ff1a6",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "g": "ba291e20c238c272",
        "name": "debug 439",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 300,
        "wires": []
    },
    {
        "id": "ac38ab5fe96ef756",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "f93d0c790a22dc0e",
        "name": "Turnos, Tempos Acumulados",
        "func": "\nlet msg1 = new Object()\nlet msg2 = new Object()\nlet msg3 = new Object()\nlet config = flow.get(\"config\");\nlet a\n\n\nlet turno = global.get(\"turno_\" + config.factory)\nlet memo_turno = flow.get(\"memo_turno\")\n\n\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\n\nlet sm_atual = {\n    \"state\": dadosPlc.state,\n    \"mode\": dadosPlc.mode\n}\nflow.set(\"sm_atual\", sm_atual);\nlet sm_anterior = flow.get(\"sm_anterior\") || flow.set(\"sm_anterior\", sm_atual)\n\n\nlet tempoTranscorrido\nif (memo_turno == turno.turno) { //&& turno.turno != 0\n    a = 1\n\n    flow.set(\"tempoTranscorrido\", turno.tempoTranscorrido);\n    tempoTranscorrido = turno.tempoTranscorrido\n\n    calculosOEE()\n\n} else {\n    a = 2\n\n    tempoTranscorrido = flow.get(\"tempoTranscorrido\") || 0\n\n}\n\n\n\nlet parada = flow.get(\"parada\") || { \"hora\": 0, \"state\": \"0\", \"mode\": \"0\", \"active\": false, \"tParadaAtual\": 0 }\n\n\n\n// Atualiza o tempo da parada atual\nif ((sm_atual.state != 6 || sm_atual.mode != 2) && turno.turno != 0) {\n    let agora = new Date().getTime()\n    let tParadaAtual = agora - parada.hora\n    parada.tParadaAtual = tParadaAtual / 60 / 1000\n    flow.set(\"parada\", parada);\n    global.set(\"parada\" + name_var_global, parada);\n}\n\n\n\n\n\n// Aciona saida indicando que houve mudanca do modo de operacao\nif (sm_atual.mode != sm_anterior.mode || sm_atual.state != sm_anterior.state) {\n    //Verifica se a maquina saiu do estado Execute\n    //Sempre que a maquina sair de execute devemos anotar o horario da parada\n    if ((sm_anterior.state == 6 && sm_anterior.mode == 2) && (sm_atual.state != sm_anterior.state || sm_atual.mode != sm_anterior.mode)) {\n        console.log(\"NÃO PRODUZINDO\")\n        anotaInicioParada()\n        msg2 = null\n    } else if ((sm_anterior.state != 6 || sm_anterior.mode != 2) && (sm_atual.state == 6 && sm_atual.mode == 2)) {\n        console.log(\"PRODUZINDO\")\n        msg2.payload = consolidaParada()\n        calculosOEE()\n        flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n    }\n    flow.set(\"sm_anterior\", sm_atual)\n\n\n    return [null, msg2]\n}\n\n\n\n\n\n/// rotinas que devem ser executadas na troca de turno\nif (memo_turno != turno.turno) {\n    msg1 = null\n    msg2 = null\n\n    console.log(\"TrocaTurno\")\n    if (memo_turno != 0) {\n        console.log(\"Fim turno \" + memo_turno)\n        msg1 = { payload: 1 }\n\n        if (parada.active == true) { // se no fim do turno estiver em parada consolida\n            msg2 = {}\n            msg2.payload = {}\n            msg2.payload = consolidaParada()\n\n            calculosOEE()\n\n            flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n            if (turno.turno != 0) { // se entrar em um novo turno reinicia a parada\n                console.log(\"Inicio turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n                anotaInicioParada()\n\n            }\n        } else {\n            if (turno.turno != 0) {\n                console.log(\"Iniccio Turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n            }\n        }\n\n\n        calculosOEE()\n        let calculoOEE = flow.get(\"calculoOEE\");\n        flow.set(\"fimTurnoOEE\", calculoOEE);\n        flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n\n\n\n    } else if (memo_turno == 0) {\n        msg1 = null\n        console.log(\"verificaAnotacaoTurno\") // verifica e cria msg2 se necssario e zera anotacao de parada\n\n        verificaAnotacaoInicioTurno()\n\n    } else {\n\n        msg1 = null\n    }\n\n    //anota registro de turno\n\n\n\n    flow.set(\"memo_turno\", turno.turno)\n\n    return [msg1, msg2]\n}\nmsg3.payload = calculosOEE()\nmsg3.payload.machine_event.event_type_id = 6\nreturn [null, null, msg3]\n\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n\nfunction anotaInicioParada() {\n    console.log(\"inicio parada\")\n    node.warn(name_var_global);\n\n    let iParada = global.get(name_var_global);\n    let parada = {\n        \"hora\": new Date(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode\n    }\n    flow.set(\"parada\", {\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true,\n        \"statechanged_id\": iParada.statechanged_id,\n        \"statechanged_reason\": iParada.statechanged_reason,\n        \"programada\": new Boolean(iParada.programada),\n        \"justifica\": false\n\n    });\n    global.set(\"parada\" + name_var_global, {\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true,\n        \"statechanged_id\": iParada.statechanged_id,\n        \"statechanged_reason\": iParada.statechanged_reason,\n        \"programada\": new Boolean(iParada.programada),\n        \"justifica\": false\n\n    });\n    //console.clear()\n    //console.log(\"Inicio da Parada:\" + parada.hora.getHours() + \":\" + parada.hora.getMinutes())\n    return {\n        \"InicioParada\": parada.hora.getTime(),\n        \"FimParada\": 0,\n        \"tParada\": 0,\n        \"ID\": \"ID\",\n        \"Reason\": null,\n        \"ModeReason\": new Number(parada.mode),\n        \"StateReason\": new Number(parada.state),\n        \"Programada\": null,\n        \"Equip\": name_var_global\n    }\n}\n\nfunction consolidaParada() {\n\n    console.log(\"fim parada\")\n    let retorno = new Date()\n    let parada = flow.get(\"parada\") || 0\n    let tParada = (retorno.getTime() - parada.hora) / 1000 / 60\n    let paradasSoma = flow.get(\"paradasSoma\") || flow.set(\"paradasSoma\", { \"Prog\": 0, \"Nprog\": 0 })\n\n    if (dadosPlc.programada == \"true\") {\n        paradasSoma.Prog = paradasSoma.Prog + tParada\n    } else {\n        paradasSoma.Nprog = paradasSoma.Nprog + tParada\n    }\n    flow.set(\"paradasSoma\", paradasSoma);\n    parada.active = false\n    flow.set(\"parada\", parada);\n    global.set(\"parada\" + name_var_global, parada);\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    return {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 4,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": {\n                \"InicioParada\": parada.hora,\n                \"FimParada\": retorno.getTime(),\n                \"tParada\": Number(tParada.toFixed(2)),\n                \"ID\": Number(dadosPlc.statechanged_id),\n                \"Reason\": parada.statechanged_reason,\n                \"ModeReason\": new Number(parada.mode),\n                \"StateReason\": new Number(parada.state),\n                \"Programada\": new Boolean(dadosPlc.programada),\n                \"turno_atual\": turno.turno,\n                \"equip\": config.machine_name,\n                \"machine_id\": config.machine_id\n            }\n        }\n    }\n}\n\nfunction calculosOEE() {\n\n\n    //msg.filename = \".\\supZIA\\registroTurno_\" + name_var_global + \".json\"\n\n    let paradasSoma = flow.get(\"paradasSoma\") || { \"Prog\": 0, \"Nprog\": 0 }\n    let dados_oee = {}\n    let tNProg = Number(paradasSoma.Nprog)\n    let tProg = Number(paradasSoma.Prog)\n    let tProducao = Number(tempoTranscorrido - (tNProg + tProg))\n\n    if (dadosPlc.mode == 2 && dadosPlc.state == 6) {\n        dados_oee.statusMachine = \"Rodando\"\n    } else dados_oee.statusMachine = \"Parada\"\n\n    ////////////\n    dados_oee.statusConexao = true\n    dados_oee.mode = Number(dadosPlc.mode)\n    dados_oee.state = Number(dadosPlc.state)\n    dados_oee.rNominalSpeed = Number(dadosPlc.rNominalSpeed)\n    dados_oee.rSetSpeed = Number(dadosPlc.rSetSpeed)\n    dados_oee.rActualSpeed = Number(dadosPlc.rActualSpeed)\n    dados_oee.strRecipeName = String(dadosPlc.strRecipeName)\n    dados_oee.strBottle = String(dadosPlc.strBottle)\n    dados_oee.strCap = String(dadosPlc.strCap)\n    dados_oee.diProductionCounter = Number(dadosPlc.diProductionCounter)\n    dados_oee.diCounterReject_r1 = Number(dadosPlc.diCounterReject_r1)\n    dados_oee.diCounterReject_r2 = Number(dadosPlc.diCounterReject_r2)\n    dados_oee.iActualRecipe = Number(dadosPlc.iActualRecipe)\n    dados_oee.tempoTranscorrido = Number(tempoTranscorrido.toFixed(2))\n    dados_oee.percDisp = (tempoTranscorrido - (tProg + tNProg)) / (tempoTranscorrido - tProg) * 100\n    dados_oee.percDisp = Number(dados_oee.percDisp.toFixed(2))\n    dados_oee.percEfic = (dados_oee.diProductionCounter) / ((tProducao * dados_oee.rNominalSpeed) / 60) * 100\n    dados_oee.percEfic = Number(dados_oee.percEfic.toFixed(2))\n    dados_oee.percQual = (((dados_oee.diProductionCounter) - (dados_oee.diCounterReject_r1 + dados_oee.diCounterReject_r2)) / dados_oee.diProductionCounter) * 100\n    dados_oee.percQual = Number(dados_oee.percQual.toFixed(2))\n    dados_oee.percOEE = dados_oee.percDisp * dados_oee.percEfic * dados_oee.percQual / 10000\n    dados_oee.percOEE = Number(dados_oee.percOEE.toFixed(2))\n    dados_oee.turno = Number(turno.turno)\n    dados_oee.tempoParadaProgramada = Number(tProg.toFixed(2))\n    dados_oee.tempoParadaNaoProgramada = Number(tNProg.toFixed(2))\n    dados_oee.dimetaProduzidos = 100000\n    dados_oee.rmetaPerf = 95.00\n    dados_oee.rmetaDisp = 90.00\n    dados_oee.rmetaQual = 99.00\n    dados_oee.rmetaOEE = 90.00\n    dados_oee.equip = String(config.machine_name)\n\n    ////teste limites - ocorre quando o node é desligado\n    if (dados_oee.percDisp < 0) {\n        dados_oee.percDisp = 0\n    } else if (dados_oee.percDisp > 100) {\n        dados_oee.percDisp = 100\n    }\n\n    if (dados_oee.percEfic < 0) {\n        dados_oee.percEfic = 0\n    } else if (dados_oee.percEfic > 100) {\n        dados_oee.percEfic = 100\n    }\n\n    if (dados_oee.percQual < 0) {\n        dados_oee.percQual = 0\n    } else if (dados_oee.percQual > 100) {\n        dados_oee.percQual = 100\n    }\n\n    if (dados_oee.percOEE < 0) {\n        dados_oee.percOEE = 0\n    } else if (dados_oee.percOEE > 100) {\n        dados_oee.percOEE = 100\n    }\n\n\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    let calculo = {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 3,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": dados_oee\n        }\n    }\n\n    flow.set(\"calculoOEE\", calculo);\n\n    return calculo\n\n\n\n}\n\nfunction verificaAnotacao() {\n\n}\n\n\nfunction verificaAnotacaoInicioTurno() {\n    console.log(\"Inicio Turno \" + turno.turno)\n    ////Zera os valores para iniciar novo turno\n    flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n    if (sm_atual.state == 6 && sm_atual.mode == 2) {\n        //PRODUZINDO\n    } else {\n        //NAO PRODUZINDO\n        anotaInicioParada()\n        msg2 = null\n    }\n\n\n\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 720,
        "wires": [
            [
                "bf265bc99871facb"
            ],
            [
                "6a6bf494443bdff0",
                "6afefe578e3ccaa1"
            ],
            [
                "0d73da9c00922ad0",
                "fb2b60893845cad2"
            ]
        ]
    },
    {
        "id": "061ca2f07d78dc6a",
        "type": "inject",
        "z": "ce929e136e2f6ff5",
        "g": "f93d0c790a22dc0e",
        "name": "cycle",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 720,
        "wires": [
            [
                "ac38ab5fe96ef756",
                "98ed1a17c3dbc67e"
            ]
        ]
    },
    {
        "id": "bf265bc99871facb",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "fb2116c352c779f6",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 560,
        "wires": [
            [
                "4ee0d78b61d6aa6a",
                "270a5c1f9c676570"
            ]
        ]
    },
    {
        "id": "c6704a6e95f0f28e",
        "type": "comment",
        "z": "ce929e136e2f6ff5",
        "g": "fb2116c352c779f6",
        "name": "Registro Troca de Turno",
        "info": "",
        "x": 880,
        "y": 460,
        "wires": []
    },
    {
        "id": "b104760d2f6fc749",
        "type": "http request",
        "z": "ce929e136e2f6ff5",
        "g": "fb2116c352c779f6",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "",
                "valueType": "other",
                "valueValue": ""
            }
        ],
        "x": 1610,
        "y": 560,
        "wires": [
            [
                "4712cf5fce29b017"
            ]
        ]
    },
    {
        "id": "4712cf5fce29b017",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "g": "fb2116c352c779f6",
        "name": "debug 442",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 1790,
        "y": 560,
        "wires": []
    },
    {
        "id": "1652bfb0b174eecb",
        "type": "comment",
        "z": "ce929e136e2f6ff5",
        "g": "fb2116c352c779f6",
        "name": "Turno + Tempo Transcorrido",
        "info": "",
        "x": 900,
        "y": 620,
        "wires": []
    },
    {
        "id": "4ee0d78b61d6aa6a",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "fb2116c352c779f6",
        "name": "Get fimTurnoOEE",
        "func": "msg.payload = flow.get(\"fimTurnoOEE\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 560,
        "wires": [
            [
                "200fb71a7b263246",
                "cf2653469d5daa48"
            ]
        ]
    },
    {
        "id": "200fb71a7b263246",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "fb2116c352c779f6",
        "name": "statusMachineId",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.machine_event.payload.statusMachineId = 2\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.machine_event.payload.statusMachineId = 2\n            break;\n        case 5:\n            msg.payload.machine_event.payload.statusMachineId = 5\n            break;\n        case 6:\n            msg.payload.machine_event.payload.statusMachineId = 1\n            break;\n        case 9:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 560,
        "wires": [
            [
                "b104760d2f6fc749"
            ]
        ]
    },
    {
        "id": "0d73da9c00922ad0",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "3b4e357f27c2980a",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1100,
        "wires": [
            [
                "99347ed529053daa",
                "9e4615e27461d49c",
                "fe8041d2d42c9fed",
                "86413e78c81e37bb",
                "6b8649cd24078b48"
            ]
        ]
    },
    {
        "id": "90c61f829cfa54fa",
        "type": "http request",
        "z": "ce929e136e2f6ff5",
        "g": "3b4e357f27c2980a",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1590,
        "y": 1100,
        "wires": [
            [
                "d1036018d1cad445"
            ]
        ]
    },
    {
        "id": "d1036018d1cad445",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "g": "3b4e357f27c2980a",
        "name": "debug 443",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 1810,
        "y": 1100,
        "wires": []
    },
    {
        "id": "99347ed529053daa",
        "type": "delay",
        "z": "ce929e136e2f6ff5",
        "g": "3b4e357f27c2980a",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "120",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1100,
        "y": 1100,
        "wires": [
            [
                "def0a58acd0ffa8c"
            ]
        ]
    },
    {
        "id": "270a5c1f9c676570",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "2a5e1574f1de2dee",
        "name": "Config Line Troca de Turno",
        "func": "msg.payload = flow.get(\"fimTurnoOEE\");\n\nlet config = flow.get(\"config\");\nif (config.send == true) {\n\nlet productionsCounters = global.get(\"productionsCounters\");\n\n\nlet agora = new Date()\n\n\n    msg.payload.machine_event.payload.diCounter = productionsCounters\n\n\n    msg.payload = {\n        \"production_line_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 2,\n            \"payload\": msg.payload.machine_event.payload\n        }\n    }\n    /////********************************************* */\n    msg.url = config.url_line \n    msg.headers = {};\n    msg.headers['Authorization'] = config.token_line\n\n\n\n    return msg;\n}\n//return msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 360,
        "wires": [
            [
                "f0361fc4c4221498"
            ]
        ]
    },
    {
        "id": "f0361fc4c4221498",
        "type": "http request",
        "z": "ce929e136e2f6ff5",
        "g": "2a5e1574f1de2dee",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1510,
        "y": 360,
        "wires": [
            [
                "ca0f070278aeeb0a"
            ]
        ]
    },
    {
        "id": "ca0f070278aeeb0a",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "g": "2a5e1574f1de2dee",
        "name": "debug 444",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 1770,
        "y": 360,
        "wires": []
    },
    {
        "id": "cd65876f83318ed0",
        "type": "comment",
        "z": "ce929e136e2f6ff5",
        "g": "2a5e1574f1de2dee",
        "name": "Registro Fim de Turno Linha",
        "info": "",
        "x": 1140,
        "y": 300,
        "wires": []
    },
    {
        "id": "3bf6f41aa1cbed2c",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "3f2e936b2e73aad3",
        "name": "Config Line registro Linha",
        "func": "let config = flow.get(\"config\");\nif (config.send == true) {\n\n    let event_payload = msg.payload.machine_event.payload\n    const agora = new Date();\n    let year = agora.getFullYear();\n    //node.warn(agora);\n\n    let productionsCounters = global.get(\"productionsCounters\");\n\n    event_payload.producaoEntrada = productionsCounters[\"1\"]\n    event_payload.producaoSaida = productionsCounters[\"2\"]\n\n\n    msg.payload = {\n        \"production_line_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 1,\n            \"payload\": event_payload\n        }\n    }\n    msg.url = msg.config.url_line \n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_line\n    return msg;\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 1320,
        "wires": [
            [
                "e95755973a3861dc"
            ]
        ]
    },
    {
        "id": "c6ffa2d6c6a0d4eb",
        "type": "http request",
        "z": "ce929e136e2f6ff5",
        "g": "3f2e936b2e73aad3",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1910,
        "y": 1320,
        "wires": [
            [
                "b3d902cdb2ba088a"
            ]
        ]
    },
    {
        "id": "b3d902cdb2ba088a",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "g": "3f2e936b2e73aad3",
        "name": "debug 446",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2170,
        "y": 1320,
        "wires": []
    },
    {
        "id": "9e4615e27461d49c",
        "type": "delay",
        "z": "ce929e136e2f6ff5",
        "g": "3f2e936b2e73aad3",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "120",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1210,
        "y": 1300,
        "wires": [
            [
                "3bf6f41aa1cbed2c"
            ]
        ]
    },
    {
        "id": "141fd2d1f97cb10b",
        "type": "comment",
        "z": "ce929e136e2f6ff5",
        "g": "3f2e936b2e73aad3",
        "name": "Registro Linha",
        "info": "",
        "x": 1630,
        "y": 1280,
        "wires": []
    },
    {
        "id": "51c633dae1c50ca1",
        "type": "comment",
        "z": "ce929e136e2f6ff5",
        "g": "fb2116c352c779f6",
        "name": "Reset Counters",
        "info": "",
        "x": 1360,
        "y": 680,
        "wires": []
    },
    {
        "id": "fa9625595cba3231",
        "type": "eth-ip out",
        "z": "ce929e136e2f6ff5",
        "g": "fb2116c352c779f6",
        "endpoint": "c22e14e170657944",
        "variable": "cmdZIA",
        "program": "",
        "name": "",
        "x": 1620,
        "y": 640,
        "wires": []
    },
    {
        "id": "cf2653469d5daa48",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "fb2116c352c779f6",
        "name": "set reset Counters",
        "func": "msg.payload ={}\nmsg.payload.xResetCounter = 1\nmsg.payload.xResetReject_r1 = 1\nmsg.payload.xResetReject_r2 = 1\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 640,
        "wires": [
            [
                "fa9625595cba3231"
            ]
        ]
    },
    {
        "id": "5cc17c473eca9da1",
        "type": "inject",
        "z": "ce929e136e2f6ff5",
        "g": "fb2116c352c779f6",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1150,
        "y": 640,
        "wires": [
            [
                "cf2653469d5daa48"
            ]
        ]
    },
    {
        "id": "def0a58acd0ffa8c",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "3b4e357f27c2980a",
        "name": "statusMachineId",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.machine_event.payload.statusMachineId = 3\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        case 5:\n            msg.payload.machine_event.payload.statusMachineId = 5\n            break;\n        case 6:\n            msg.payload.machine_event.payload.statusMachineId = 1\n            break;\n        case 9:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1100,
        "wires": [
            [
                "90c61f829cfa54fa"
            ]
        ]
    },
    {
        "id": "e95755973a3861dc",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "3f2e936b2e73aad3",
        "name": "statusLineId",
        "func": "\n//////// status LINHA ///////////////\n\nlet config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.production_line_event.payload.statusLineId = 3\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.production_line_event.payload.statusLineId = 3\n            break;\n        case 5:\n            msg.payload.production_line_event.payload.statusLineId = 3\n            break;\n        case 6:\n            msg.payload.production_line_event.payload.statusLineId = 1\n            break;\n        case 9:\n            msg.payload.production_line_event.payload.statusLineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.production_line_event.payload.statusLineId });\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 1320,
        "wires": [
            [
                "c6ffa2d6c6a0d4eb",
                "17db19a815cf24be"
            ]
        ]
    },
    {
        "id": "fe8041d2d42c9fed",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "3f2e936b2e73aad3",
        "name": "function 257",
        "func": "let ant_mode = context.get(\"ant_mode\") || 0;\nlet ant_state = context.get(\"ant_state\") || 0;\nlet config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\n\nif (ant_mode != mode || ant_state != state) {\n    context.set(\"ant_mode\", mode);\n    context.set(\"ant_state\", state);\n    return msg\n}\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1360,
        "wires": [
            [
                "3bf6f41aa1cbed2c"
            ]
        ]
    },
    {
        "id": "86413e78c81e37bb",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "3b4e357f27c2980a",
        "name": "function 258",
        "func": "let ant_mode = context.get(\"ant_mode\") || 0;\nlet ant_state = context.get(\"ant_state\") || 0;\nlet config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\n\nif (ant_mode != mode || ant_state != state) {\n    context.set(\"ant_mode\", mode);\n    context.set(\"ant_state\", state);\n    return msg\n}\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1140,
        "wires": [
            [
                "def0a58acd0ffa8c"
            ]
        ]
    },
    {
        "id": "ada018c035eabe44",
        "type": "comment",
        "z": "ce929e136e2f6ff5",
        "g": "21fb91effa2e6b68",
        "name": "Registro Fim da Parada",
        "info": "",
        "x": 960,
        "y": 980,
        "wires": []
    },
    {
        "id": "bb65914917f00966",
        "type": "http request",
        "z": "ce929e136e2f6ff5",
        "g": "21fb91effa2e6b68",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1630,
        "y": 820,
        "wires": [
            [
                "405ad91eff12fc9b"
            ]
        ]
    },
    {
        "id": "405ad91eff12fc9b",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "g": "21fb91effa2e6b68",
        "name": "debug 277",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 1950,
        "y": 800,
        "wires": []
    },
    {
        "id": "6a6bf494443bdff0",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "21fb91effa2e6b68",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n\n    //msg.payload.machine_event.payload.ID = 999;\n\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 840,
        "wires": [
            [
                "6e4151324231cead",
                "7989cd83b04769c2"
            ]
        ]
    },
    {
        "id": "6e4151324231cead",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "21fb91effa2e6b68",
        "name": "function 257",
        "func": "\nif (msg.payload != null) {\n\n    if (msg.payload.machine_event.payload.ID == 9999) {\n        return [null, msg]\n    } else return [msg, null];\n\n\n\n\n} else {\n\n    node.warn(\"Mudanca de estado sem registro\");\n\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 840,
        "wires": [
            [
                "bb65914917f00966"
            ],
            [
                "d1492894a70b8bb0"
            ]
        ]
    },
    {
        "id": "368dc217fde1e6d8",
        "type": "postgresql",
        "z": "ce929e136e2f6ff5",
        "g": "21fb91effa2e6b68",
        "name": "",
        "query": "INSERT INTO public.appoint\n(payload)\nVALUES('{{{msg.payload}}}');",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1690,
        "y": 900,
        "wires": [
            [
                "bcbb66e600d3d2f8"
            ]
        ]
    },
    {
        "id": "bcbb66e600d3d2f8",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "g": "21fb91effa2e6b68",
        "name": "debug 494",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1910,
        "y": 900,
        "wires": []
    },
    {
        "id": "d1492894a70b8bb0",
        "type": "json",
        "z": "ce929e136e2f6ff5",
        "g": "21fb91effa2e6b68",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1510,
        "y": 900,
        "wires": [
            [
                "368dc217fde1e6d8"
            ]
        ]
    },
    {
        "id": "6afefe578e3ccaa1",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "g": "21fb91effa2e6b68",
        "name": "debug 501",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 900,
        "wires": []
    },
    {
        "id": "f7317e38a104b64b",
        "type": "link in",
        "z": "ce929e136e2f6ff5",
        "g": "21fb91effa2e6b68",
        "name": "apontamento maquina 1",
        "links": [],
        "x": 835,
        "y": 940,
        "wires": [
            [
                "6a6bf494443bdff0",
                "1407a90c7325bb5f"
            ]
        ]
    },
    {
        "id": "1407a90c7325bb5f",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "g": "21fb91effa2e6b68",
        "name": "debug 508",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 940,
        "wires": []
    },
    {
        "id": "fb2b60893845cad2",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "459ca32beb43d15c",
        "name": "function 262",
        "func": "let config = flow.get(\"config\");\n//msg.config = config\n\n\n\nlet sm_atual = flow.get(\"sm_atual\");\nlet sm_anterior = flow.get(\"sm_anterior_iot\") || { mode: \"0\", state: \"0\" };\n\nif ((sm_atual.mode != sm_anterior.mode) || (sm_atual.state != sm_anterior.state)) {\n\n    //node.warn(\"mudou\");\n    flow.set(\"sm_anterior_iot\", sm_atual);\n\n    msg.machine_id = config.machine_id\n\n    return msg;\n\n\n\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1600,
        "wires": [
            [
                "963baede95ce8bea"
            ]
        ]
    },
    {
        "id": "753158a2e663a0fd",
        "type": "postgresql",
        "z": "ce929e136e2f6ff5",
        "g": "459ca32beb43d15c",
        "name": "",
        "query": "INSERT INTO public.machine_events\n(id_machine, payload)\nVALUES({{{msg.machine_id}}}, '{{{msg.payload}}}');",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 970,
        "y": 1600,
        "wires": [
            [
                "734251fd41dc7978"
            ]
        ]
    },
    {
        "id": "963baede95ce8bea",
        "type": "json",
        "z": "ce929e136e2f6ff5",
        "g": "459ca32beb43d15c",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 810,
        "y": 1600,
        "wires": [
            [
                "753158a2e663a0fd"
            ]
        ]
    },
    {
        "id": "766d1b6b1a134c73",
        "type": "postgresql",
        "z": "ce929e136e2f6ff5",
        "g": "459ca32beb43d15c",
        "name": "",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n),\nfiltered_intervals AS (\n    SELECT \n        id_machine,\n        mode,\n        state,\n        \n        -- Calcula o início e o fim ajustados do evento, limitados pelo intervalo de filtro\n        GREATEST(timestamp, '{{{msg.payload.start_time}}}'::timestamp) AS adjusted_start,\n        LEAST(next_timestamp, '{{{msg.payload.end_time}}}'::timestamp) AS adjusted_end\n        \n    FROM \n        state_intervals\n    WHERE \n        next_timestamp > '{{{msg.payload.start_time}}}'::timestamp  -- start_filter\n        AND timestamp < '{{{msg.payload.end_time}}}'::timestamp     -- end_filter\n        AND id_machine = 1  -- substitua 1 pelo id_machine desejado\n)\nSELECT \n    id_machine,\n    mode,\n    state,\n    \n    -- Calcula o tempo ativo total ajustado dentro do intervalo\n    SUM(\n        CASE \n            WHEN adjusted_end > adjusted_start THEN \n                EXTRACT(EPOCH FROM (adjusted_end - adjusted_start)) / 60  -- Tempo em minutos\n            ELSE \n                0\n        END\n    ) AS total_active_duration\nFROM \n    filtered_intervals\nGROUP BY \n    id_machine,\n    mode,\n    state\nORDER BY \n    id_machine,\n    mode,\n    state;\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1490,
        "y": 1600,
        "wires": [
            [
                "9a4bf7a228778cb9",
                "e751ba8f8a53c996"
            ]
        ]
    },
    {
        "id": "e8cf77d8a6dc4c08",
        "type": "postgresql",
        "z": "ce929e136e2f6ff5",
        "g": "459ca32beb43d15c",
        "name": "",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n)\nSELECT \n    id,\n    timestamp,\n    id_machine,\n    payload,\n    mode,\n    state,\n    next_timestamp,\n    -- Calcula o tempo que o estado ficou ativo\n    CASE \n        WHEN next_timestamp IS NOT NULL THEN \n            AGE(next_timestamp, timestamp)\n        ELSE \n            NULL\n    END AS active_duration\nFROM \n    state_intervals\nORDER BY \n    timestamp;",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2210,
        "y": 1900,
        "wires": [
            [
                "d075eeed73cb2341"
            ]
        ]
    },
    {
        "id": "42e4e64a3a80f33b",
        "type": "inject",
        "z": "ce929e136e2f6ff5",
        "g": "459ca32beb43d15c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1020,
        "y": 1680,
        "wires": [
            [
                "734251fd41dc7978"
            ]
        ]
    },
    {
        "id": "734251fd41dc7978",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "459ca32beb43d15c",
        "name": "consulta turno e ajsute de filtro",
        "func": "// Recupera a lista de horários de turnos a partir de uma variável global e o índice do turno desejado da variável de fluxo.\nlet horarios_turnos = global.get(\"turnos_times\");\nlet turno = flow.get(\"memo_turno\");\n\n// Faz uma cópia da lista de horários para evitar modificar o valor original na variável global.\nlet turnos_times = JSON.parse(JSON.stringify(horarios_turnos));\n\n// Obtém a data e hora atuais.\nconst today = new Date();\n// Define o início do dia (00:00:00) para a data atual. Essa data será usada para calcular o tempo em segundos desde a meia-noite.\nconst startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n// Converte o início do dia em formato epoch (segundos desde 1 de janeiro de 1970).\nconst epochTime = Math.floor(startOfDay.getTime() / 1000);\n\n// Define o ajuste de fuso horário em segundos. Neste caso, são 10800 segundos (ou 3 horas).\nconst timezoneOffset = 10800; // 3 horas em segundos\n\n// Define a quantidade de segundos em um dia, para lidar com turnos que ultrapassam a meia-noite.\nconst secondsInDay = 86400; // 24 horas em segundos\n\n// Itera sobre cada turno para calcular e ajustar os horários de início e fim.\nfor (let index = 0; index < turnos_times.length; index++) {\n    // Remove propriedades desnecessárias de cada turno para simplificar os dados.\n    delete turnos_times[index].created_at;\n    delete turnos_times[index].updated_at;\n    delete turnos_times[index].id;\n\n    // Extrai a parte do horário de início do turno (no formato 'HH:MM:SS') para conversão em segundos.\n    const [hours_s, minutes_s, seconds_s] = turnos_times[index].start_time.substring(11, 19).split(':').map(Number);\n    // Converte o horário de início em segundos: (horas * 3600) + (minutos * 60) + segundos.\n    const totalSecondsStart = hours_s * 3600 + minutes_s * 60 + seconds_s;\n\n    // Extrai a parte do horário de fim do turno (também no formato 'HH:MM:SS') para conversão em segundos.\n    const [hours_e, minutes_e, seconds_e] = turnos_times[index].end_time.substring(11, 19).split(':').map(Number);\n    // Converte o horário de fim em segundos: (horas * 3600) + (minutos * 60) + segundos.\n    const totalSecondsEnd = hours_e * 3600 + minutes_e * 60 + seconds_e;\n\n    // Calcula o horário de início absoluto do turno, somando o epoch do dia, o horário de início em segundos e o ajuste de fuso horário.\n    let start_time = new Date((epochTime + totalSecondsStart + timezoneOffset) * 1000);\n    // Calcula o horário de fim absoluto do turno da mesma forma.\n    let end_time = new Date((epochTime + totalSecondsEnd + timezoneOffset) * 1000);\n\n    // Verifica se o horário de início é maior que o horário de fim, indicando que o turno ultrapassa a meia-noite.\n    if (start_time > end_time) {\n        // Ajusta o horário de fim, somando um dia (em segundos) para representar corretamente um turno que termina no dia seguinte.\n        end_time = new Date((epochTime + totalSecondsEnd + timezoneOffset + secondsInDay) * 1000);\n    }\n\n    // Converte os horários de início e fim ajustados para o formato ISO e atualiza no objeto do turno.\n    turnos_times[index].start_time = start_time.toISOString();\n    turnos_times[index].end_time = end_time.toISOString();\n}\n\n// Define a saída da mensagem como o turno específico desejado (indexado com base no número do turno menos 1).\nmsg.payload = turnos_times[turno - 1];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1600,
        "wires": [
            [
                "766d1b6b1a134c73",
                "663624e8ca0a1e78",
                "a8b041b0adf7adde",
                "c905665172f33734"
            ]
        ]
    },
    {
        "id": "9a4bf7a228778cb9",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "459ca32beb43d15c",
        "name": "monta resumo de tempos",
        "func": "const data = msg.payload;\n\n// Converte para o formato desejado, agrupando por `mode` e `state`\nconst result = data.reduce((acc, { mode, state, total_active_duration }) => {\n  if (!acc[mode]) acc[mode] = {}; // Cria o modo se ainda não existir\n  acc[mode][state] = Number(parseFloat(total_active_duration)); // Adiciona o tempo do estado ao modo\n  return acc;\n}, {});\n\n// Inicializa `msg.payload` com o objeto `omac`\nmsg.payload = { omac: result };\n\nlet totalProductive = 0;\nlet totalNonProductive = 0;\n\n// Calcula os totais produtivos e não produtivos\nObject.entries(result).forEach(([mode, states]) => {\n  Object.entries(states).forEach(([state, activeMinutes]) => {\n    const minutes = Number(parseFloat(activeMinutes));\n    \n    if (state === \"6\") {\n      totalProductive += minutes;\n    } else {\n      totalNonProductive += minutes;\n    }\n  });\n});\n\n\nlet lastState = flow.get(\"lastState\");\n\nif (lastState && lastState[0] && lastState[0].payload) {\n  const mode = lastState[0].payload.machine_event.payload.mode;\n  const state = lastState[0].payload.machine_event.payload.state;\n\n  // Verifica se mode e state existem em msg.payload.omac antes de somar\n  if (msg.payload.omac[mode] && msg.payload.omac[mode][state] !== undefined) {\n    msg.payload.omac[mode][state] =\n      Number(parseFloat(msg.payload.omac[mode][state])) + Number(parseFloat(lastState[1]));\n  }\n}\n\n// Armazena `msg.payload` no fluxo para acesso posterior\nflow.set(\"temposOEE_parcial\", msg.payload);\n\n\n\n// Adiciona os somatórios ao `msg.payload`\nmsg.payload.somas = {\n  totalProductive: totalProductive,\n  totalNonProductive: totalNonProductive\n};\n\n\n\n// Retorna `msg` atualizado\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1600,
        "wires": [
            [
                "63c0c4a38217c95b"
            ]
        ]
    },
    {
        "id": "663624e8ca0a1e78",
        "type": "postgresql",
        "z": "ce929e136e2f6ff5",
        "g": "459ca32beb43d15c",
        "name": "",
        "query": "SELECT *\nFROM machine_events\nORDER BY timestamp DESC\nlimit 1\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1490,
        "y": 1680,
        "wires": [
            [
                "fd7fc09cdabffddb"
            ]
        ]
    },
    {
        "id": "066b296d73187079",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "g": "459ca32beb43d15c",
        "name": "debug 515",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2130,
        "y": 1680,
        "wires": []
    },
    {
        "id": "fd7fc09cdabffddb",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "459ca32beb43d15c",
        "name": "consulta ultimo registro",
        "func": "msg.payload[0].payload = JSON.parse(msg.payload[0].payload)\nflow.set(\"lastState\", msg.payload);\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 1680,
        "wires": [
            [
                "066b296d73187079"
            ]
        ]
    },
    {
        "id": "60e6dc96f61bbded",
        "type": "inject",
        "z": "ce929e136e2f6ff5",
        "g": "459ca32beb43d15c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1800,
        "y": 1900,
        "wires": [
            [
                "a8cc0ec420cbc79f"
            ]
        ]
    },
    {
        "id": "d075eeed73cb2341",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "g": "459ca32beb43d15c",
        "name": "debug 516",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2430,
        "y": 1900,
        "wires": []
    },
    {
        "id": "a8cc0ec420cbc79f",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "459ca32beb43d15c",
        "name": "function 267",
        "func": "let horarios_turnos = global.get(\"turnos_times\");\nlet turno = flow.get(\"memo_turno\");\n\nlet turnos_times = JSON.stringify(horarios_turnos)\nturnos_times = JSON.parse(turnos_times);\n//node.warn(turnos_times);\n\nconst today = new Date();\nconst startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\nconst epochTime = Math.floor(startOfDay.getTime() / 1000); // Converte de milissegundos para segundos\n//node.warn(epochTime); // Exibe a data de hoje às 00:00 em epoch (segundos)\n\nfor (let index = 0; index < turnos_times.length; index++) {\n    delete turnos_times[index].created_at\n    delete turnos_times[index].updated_at\n    delete turnos_times[index].id\n\n    const timePart_start = turnos_times[index].start_time.substring(11, 19); // '06:00:00'\n    // Divide a hora, minuto e segundo\n    const [hours_s, minutes_s, seconds_s] = timePart_start.split(':').map(Number);\n    // Converte para segundos\n    const totalMinutes_start = ((hours_s * 3600) + (minutes_s * 60) + (seconds_s));\n\n\n    const timePart_end = turnos_times[index].end_time.substring(11, 19); // '06:00:00'\n    // Divide a hora, minuto e segundo\n    const [hours_e, minutes_e, seconds_e] = timePart_end.split(':').map(Number);\n    // Converte para segundos\n    const totalMinutes_end = ((hours_e * 3600) + (minutes_e * 60) + (seconds_e));\n\n    //node.warn(totalMinutes_start);\n    //node.warn(totalMinutes_end);\n\n    const start_time = new Date((epochTime + totalMinutes_start)*1000)\n    const end_time = new Date((epochTime + totalMinutes_end)*1000)\n\n  \n\n    turnos_times[index].start_time = start_time.toISOString()\n    turnos_times[index].end_time = end_time.toISOString()\n\n\n\n  \n\n}\n\nmsg.payload = turnos_times[turno-1]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 1900,
        "wires": [
            [
                "e8cf77d8a6dc4c08"
            ]
        ]
    },
    {
        "id": "c905665172f33734",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "g": "459ca32beb43d15c",
        "name": "debug 518",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 1900,
        "wires": []
    },
    {
        "id": "a8b041b0adf7adde",
        "type": "postgresql",
        "z": "ce929e136e2f6ff5",
        "d": true,
        "g": "459ca32beb43d15c",
        "name": "Lista FIltrada Tempo e Maquina",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n)\nSELECT \n    id,\n    timestamp AS start_time,       -- Hora inicial do estado\n    next_timestamp AS end_time,    -- Hora final do estado\n    id_machine,\n    payload,\n    mode,\n    state,\n    -- Calcula o tempo que o estado ficou ativo em minutos\n    CASE \n        WHEN next_timestamp IS NOT NULL THEN \n            EXTRACT(EPOCH FROM (next_timestamp - timestamp)) / 60  -- Tempo em minutos\n        ELSE \n            NULL\n    END AS active_duration\nFROM \n    state_intervals\nWHERE \n    -- Filtros aplicados na tabela de saída\n    next_timestamp > '{{{msg.payload.start_time}}}'::timestamp  -- start_filter\n    AND timestamp < '{{{msg.payload.end_time}}}'::timestamp   -- end_filter\n    AND id_machine = 1  -- substitua 123 pelo id_machine desejado\nORDER BY \n    timestamp;\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1550,
        "y": 1760,
        "wires": [
            [
                "284080670eb707c0"
            ]
        ]
    },
    {
        "id": "284080670eb707c0",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "g": "459ca32beb43d15c",
        "name": "debug 519",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2130,
        "y": 1760,
        "wires": []
    },
    {
        "id": "e751ba8f8a53c996",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "g": "459ca32beb43d15c",
        "name": "debug 520",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 1540,
        "wires": []
    },
    {
        "id": "63c0c4a38217c95b",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "g": "459ca32beb43d15c",
        "name": "debug 524",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2130,
        "y": 1620,
        "wires": []
    },
    {
        "id": "7a9758fef8f93c6c",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "f93d0c790a22dc0e",
        "name": "temposOEE",
        "func": "let temposOEE_partial = flow.get(\"temposOEE_parcial\");\n\ntemposOEE_partial = JSON.parse(JSON.stringify(temposOEE_partial))\n\n\n\nif (msg.payload.actualMode == 2 && msg.payload.actualState == 6) {\n    temposOEE_partial.somas.totalProductive = temposOEE_partial.somas.totalProductive + (msg.payload.actualDuration)\n} else {\n    temposOEE_partial.somas.totalNonProductive = temposOEE_partial.somas.totalNonProductive + (msg.payload.actualDuration)\n}\n\n\nflow.set(\"temposOEE\", temposOEE_partial);\n\nmsg.payload = temposOEE_partial\n\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 820,
        "wires": [
            [
                "98773b9f69f40686"
            ]
        ]
    },
    {
        "id": "98773b9f69f40686",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "g": "f93d0c790a22dc0e",
        "name": "debug 517",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.somas",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 900,
        "wires": []
    },
    {
        "id": "98ed1a17c3dbc67e",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "g": "f93d0c790a22dc0e",
        "name": "Calc Actual Duration",
        "func": "const lastState = flow.get(\"lastState\");\n\nconst lastTime = new Date(lastState[0].timestamp);\nconst currentTime = new Date();\n\nnode.status({ fill: \"red\", shape: \"ring\", text: lastState[1] });\n\n// Converte para segundos\nconst lastTimeInSeconds = Math.floor(lastTime.getTime() / 1000);\nconst currentTimeInSeconds = Math.floor(currentTime.getTime() / 1000);\n\nconst timeDifference = (currentTimeInSeconds - lastTimeInSeconds) / 60;\n\nmsg.payload ={}\n\nmsg.payload.actualDuration = lastState[1] = timeDifference\nmsg.payload.actualState = lastState[0].payload.machine_event.payload.state\nmsg.payload.actualMode = lastState[0].payload.machine_event.payload.mode\n\n\nflow.set(\"lastState\", lastState);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 820,
        "wires": [
            [
                "7a9758fef8f93c6c"
            ]
        ]
    },
    {
        "id": "4681c87c5786d137",
        "type": "inject",
        "z": "ce929e136e2f6ff5",
        "g": "f93d0c790a22dc0e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 480,
        "wires": [
            [
                "01f326ee4cef1e23"
            ]
        ]
    },
    {
        "id": "01f326ee4cef1e23",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "g": "f93d0c790a22dc0e",
        "name": "debug 525",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 460,
        "wires": []
    },
    {
        "id": "7989cd83b04769c2",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "g": "f93d0c790a22dc0e",
        "name": "debug 526",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 740,
        "wires": []
    },
    {
        "id": "17db19a815cf24be",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "name": "debug 527",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 1440,
        "wires": []
    },
    {
        "id": "6b8649cd24078b48",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "name": "debug 529",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2370,
        "y": 980,
        "wires": []
    },
    {
        "id": "e1273c234f43b501",
        "type": "function",
        "z": "ce929e136e2f6ff5",
        "name": "function 268",
        "func": "let agora = new Date()\nagora.getHours().toString()\n\nmsg.payload = agora.getHours().toString()\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 2320,
        "wires": [
            [
                "5b8efb06e56868d3"
            ]
        ]
    },
    {
        "id": "7c69cc424fd6100d",
        "type": "inject",
        "z": "ce929e136e2f6ff5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 400,
        "y": 2340,
        "wires": [
            [
                "e1273c234f43b501"
            ]
        ]
    },
    {
        "id": "5b8efb06e56868d3",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "name": "debug 530",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 2240,
        "wires": []
    },
    {
        "id": "9a10d75b0727746e",
        "type": "debug",
        "z": "ce929e136e2f6ff5",
        "name": "debug 531",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 820,
        "wires": []
    },
    {
        "id": "ec08ab8acee509be",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "59f623d71e654ca6",
        "name": "",
        "props": [
            {
                "p": "payload.path",
                "v": "./apontamentos",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2350,
        "y": 560,
        "wires": [
            [
                "812656207b60b475"
            ]
        ]
    },
    {
        "id": "851749049c6dcfbd",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "59f623d71e654ca6",
        "name": "debug 261",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3660,
        "y": 560,
        "wires": []
    },
    {
        "id": "812656207b60b475",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "59f623d71e654ca6",
        "name": "Read File First Line",
        "func": "let path = msg.payload.path;  // Atribui o caminho do arquivo à variável 'path' a partir da propriedade 'path' do objeto 'payload' no objeto 'msg'\nprocessLineByLine();  // Chama a função 'processLineByLine'\n\nasync function processLineByLine() {\n    // Cria uma interface de leitura de linha a linha para o arquivo no caminho especificado\n    // @ts-ignore\n    const rl = readline.createInterface({\n        input: fs.createReadStream(path),\n        crlfDelay: Infinity\n    });\n    // Loop através de cada linha do arquivo\n    for await (const line of rl) {\n        msg.payload = line;  // Define a propriedade 'payload' do objeto 'msg' como a linha atual\n        node.send(msg);  // Envia o objeto 'msg' com a linha atual para a próxima etapa do fluxo\n        node.done();  // Indica que o nó terminou de processar a entrada atual\n        break;  // Para o loop depois de processar a primeira linha\n    }\n    // Fecha a interface de leitura de linha a linha e o stream de arquivo\n    rl.close();\n    fs.createReadStream(path).close();\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "lineReader",
                "module": "line-reader"
            },
            {
                "var": "readline",
                "module": "readline"
            }
        ],
        "x": 2650,
        "y": 560,
        "wires": [
            [
                "851749049c6dcfbd"
            ]
        ]
    },
    {
        "id": "6520b762c94df55f",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "59f623d71e654ca6",
        "name": "Delete First Line",
        "func": "let path = msg.payload.path;  // Atribui o caminho do arquivo à variável 'path' a partir da propriedade 'path' do objeto 'payload' no objeto 'msg'\n\n// Lê o conteúdo do arquivo\nlet data = fs.readFileSync(path, 'utf-8');\n\n// Remove a primeira linha do conteúdo\ndata = data.split('\\n').slice(1).join('\\n');\n\n// Escreve o conteúdo atualizado de volta para o arquivo\nfs.writeFileSync(path, data);\n\nmsg.payload = {};  // Cria um objeto vazio para a propriedade 'payload' do objeto 'msg'\nmsg.payload.DeleteDone = 1;  // Define a propriedade 'DeleteDone' do objeto 'payload' no objeto 'msg' como 1 para indicar que a primeira linha foi removida com sucesso\n\nreturn msg;  // Retorna o objeto 'msg' atualizado com a propriedade 'payload' contendo 'DeleteDone' definido como 1\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 2640,
        "y": 640,
        "wires": [
            [
                "5193cfdc0c4e9adc"
            ]
        ]
    },
    {
        "id": "d940bbe660aaf166",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "59f623d71e654ca6",
        "name": "Count Lines",
        "func": "let path = msg.payload.path  // atribui o caminho do arquivo à variável 'path'\nmsg.payload = {}  // cria um objeto vazio para a propriedade 'payload' do objeto 'msg'\ncountLines();  // chama a função 'countLines' para contar o número de linhas no arquivo\n\n// função para contar o número de linhas no arquivo\nasync function countLines() {\n    const fileStream = fs.createReadStream(path);  // cria um fluxo de leitura do arquivo\n    // @ts-ignore\n    const rl = readline.createInterface({  // cria uma interface de leitura de linha para ler o arquivo\n        input: fileStream,  // define o fluxo de leitura do arquivo como entrada\n        crlfDelay: Infinity  // define o atraso de CR/LF como infinito para que cada linha seja lida completamente\n    });\n\n    let count = 0;  // inicializa a variável 'count' com o valor 0\n\n    // lê o arquivo linha por linha\n    for await (const line of rl) {\n        count++;  // incrementa a variável 'count' em 1 para cada linha lida\n    }\n    console.log(`O arquivo tem ${count} linhas.`);  // imprime no console o número de linhas do arquivo\n    msg.payload.numLines = 0  // atribui 0 à propriedade 'numLines' do objeto 'payload' no objeto 'msg'\n    msg.payload.numLines = count  // atribui o número de linhas contadas à propriedade 'numLines' do objeto 'payload' no objeto 'msg'\n    node.send(msg)  // envia o objeto 'msg' atualizado para o próximo nó no fluxo\n    node.done  // sinaliza que o nó concluiu sua execução\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "readline",
                "module": "readline"
            }
        ],
        "x": 2630,
        "y": 600,
        "wires": [
            [
                "8286d6bd0a9d47aa"
            ]
        ]
    },
    {
        "id": "8286d6bd0a9d47aa",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "59f623d71e654ca6",
        "name": "debug 262",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3660,
        "y": 600,
        "wires": []
    },
    {
        "id": "5193cfdc0c4e9adc",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "59f623d71e654ca6",
        "name": "debug 263",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3660,
        "y": 640,
        "wires": []
    },
    {
        "id": "84a3a38089eb5b55",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "59f623d71e654ca6",
        "name": "",
        "props": [
            {
                "p": "payload.path",
                "v": "./apontamentos",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2350,
        "y": 640,
        "wires": [
            [
                "6520b762c94df55f"
            ]
        ]
    },
    {
        "id": "669b9113f1179e08",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "59f623d71e654ca6",
        "name": "",
        "props": [
            {
                "p": "payload.path",
                "v": "./apontamentos",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2350,
        "y": 600,
        "wires": [
            [
                "d940bbe660aaf166"
            ]
        ]
    },
    {
        "id": "e7440e2e78ec8b63",
        "type": "comment",
        "z": "68c6c71bd0ac9406",
        "g": "59f623d71e654ca6",
        "name": "Rotinas de Arquivo",
        "info": "Le primeira linha do arquivo\nConta numero de linhas\nDeleta primeira linha",
        "x": 2790,
        "y": 680,
        "wires": []
    },
    {
        "id": "fefd1cf3c40b27be",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "4145bc8a22617df3",
        "name": "Add Property",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\n\n\n\nlet dados_plc = global.get(name_var_global) || {};\n//msg.payload = {}\nlet k=Object.keys(msg.machine)\nlet v =Object.values(msg.machine)\n\ndados_plc[String(k)]=v.toString()\n\nglobal.set(name_var_global, dados_plc);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3950,
        "y": 2800,
        "wires": [
            [
                "a44cd01551e111a2"
            ]
        ]
    },
    {
        "id": "70f7e312be09e180",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "4145bc8a22617df3",
        "name": "debug 264",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 4580,
        "y": 2740,
        "wires": []
    },
    {
        "id": "a44cd01551e111a2",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "4145bc8a22617df3",
        "name": "Atualiza contexto global",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\n\n\nmsg.payload = global.get(name_var_global);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4210,
        "y": 2800,
        "wires": [
            [
                "08cc81fd7ebb8937"
            ]
        ]
    },
    {
        "id": "0b9c26147475e9a0",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "4145bc8a22617df3",
        "name": "statechanged_id",
        "func": "msg.machine = {}\nmsg.machine.statechanged_id = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 2640,
        "wires": [
            [
                "fefd1cf3c40b27be"
            ]
        ]
    },
    {
        "id": "9d77b6a99f2d17f3",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "4145bc8a22617df3",
        "name": "statechanged_reason",
        "func": "msg.machine = {}\nmsg.machine.statechanged_reason = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2740,
        "y": 2700,
        "wires": [
            [
                "fefd1cf3c40b27be"
            ]
        ]
    },
    {
        "id": "e6f87ab81ec6df34",
        "type": "comment",
        "z": "68c6c71bd0ac9406",
        "g": "4145bc8a22617df3",
        "name": "Dados para simulação",
        "info": "# Simulação\n## Simulação dos valores que sao adquiridos do PLC",
        "x": 2720,
        "y": 1620,
        "wires": []
    },
    {
        "id": "08cc81fd7ebb8937",
        "type": "delay",
        "z": "68c6c71bd0ac9406",
        "g": "4145bc8a22617df3",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 4430,
        "y": 2800,
        "wires": [
            [
                "70f7e312be09e180",
                "e2e2f8d8cb126123"
            ]
        ]
    },
    {
        "id": "e079dd8896b98e95",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "1903416abfc902c3",
        "name": "2 - Stopped",
        "props": [
            {
                "p": "machine.state",
                "v": "2",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3090,
        "y": 1840,
        "wires": [
            [
                "256bc123441d3d4b"
            ]
        ]
    },
    {
        "id": "256bc123441d3d4b",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "1903416abfc902c3",
        "name": "Send State",
        "func": "\nnode.status({ \"fill\": \"blue\", \"text\": msg.machine.state });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 2140,
        "wires": [
            [
                "fefd1cf3c40b27be"
            ]
        ]
    },
    {
        "id": "28ca4d5b88c45d0f",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "1903416abfc902c3",
        "name": "5 - Suspend",
        "props": [
            {
                "p": "machine.state",
                "v": "5",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3090,
        "y": 1960,
        "wires": [
            [
                "256bc123441d3d4b"
            ]
        ]
    },
    {
        "id": "b385cd555fefb797",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "1903416abfc902c3",
        "name": "6 - Execute",
        "props": [
            {
                "p": "machine.state",
                "v": "6",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3090,
        "y": 2000,
        "wires": [
            [
                "256bc123441d3d4b"
            ]
        ]
    },
    {
        "id": "d51d06222836f8a4",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "1903416abfc902c3",
        "name": "11 - Held",
        "props": [
            {
                "p": "machine.state",
                "v": "11",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3080,
        "y": 2200,
        "wires": [
            [
                "256bc123441d3d4b"
            ]
        ]
    },
    {
        "id": "7c548feb40b876e7",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "1903416abfc902c3",
        "name": "9 - Aborted",
        "props": [
            {
                "p": "machine.state",
                "v": "9",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3080,
        "y": 2120,
        "wires": [
            [
                "256bc123441d3d4b"
            ]
        ]
    },
    {
        "id": "3761cb1b3725dfed",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "1903416abfc902c3",
        "name": "1 - Clearing",
        "props": [
            {
                "p": "machine.state",
                "v": "1",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3090,
        "y": 1800,
        "wires": [
            [
                "256bc123441d3d4b"
            ]
        ]
    },
    {
        "id": "57f581be1fb49398",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "1903416abfc902c3",
        "name": "3 - Starting",
        "props": [
            {
                "p": "machine.state",
                "v": "3",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3080,
        "y": 1880,
        "wires": [
            [
                "256bc123441d3d4b"
            ]
        ]
    },
    {
        "id": "14a27e42c41528cf",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "1903416abfc902c3",
        "name": "4 - Idle",
        "props": [
            {
                "p": "machine.state",
                "v": "4",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3070,
        "y": 1920,
        "wires": [
            [
                "256bc123441d3d4b"
            ]
        ]
    },
    {
        "id": "af6cebe74f32216a",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "1903416abfc902c3",
        "name": "7 - Stopping",
        "props": [
            {
                "p": "machine.state",
                "v": "7",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3090,
        "y": 2040,
        "wires": [
            [
                "256bc123441d3d4b"
            ]
        ]
    },
    {
        "id": "17646e49e1ee5eaf",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "1903416abfc902c3",
        "name": "8 - Aborting",
        "props": [
            {
                "p": "machine.state",
                "v": "8",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3090,
        "y": 2080,
        "wires": [
            [
                "256bc123441d3d4b"
            ]
        ]
    },
    {
        "id": "3110a58a951081d2",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "1903416abfc902c3",
        "name": "10 - Holding",
        "props": [
            {
                "p": "machine.state",
                "v": "10",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3090,
        "y": 2160,
        "wires": [
            [
                "256bc123441d3d4b"
            ]
        ]
    },
    {
        "id": "be16a8eba7a0e787",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "1903416abfc902c3",
        "name": "12 - Unholding",
        "props": [
            {
                "p": "machine.state",
                "v": "12",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3100,
        "y": 2240,
        "wires": [
            [
                "256bc123441d3d4b"
            ]
        ]
    },
    {
        "id": "38e0f58e7a800d5e",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "1903416abfc902c3",
        "name": "13 - Suspending",
        "props": [
            {
                "p": "machine.state",
                "v": "13",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3100,
        "y": 2280,
        "wires": [
            [
                "256bc123441d3d4b"
            ]
        ]
    },
    {
        "id": "9899e8a13f56970f",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "1903416abfc902c3",
        "name": "14 - Unsuspending",
        "props": [
            {
                "p": "machine.state",
                "v": "14",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3110,
        "y": 2320,
        "wires": [
            [
                "256bc123441d3d4b"
            ]
        ]
    },
    {
        "id": "2a1b43560e362234",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "1903416abfc902c3",
        "name": "15 - Reseting",
        "props": [
            {
                "p": "machine.state",
                "v": "15",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3090,
        "y": 2360,
        "wires": [
            [
                "256bc123441d3d4b"
            ]
        ]
    },
    {
        "id": "f2a427b6366c55c5",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "1903416abfc902c3",
        "name": "17 - Complete",
        "props": [
            {
                "p": "machine.state",
                "v": "17",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3090,
        "y": 2440,
        "wires": [
            [
                "256bc123441d3d4b"
            ]
        ]
    },
    {
        "id": "590be0d44482ca38",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "1903416abfc902c3",
        "name": "16 - Completing",
        "props": [
            {
                "p": "machine.state",
                "v": "16",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3100,
        "y": 2400,
        "wires": [
            [
                "256bc123441d3d4b"
            ]
        ]
    },
    {
        "id": "6393e3e7497bdf4c",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "097299724ddfd9a7",
        "name": "1",
        "props": [
            {
                "p": "machine.mode",
                "v": "1",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2950,
        "y": 1640,
        "wires": [
            [
                "4aa1979b695e4eaf"
            ]
        ]
    },
    {
        "id": "4aa1979b695e4eaf",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "097299724ddfd9a7",
        "name": "Send Mode",
        "func": "//msg.machine ={}\n//msg.machine.mode = 1\nnode.status({ \"fill\": \"blue\", \"text\": msg.machine.mode });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 1660,
        "wires": [
            [
                "fefd1cf3c40b27be"
            ]
        ]
    },
    {
        "id": "406f6dc3dd4c1102",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "097299724ddfd9a7",
        "name": "2",
        "props": [
            {
                "p": "machine.mode",
                "v": "2",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2950,
        "y": 1680,
        "wires": [
            [
                "4aa1979b695e4eaf"
            ]
        ]
    },
    {
        "id": "5a7b73dae41723f6",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "e3d3bc25164f0a1f",
        "name": "diProductionCounter",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2960,
        "y": 2820,
        "wires": [
            [
                "2cb276775ecb6f0c"
            ]
        ]
    },
    {
        "id": "b9480ee5fa423d61",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "e3d3bc25164f0a1f",
        "name": "Acumulador Produção SIMULAÇÃO",
        "func": "// simulacao de producao\n\nlet config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\n\n\n\n\nlet sm_atual = flow.get(\"sm_atual\");\nlet dados_plc = global.get(name_var_global);\n\nif ( sm_atual.state == 6 && sm_atual.mode ==2) {\n    dados_plc.diProductionCounter = Number(dados_plc.diProductionCounter) + Number(dados_plc.rActualSpeed)/3600 || 0\n}\n\nmsg.payload = msg.payload\nmsg.machine = {}\nmsg.machine.diProductionCounter = Number(dados_plc.diProductionCounter).toFixed(0)\n\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3470,
        "y": 2820,
        "wires": [
            [
                "fefd1cf3c40b27be"
            ]
        ]
    },
    {
        "id": "dd9f47e4adc48085",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "e3d3bc25164f0a1f",
        "name": "function 98",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3220,
        "y": 2880,
        "wires": [
            [
                "2cb276775ecb6f0c"
            ]
        ]
    },
    {
        "id": "2cb276775ecb6f0c",
        "type": "delay",
        "z": "68c6c71bd0ac9406",
        "g": "e3d3bc25164f0a1f",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3220,
        "y": 2820,
        "wires": [
            [
                "b9480ee5fa423d61",
                "dd9f47e4adc48085"
            ]
        ]
    },
    {
        "id": "56301b3a69bcf6ce",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "e3d3bc25164f0a1f",
        "name": "Zera Production Counter",
        "func": "msg.payload = msg.payload\nmsg.machine = {}\nmsg.machine.diProductionCounter = 0\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3430,
        "y": 2960,
        "wires": [
            [
                "fefd1cf3c40b27be"
            ]
        ]
    },
    {
        "id": "f6a8406206fd9e53",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "e3d3bc25164f0a1f",
        "name": "xResetCounter",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3000,
        "y": 2960,
        "wires": [
            [
                "56301b3a69bcf6ce"
            ]
        ]
    },
    {
        "id": "e561c28c461ed5ee",
        "type": "link in",
        "z": "68c6c71bd0ac9406",
        "g": "e3d3bc25164f0a1f",
        "name": "link in 16",
        "links": [
            "d12b3342e21815e0"
        ],
        "x": 2985,
        "y": 2920,
        "wires": [
            [
                "56301b3a69bcf6ce"
            ]
        ]
    },
    {
        "id": "cbdbad40ded3f3d3",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "149aa416c32264fe",
        "name": "diCounterReject_r1",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2970,
        "y": 3080,
        "wires": [
            [
                "70f5c595077e2c90"
            ]
        ]
    },
    {
        "id": "b54a2723521a1285",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "149aa416c32264fe",
        "name": "xResetReject_r1",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2960,
        "y": 3200,
        "wires": [
            [
                "377e995a18565801"
            ]
        ]
    },
    {
        "id": "970b5135365a9285",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "149aa416c32264fe",
        "name": "Aculador rejeito R1 - SIMULACAO",
        "func": "// simulacao de producao\nlet config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\n\n\n\nlet sm_atual = flow.get(\"sm_atual\");\nlet dados_plc = global.get(name_var_global);\n//node.warn(dados_plc.diCounterReject_r1);\nif (sm_atual.state == 6 && sm_atual.mode == 2) {\n    dados_plc.diCounterReject_r1 = Number(dados_plc.diCounterReject_r1) + 1 || 0\n\n}\n\n\n\n\n\n\n\n\n\n\nmsg.machine = {}\nmsg.machine.diCounterReject_r1 = dados_plc.diCounterReject_r1\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3420,
        "y": 3080,
        "wires": [
            [
                "fefd1cf3c40b27be"
            ]
        ]
    },
    {
        "id": "377e995a18565801",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "149aa416c32264fe",
        "name": "Random rProduced",
        "func": "msg.payload = msg.payload\nmsg.machine = {}\nmsg.machine.diCounterReject_r1 = 0\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3390,
        "y": 3200,
        "wires": [
            [
                "fefd1cf3c40b27be"
            ]
        ]
    },
    {
        "id": "70f5c595077e2c90",
        "type": "delay",
        "z": "68c6c71bd0ac9406",
        "g": "149aa416c32264fe",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "5",
        "randomLast": "20",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3180,
        "y": 3080,
        "wires": [
            [
                "970b5135365a9285",
                "895a18068f512581"
            ]
        ]
    },
    {
        "id": "895a18068f512581",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "149aa416c32264fe",
        "name": "function 99",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3180,
        "y": 3140,
        "wires": [
            [
                "70f5c595077e2c90"
            ]
        ]
    },
    {
        "id": "2613c5d2cb06b676",
        "type": "link in",
        "z": "68c6c71bd0ac9406",
        "g": "149aa416c32264fe",
        "name": "link in 17",
        "links": [
            "d12b3342e21815e0"
        ],
        "x": 2905,
        "y": 3160,
        "wires": [
            [
                "377e995a18565801"
            ]
        ]
    },
    {
        "id": "42b3458174591bc1",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "1d6b6c673f452dda",
        "name": "iActualRecipe",
        "props": [],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2960,
        "y": 3540,
        "wires": [
            [
                "094e1f44e4c1505a"
            ]
        ]
    },
    {
        "id": "094e1f44e4c1505a",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "1d6b6c673f452dda",
        "name": "Random rProduced",
        "func": "msg.machine = {}\nmsg.machine.iActualRecipe = 1\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3370,
        "y": 3540,
        "wires": [
            [
                "fefd1cf3c40b27be"
            ]
        ]
    },
    {
        "id": "d53412584d14811c",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "aa35aeb92c2dd0d2",
        "name": "diCounterReject_r2",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2970,
        "y": 3300,
        "wires": [
            [
                "22fc76a8aca66399"
            ]
        ]
    },
    {
        "id": "481582d17772f656",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "aa35aeb92c2dd0d2",
        "name": "xResetReject_r2",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2960,
        "y": 3420,
        "wires": [
            [
                "716a0f9c5dd77b95"
            ]
        ]
    },
    {
        "id": "70b22f3114c08763",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "aa35aeb92c2dd0d2",
        "name": "Aculador rejeito R1 - SIMULACAO",
        "func": "// simulacao de producao\n\nlet config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\n\n\n\nlet sm_atual = flow.get(\"sm_atual\");\nlet dados_plc = global.get(name_var_global);\n//node.warn(dados_plc.diCounterReject_r2);\nif (sm_atual.state == 6 && sm_atual.mode == 2) {\n    dados_plc.diCounterReject_r2 = Number(dados_plc.diCounterReject_r2) + 1 || 0\n\n}\n\n\n\n\n\n\n\n\n\n\nmsg.machine = {}\nmsg.machine.diCounterReject_r2 = dados_plc.diCounterReject_r2\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3420,
        "y": 3300,
        "wires": [
            [
                "fefd1cf3c40b27be"
            ]
        ]
    },
    {
        "id": "716a0f9c5dd77b95",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "aa35aeb92c2dd0d2",
        "name": "Random rProduced",
        "func": "msg.payload = msg.payload\nmsg.machine = {}\nmsg.machine.diCounterReject_r2 = 0\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3390,
        "y": 3420,
        "wires": [
            [
                "fefd1cf3c40b27be"
            ]
        ]
    },
    {
        "id": "22fc76a8aca66399",
        "type": "delay",
        "z": "68c6c71bd0ac9406",
        "g": "aa35aeb92c2dd0d2",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "5",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3180,
        "y": 3300,
        "wires": [
            [
                "70b22f3114c08763",
                "d728a419db469003"
            ]
        ]
    },
    {
        "id": "d728a419db469003",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "aa35aeb92c2dd0d2",
        "name": "function 100",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3180,
        "y": 3360,
        "wires": [
            [
                "22fc76a8aca66399"
            ]
        ]
    },
    {
        "id": "fc0752dba04e459a",
        "type": "link in",
        "z": "68c6c71bd0ac9406",
        "g": "aa35aeb92c2dd0d2",
        "name": "link in 18",
        "links": [
            "d12b3342e21815e0"
        ],
        "x": 2915,
        "y": 3380,
        "wires": [
            [
                "716a0f9c5dd77b95"
            ]
        ]
    },
    {
        "id": "22a0a19a1efd9853",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "4145bc8a22617df3",
        "name": "programada",
        "func": "msg.machine = {}\nmsg.machine.programada = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2710,
        "y": 2760,
        "wires": [
            [
                "fefd1cf3c40b27be"
            ]
        ]
    },
    {
        "id": "1f67f56566e21e97",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "98998a1633d82261",
        "name": "Random rProduced",
        "func": "msg.machine = {}\nmsg.machine.strRecipeName = \"Agua com gás\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 3660,
        "wires": [
            [
                "fefd1cf3c40b27be"
            ]
        ]
    },
    {
        "id": "54ba80ddf7befb62",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "98998a1633d82261",
        "name": "strRecipeName",
        "props": [],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2970,
        "y": 3660,
        "wires": [
            [
                "1f67f56566e21e97"
            ]
        ]
    },
    {
        "id": "e2e2f8d8cb126123",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "4145bc8a22617df3",
        "name": "debug 265",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.statechanged_reason",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4580,
        "y": 2920,
        "wires": []
    },
    {
        "id": "e00e329433ce51e3",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "01c39ead661e41e4",
        "name": "Consulta Lista Paradas",
        "func": "// Itera sobre cada elemento no array \"payload\" do objeto de mensagem\nlet paradas = {\"list\":msg.payload}\n//node.warn(paradas)\nfor (let i = 0; i < paradas.list.length; i++) {\n    // Verifica se a propriedade \"ID\" do elemento atual é igual ao ID da parada desejada\n    //node.warn(paradas.list[i].ID + \" \" + msg.idParada )\n    if (paradas.list[i].ID == msg.machine.id_anotacaoParada) {\n        // Verifica se a propriedade \"Validity\" do elemento atual contém a máquina especificada\n        if (paradas.list[i][\"Validity\"][msg.nameMachine]) {\n            // Cria um objeto \"out\" com informações relevantes e o adiciona ao objeto de mensagem\n            msg.payload ={}\n            msg.payload.out = {\n                \"nameMachine\": msg.nameMachine,\n                \"ID\": msg.machine.id_anotacaoParada,\n                \"Cadastrada\": true,\n                \"Validity\": true,\n                \"Programada\": paradas.list[i].ParadaProgramada,\n                \"reason\": paradas.list[i].Reason\n            }\n            // Retorna o objeto de mensagem com o objeto \"out\" adicionado\n            return msg\n            // Se a propriedade \"Validity\" não contém a máquina especificada\n        } else if (!msg.payload[i][\"Validity\"][msg.nameMachine]) {\n            // Cria um objeto \"out\" com informações relevantes e o adiciona ao objeto de mensagem\n            msg.payload = {}\n            msg.payload.out = {\n                \"nameMachine\": msg.nameMachine,\n                \"ID\": msg.machine.id_anotacaoParada,\n                \"Cadastrada\": true,\n                \"Validity\": false\n            }\n            // Retorna o objeto de mensagem com o objeto \"out\" adicionado\n            return msg\n        }\n        return\n    }\n}\n\n// Se nenhum elemento no array \"payload\" contém o ID da parada desejada\n// Cria um objeto \"out\" com informações relevantes e o adiciona ao objeto de mensagem\nmsg.payload ={}\nmsg.payload.out = {\n    \"nameMachine\": msg.nameMachine,\n    \"ID\": msg.machine.id_anotacaoParada,\n    \"Cadastrada\": false\n}\n\n// Retorna o objeto de mensagem com o objeto \"out\" adicionado\nreturn msg\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 2700,
        "wires": [
            [
                "d9c69f013272670f",
                "d9cf7595391f169a"
            ]
        ]
    },
    {
        "id": "b76811875a1bf957",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "01c39ead661e41e4",
        "name": "id_anotacaoParada",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 330,
        "y": 2700,
        "wires": [
            [
                "31664258a580e0a4"
            ]
        ]
    },
    {
        "id": "956606b7858c9991",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "01c39ead661e41e4",
        "name": "Gera codigo parada aleatorio",
        "func": "let config = flow.get(\"config\");\n\nmsg.machine = {}\n//msg.machine.id_anotacaoParada = 99\nmsg.machine.id_anotacaoParada = msg.payload[Math.floor(Math.random() * msg.payload.length)].ID\n\nmsg.nameMachine = config.machine_name\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 2700,
        "wires": [
            [
                "e00e329433ce51e3"
            ]
        ]
    },
    {
        "id": "866bc8213653c163",
        "type": "file in",
        "z": "68c6c71bd0ac9406",
        "g": "01c39ead661e41e4",
        "name": "Read file Paradas",
        "filename": "./ZIA/paradas.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 890,
        "y": 2700,
        "wires": [
            [
                "f30b63788e44ded4"
            ]
        ]
    },
    {
        "id": "f30b63788e44ded4",
        "type": "json",
        "z": "68c6c71bd0ac9406",
        "g": "01c39ead661e41e4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1070,
        "y": 2700,
        "wires": [
            [
                "956606b7858c9991"
            ]
        ]
    },
    {
        "id": "02a7e8f4b8e3d380",
        "type": "comment",
        "z": "68c6c71bd0ac9406",
        "g": "01c39ead661e41e4",
        "name": "Lê lista de paradas",
        "info": "",
        "x": 330,
        "y": 2600,
        "wires": []
    },
    {
        "id": "31664258a580e0a4",
        "type": "delay",
        "z": "68c6c71bd0ac9406",
        "g": "01c39ead661e41e4",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "10",
        "randomLast": "15",
        "randomUnits": "minutes",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 620,
        "y": 2700,
        "wires": [
            [
                "866bc8213653c163"
            ]
        ]
    },
    {
        "id": "61d3d4aa814e5435",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "01c39ead661e41e4",
        "name": "function 102",
        "func": "let msg1 ={}\nlet msg2 ={}\nlet msg3 ={}\nlet msg4 ={}\nif (msg.payload.out.Validity && msg.payload.out.Cadastrada) {\n    \n    msg1.payload = msg.payload.out.ID\n    msg2.payload = msg.payload.out.reason\n    msg3.payload = msg.payload.out.Programada\n    msg4.machine ={}\n    msg4.machine.state = 2\n    return [msg1,msg2,msg3,msg4]\n}\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 2700,
        "wires": [
            [
                "0b9c26147475e9a0"
            ],
            [
                "9d77b6a99f2d17f3"
            ],
            [
                "22a0a19a1efd9853"
            ],
            [
                "256bc123441d3d4b",
                "aa959d6dd17e8e46"
            ]
        ]
    },
    {
        "id": "d9c69f013272670f",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "01c39ead661e41e4",
        "name": "Only If MODE=2 STATE=6",
        "func": "let sm_atual = flow.get(\"sm_atual\");\n//node.warn(sm_atual);\nif (sm_atual.state == 6 && sm_atual.mode == 2) {\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 2700,
        "wires": [
            [
                "61d3d4aa814e5435"
            ]
        ]
    },
    {
        "id": "c36a71f44076f791",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "01c39ead661e41e4",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 470,
        "y": 2800,
        "wires": [
            [
                "866bc8213653c163"
            ]
        ]
    },
    {
        "id": "efaea9b26efc215f",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "0604c6ea021b07c0",
        "name": "id_alm_maquina",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 290,
        "y": 1740,
        "wires": [
            [
                "7369be01d946e825"
            ]
        ]
    },
    {
        "id": "781118fc13670aea",
        "type": "file in",
        "z": "68c6c71bd0ac9406",
        "g": "0604c6ea021b07c0",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 940,
        "y": 1740,
        "wires": [
            [
                "7a4a3874b9a25cad"
            ]
        ]
    },
    {
        "id": "7a4a3874b9a25cad",
        "type": "json",
        "z": "68c6c71bd0ac9406",
        "g": "0604c6ea021b07c0",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1110,
        "y": 1740,
        "wires": [
            [
                "4a0520147f8e3a3d"
            ]
        ]
    },
    {
        "id": "4a0520147f8e3a3d",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "0604c6ea021b07c0",
        "name": "Gera codigo parada aleatorio",
        "func": "\nlet config = flow.get(\"config\");\nmsg.machine = {}\nmsg.machine.idAlarme = msg.payload[Math.floor(Math.random() * msg.payload.length)].ID\n\nmsg.nameMachine = config.machine_name\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 1740,
        "wires": [
            [
                "14a1b267d0eb8a6e"
            ]
        ]
    },
    {
        "id": "14a1b267d0eb8a6e",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "0604c6ea021b07c0",
        "name": "Consulta Lista Paradas",
        "func": "// Itera sobre cada elemento no array \"payload\" do objeto de mensagem\nlet alarmes = { \"list\": msg.payload }\n//node.warn(paradas)\nfor (let i = 0; i < alarmes.list.length; i++) {\n    // Verifica se a propriedade \"ID\" do elemento atual é igual ao ID da parada desejada\n    //node.warn(paradas.list[i].ID + \" \" + msg.idParada )\n    if (alarmes.list[i].ID == msg.machine.idAlarme) {\n        msg.payload = {}\n        msg.payload.out = {\n            \"TimeStamp\": new Date(),\n            \"nameMachine\": msg.nameMachine,\n            \"ID\": msg.machine.idAlarme,\n            \"reason\": alarmes.list[i].strAlarme,\n            \"Programada\" : false,\n            \"cmd\": alarmes.list[i].cmd\n            //alarmes : alarmes\n        }\n        return msg\n    }\n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 1740,
        "wires": [
            [
                "8f04fefffee248a1",
                "53232f762de84f0b"
            ]
        ]
    },
    {
        "id": "319e7ad2e07e1e5d",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "0604c6ea021b07c0",
        "name": "function 103",
        "func": "let msg1 ={}\nlet msg2 ={}\nlet msg3 ={}\nlet msg4 ={}\n\nmsg1.payload = msg.payload.out.ID\nmsg2.payload = msg.payload.out.reason\nmsg3.payload = msg.payload.out.Programada\nmsg4.machine = {}\nmsg4.machine.state = msg.payload.out.cmd\n\nreturn [msg1,msg2,msg3,msg4]\n\n",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2120,
        "y": 1720,
        "wires": [
            [
                "0b9c26147475e9a0"
            ],
            [
                "9d77b6a99f2d17f3"
            ],
            [
                "22a0a19a1efd9853"
            ],
            [
                "256bc123441d3d4b",
                "aa959d6dd17e8e46"
            ]
        ]
    },
    {
        "id": "7369be01d946e825",
        "type": "delay",
        "z": "68c6c71bd0ac9406",
        "g": "0604c6ea021b07c0",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "10",
        "randomLast": "15",
        "randomUnits": "minutes",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 540,
        "y": 1740,
        "wires": [
            [
                "44cfe54f724206c6"
            ]
        ]
    },
    {
        "id": "8f04fefffee248a1",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "0604c6ea021b07c0",
        "name": "Only If MODE=2 STATE=6",
        "func": "let sm_atual = flow.get(\"sm_atual\");\n//node.warn(sm_atual);\nif (sm_atual.state == 6 && sm_atual.mode == 2) {\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 1740,
        "wires": [
            [
                "319e7ad2e07e1e5d",
                "53c37be8e06998b2"
            ]
        ]
    },
    {
        "id": "2a5795388439e525",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "0604c6ea021b07c0",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 550,
        "y": 1840,
        "wires": [
            [
                "44cfe54f724206c6"
            ]
        ]
    },
    {
        "id": "44cfe54f724206c6",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "0604c6ea021b07c0",
        "name": "function 105",
        "func": "let config = flow.get(\"config\");\n\nmsg.filename = \".//ZIA//alarmes_\" + config.machine_name +\".json\"\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1740,
        "wires": [
            [
                "781118fc13670aea"
            ]
        ]
    },
    {
        "id": "aa959d6dd17e8e46",
        "type": "delay",
        "z": "68c6c71bd0ac9406",
        "g": "c4162b7fc225aa84",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "2",
        "randomUnits": "minutes",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1500,
        "y": 2180,
        "wires": [
            [
                "b9ea3c966c6dbea3"
            ]
        ]
    },
    {
        "id": "b9ea3c966c6dbea3",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "c4162b7fc225aa84",
        "name": "Only If MODE !=2 E STATE !=6",
        "func": "let sm_atual = flow.get(\"sm_atual\");\n//node.warn(sm_atual);\nif (sm_atual.state != 6 && sm_atual.mode == 2) {\n    msg.machine = {}\n    msg.machine.state = 6\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 2180,
        "wires": [
            [
                "ed42d3a133756cd7"
            ]
        ]
    },
    {
        "id": "ed42d3a133756cd7",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "c4162b7fc225aa84",
        "name": "function 107",
        "func": "msg.machine = {}\nmsg.machine.state = 6\n\nreturn msg\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2120,
        "y": 2180,
        "wires": [
            [
                "256bc123441d3d4b",
                "31664258a580e0a4",
                "7369be01d946e825"
            ]
        ]
    },
    {
        "id": "331cf843029402ca",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "c4162b7fc225aa84",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1250,
        "y": 2180,
        "wires": [
            [
                "aa959d6dd17e8e46"
            ]
        ]
    },
    {
        "id": "d9b3a5ea45395a0f",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "c4162b7fc225aa84",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1250,
        "y": 2280,
        "wires": [
            [
                "b9ea3c966c6dbea3"
            ]
        ]
    },
    {
        "id": "b8a95c6bb7f5cac2",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "d8871f42a247b3ed",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 120,
        "wires": [
            [
                "fd3cfd88dcbd4639"
            ]
        ]
    },
    {
        "id": "fd3cfd88dcbd4639",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "d8871f42a247b3ed",
        "name": "CONFIG",
        "func": "let config = {}\n\nconfig.machine_name = \"posicionador\"\n\nconfig.factory = 1\nconfig.machine_id = 1\nconfig.token_machine = \"Bearer \" + \"5c14f0b1942d8829c154b0b2fe599233f570b589\"\nconfig.token_line = \"Bearer \" + \"908df4a36fdb3299254be913a8002a1842499a37\"\nconfig.url_machine = \"https://collectorzia.zegla.com.br/machine_events\"\nconfig.url_line = \"https://collectorzia.zegla.com.br/line_events\"\nconfig.send = true /// habilita POST\n\nflow.set(\"config\", config);\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 120,
        "wires": [
            [
                "388c5ab790dee33a"
            ]
        ]
    },
    {
        "id": "388c5ab790dee33a",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "d8871f42a247b3ed",
        "name": "debug 275",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 120,
        "wires": []
    },
    {
        "id": "53c37be8e06998b2",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "ee55c66084446fe9",
        "name": "Alarme",
        "func": "let regAlm = msg.payload.out\nmsg.payload = {}\nlet config = flow.get(\"config\");\nlet dados_alm = {\n    ...msg.payload,\n    TimeStamp: regAlm.TimeStamp,\n    nameMachine: regAlm.nameMachine,\n    ID: regAlm.ID,\n    reason: regAlm.reason\n};\n\nconst d = new Date();\nlet minutes = d.getMinutes();\nlet agora = new Date()\n\nmsg.payload = {\n    \"machine_event\": {\n        \"timestamp(1i)\": agora.getFullYear().toString(),\n        \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n        \"timestamp(3i)\": agora.getDate().toString(),\n        \"timestamp(4i)\": agora.getHours().toString(),\n        \"timestamp(5i)\": agora.getMinutes().toString(),\n        \"timestamp(6i)\": agora.getSeconds().toString(),\n        \"event_type_id\": 5,\n        \"payload\": dados_alm\n    }\n}\n\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1480,
        "wires": [
            [
                "283feb4290280998"
            ]
        ]
    },
    {
        "id": "30a1290528a4ff07",
        "type": "http request",
        "z": "68c6c71bd0ac9406",
        "g": "ee55c66084446fe9",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1790,
        "y": 1480,
        "wires": [
            [
                "355e9037456fee86"
            ]
        ]
    },
    {
        "id": "355e9037456fee86",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "ee55c66084446fe9",
        "name": "debug 276",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 1990,
        "y": 1480,
        "wires": []
    },
    {
        "id": "01fb227729f3cb97",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "Turnos, Tempos Acumulados",
        "func": "\nlet msg1 = new Object()\nlet msg2 = new Object()\nlet msg3 = new Object()\nlet config = flow.get(\"config\");\nlet a\n\n\nlet turno = global.get(\"turno_\" + config.factory)\nlet memo_turno = flow.get(\"memo_turno\")\n\n\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\n\nlet sm_atual = {\n    \"state\": dadosPlc.state,\n    \"mode\": dadosPlc.mode\n}\nflow.set(\"sm_atual\", sm_atual);\nlet sm_anterior = flow.get(\"sm_anterior\") || flow.set(\"sm_anterior\", sm_atual)\n\n\nlet tempoTranscorrido\nif (memo_turno == turno.turno) { //&& turno.turno != 0\n    a = 1\n\n    flow.set(\"tempoTranscorrido\", turno.tempoTranscorrido);\n    tempoTranscorrido = turno.tempoTranscorrido\n\n    calculosOEE()\n\n} else {\n    a = 2\n\n    tempoTranscorrido = flow.get(\"tempoTranscorrido\") || 0\n\n}\n\n\n\nlet parada = flow.get(\"parada\") || { \"hora\": 0, \"state\": \"0\", \"mode\": \"0\", \"active\": false, \"tParadaAtual\": 0 }\n\n\n\n// Atualiza o tempo da parada atual\nif ((sm_atual.state != 6 || sm_atual.mode != 2) && turno.turno != 0) {\n    let agora = new Date().getTime()\n    let tParadaAtual = agora - parada.hora\n    parada.tParadaAtual = tParadaAtual / 60 / 1000\n    flow.set(\"parada\", parada);\n    global.set(\"parada\" + name_var_global, parada);\n}\n\n\n\n\n\n// Aciona saida indicando que houve mudanca do modo de operacao\nif (sm_atual.mode != sm_anterior.mode || sm_atual.state != sm_anterior.state) {\n    //Verifica se a maquina saiu do estado Execute\n    //Sempre que a maquina sair de execute devemos anotar o horario da parada\n    if ((sm_anterior.state == 6 && sm_anterior.mode == 2) && (sm_atual.state != sm_anterior.state || sm_atual.mode != sm_anterior.mode)) {\n        console.log(\"NÃO PRODUZINDO\")\n        anotaInicioParada()\n        msg2 = null\n    } else if ((sm_anterior.state != 6 || sm_anterior.mode != 2) && (sm_atual.state == 6 && sm_atual.mode == 2)) {\n        console.log(\"PRODUZINDO\")\n        msg2.payload = consolidaParada()\n        calculosOEE()\n        flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n    }\n    flow.set(\"sm_anterior\", sm_atual)\n\n\n    return [null, msg2]\n}\n\n\n\n\n\n/// rotinas que devem ser executadas na troca de turno\nif (memo_turno != turno.turno) {\n    msg1 = null\n    msg2 = null\n\n    console.log(\"TrocaTurno\")\n    if (memo_turno != 0) {\n        console.log(\"Fim turno \" + memo_turno)\n        msg1 = { payload: 1 }\n\n        if (parada.active == true) { // se no fim do turno estiver em parada consolida\n            msg2 = {}\n            msg2.payload = {}\n            msg2.payload = consolidaParada()\n\n            calculosOEE()\n\n            flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n            if (turno.turno != 0) { // se entrar em um novo turno reinicia a parada\n                console.log(\"Inicio turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n                anotaInicioParada()\n\n            }\n        } else {\n            if (turno.turno != 0) {\n                console.log(\"Iniccio Turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n            }\n        }\n\n\n        calculosOEE()\n        let calculoOEE = flow.get(\"calculoOEE\");\n        flow.set(\"fimTurnoOEE\", calculoOEE);\n        flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n\n\n\n    } else if (memo_turno == 0) {\n        msg1 = null\n        console.log(\"verificaAnotacaoTurno\") // verifica e cria msg2 se necssario e zera anotacao de parada\n\n        verificaAnotacaoInicioTurno()\n\n    } else {\n\n        msg1 = null\n    }\n\n    //anota registro de turno\n\n\n\n    flow.set(\"memo_turno\", turno.turno)\n\n    return [msg1, msg2]\n}\nmsg3.payload = calculosOEE()\nmsg3.payload.machine_event.event_type_id = 6\nreturn [null, null, msg3]\n\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n\nfunction anotaInicioParada() {\n    console.log(\"inicio parada\")\n    node.warn(name_var_global);\n\n    let iParada = global.get(name_var_global);\n    let parada = {\n        \"hora\": new Date(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode\n    }\n    flow.set(\"parada\", {\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true,\n        \"statechanged_id\": iParada.statechanged_id,\n        \"statechanged_reason\": iParada.statechanged_reason,\n        \"programada\": new Boolean(iParada.programada),\n        \"justifica\": false\n\n    });\n    global.set(\"parada\" + name_var_global, {\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true,\n        \"statechanged_id\": iParada.statechanged_id,\n        \"statechanged_reason\": iParada.statechanged_reason,\n        \"programada\": new Boolean(iParada.programada),\n        \"justifica\": false\n\n    });\n    //console.clear()\n    //console.log(\"Inicio da Parada:\" + parada.hora.getHours() + \":\" + parada.hora.getMinutes())\n    return {\n        \"InicioParada\": parada.hora.getTime(),\n        \"FimParada\": 0,\n        \"tParada\": 0,\n        \"ID\": \"ID\",\n        \"Reason\": null,\n        \"ModeReason\": new Number(parada.mode),\n        \"StateReason\": new Number(parada.state),\n        \"Programada\": null,\n        \"Equip\": name_var_global\n    }\n}\n\nfunction consolidaParada() {\n\n    console.log(\"fim parada\")\n    let retorno = new Date()\n    let parada = flow.get(\"parada\") || 0\n    let tParada = (retorno.getTime() - parada.hora) / 1000 / 60\n    let paradasSoma = flow.get(\"paradasSoma\") || flow.set(\"paradasSoma\", { \"Prog\": 0, \"Nprog\": 0 })\n\n    if (dadosPlc.programada == \"true\") {\n        paradasSoma.Prog = paradasSoma.Prog + tParada\n    } else {\n        paradasSoma.Nprog = paradasSoma.Nprog + tParada\n    }\n    flow.set(\"paradasSoma\", paradasSoma);\n    parada.active = false\n    flow.set(\"parada\", parada);\n    global.set(\"parada\" + name_var_global, parada);\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    return {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 4,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": {\n                \"InicioParada\": parada.hora,\n                \"FimParada\": retorno.getTime(),\n                \"tParada\": Number(tParada.toFixed(2)),\n                \"ID\": Number(dadosPlc.statechanged_id),\n                \"Reason\": parada.statechanged_reason,\n                \"ModeReason\": new Number(parada.mode),\n                \"StateReason\": new Number(parada.state),\n                \"Programada\": new Boolean(dadosPlc.programada),\n                \"turno_atual\": turno.turno,\n                \"equip\": config.machine_name,\n                \"machine_id\": config.machine_id\n            }\n        }\n    }\n}\n\nfunction calculosOEE() {\n\n\n    //msg.filename = \".\\supZIA\\registroTurno_\" + name_var_global + \".json\"\n\n    let paradasSoma = flow.get(\"paradasSoma\") || { \"Prog\": 0, \"Nprog\": 0 }\n    let dados_oee = {}\n    let tNProg = Number(paradasSoma.Nprog)\n    let tProg = Number(paradasSoma.Prog)\n    let tProducao = Number(tempoTranscorrido - (tNProg + tProg))\n\n    if (dadosPlc.mode == 2 && dadosPlc.state == 6) {\n        dados_oee.statusMachine = \"Rodando\"\n    } else dados_oee.statusMachine = \"Parada\"\n\n    ////////////\n    dados_oee.statusConexao = true\n    dados_oee.mode = Number(dadosPlc.mode)\n    dados_oee.state = Number(dadosPlc.state)\n    dados_oee.rNominalSpeed = Number(dadosPlc.rNominalSpeed)\n    dados_oee.rSetSpeed = Number(dadosPlc.rSetSpeed)\n    dados_oee.rActualSpeed = Number(dadosPlc.rActualSpeed)\n    dados_oee.strRecipeName = String(dadosPlc.strRecipeName)\n    dados_oee.strBottle = String(dadosPlc.strBottle)\n    dados_oee.strCap = String(dadosPlc.strCap)\n    dados_oee.diProductionCounter = Number(dadosPlc.diProductionCounter)\n    dados_oee.diCounterReject_r1 = Number(dadosPlc.diCounterReject_r1)\n    dados_oee.diCounterReject_r2 = Number(dadosPlc.diCounterReject_r2)\n    dados_oee.iActualRecipe = Number(dadosPlc.iActualRecipe)\n    dados_oee.tempoTranscorrido = Number(tempoTranscorrido.toFixed(2))\n    dados_oee.percDisp = (tempoTranscorrido - (tProg + tNProg)) / (tempoTranscorrido - tProg) * 100\n    dados_oee.percDisp = Number(dados_oee.percDisp.toFixed(2))\n    dados_oee.percEfic = (dados_oee.diProductionCounter) / ((tProducao * dados_oee.rNominalSpeed) / 60) * 100\n    dados_oee.percEfic = Number(dados_oee.percEfic.toFixed(2))\n    dados_oee.percQual = (((dados_oee.diProductionCounter) - (dados_oee.diCounterReject_r1 + dados_oee.diCounterReject_r2)) / dados_oee.diProductionCounter) * 100\n    dados_oee.percQual = Number(dados_oee.percQual.toFixed(2))\n    dados_oee.percOEE = dados_oee.percDisp * dados_oee.percEfic * dados_oee.percQual / 10000\n    dados_oee.percOEE = Number(dados_oee.percOEE.toFixed(2))\n    dados_oee.turno = Number(turno.turno)\n    dados_oee.tempoParadaProgramada = Number(tProg.toFixed(2))\n    dados_oee.tempoParadaNaoProgramada = Number(tNProg.toFixed(2))\n    dados_oee.dimetaProduzidos = 100000\n    dados_oee.rmetaPerf = 95.00\n    dados_oee.rmetaDisp = 90.00\n    dados_oee.rmetaQual = 99.00\n    dados_oee.rmetaOEE = 90.00\n    dados_oee.equip = String(config.machine_name)\n\n    ////teste limites - ocorre quando o node é desligado\n    if (dados_oee.percDisp < 0) {\n        dados_oee.percDisp = 0\n    } else if (dados_oee.percDisp > 100) {\n        dados_oee.percDisp = 100\n    }\n\n    if (dados_oee.percEfic < 0) {\n        dados_oee.percEfic = 0\n    } else if (dados_oee.percEfic > 100) {\n        dados_oee.percEfic = 100\n    }\n\n    if (dados_oee.percQual < 0) {\n        dados_oee.percQual = 0\n    } else if (dados_oee.percQual > 100) {\n        dados_oee.percQual = 100\n    }\n\n    if (dados_oee.percOEE < 0) {\n        dados_oee.percOEE = 0\n    } else if (dados_oee.percOEE > 100) {\n        dados_oee.percOEE = 100\n    }\n\n\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    let calculo = {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 3,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": dados_oee\n        }\n    }\n\n    flow.set(\"calculoOEE\", calculo);\n\n    return calculo\n\n\n\n}\n\nfunction verificaAnotacao() {\n\n}\n\n\nfunction verificaAnotacaoInicioTurno() {\n    console.log(\"Inicio Turno \" + turno.turno)\n    ////Zera os valores para iniciar novo turno\n    flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n    if (sm_atual.state == 6 && sm_atual.mode == 2) {\n        //PRODUZINDO\n    } else {\n        //NAO PRODUZINDO\n        anotaInicioParada()\n        msg2 = null\n    }\n\n\n\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 520,
        "wires": [
            [
                "31a0924335ef5cd1"
            ],
            [
                "1b70a4f28b196640",
                "b2945951e3ba1c7c"
            ],
            [
                "0c77d52105beac06",
                "fa2f1cd6f1f0cb6f"
            ]
        ]
    },
    {
        "id": "a50977bbf082e43d",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "cycle",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 520,
        "wires": [
            [
                "01fb227729f3cb97",
                "2b2a64daa13770c5"
            ]
        ]
    },
    {
        "id": "bee9a20d7dd49437",
        "type": "comment",
        "z": "68c6c71bd0ac9406",
        "g": "2c3e5e46433b91c1",
        "name": "Registro Fim da Parada",
        "info": "",
        "x": 1040,
        "y": 720,
        "wires": []
    },
    {
        "id": "9f0224839acc721b",
        "type": "http request",
        "z": "68c6c71bd0ac9406",
        "d": true,
        "g": "2c3e5e46433b91c1",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1710,
        "y": 560,
        "wires": [
            [
                "3d549f73688d4245"
            ]
        ]
    },
    {
        "id": "3d549f73688d4245",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "2c3e5e46433b91c1",
        "name": "debug 277",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 2010,
        "y": 580,
        "wires": []
    },
    {
        "id": "89891a05dbdb4849",
        "type": "http request",
        "z": "68c6c71bd0ac9406",
        "g": "b18c2478bf65f6e1",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1770,
        "y": 940,
        "wires": [
            [
                "a9e3f868bec8a605"
            ]
        ]
    },
    {
        "id": "a9e3f868bec8a605",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "b18c2478bf65f6e1",
        "name": "debug 279",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 1990,
        "y": 940,
        "wires": []
    },
    {
        "id": "31a0924335ef5cd1",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "1fa37cf867749907",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 340,
        "wires": [
            [
                "21524eca5faabfc0"
            ]
        ]
    },
    {
        "id": "0304b1c4475aa7ce",
        "type": "comment",
        "z": "68c6c71bd0ac9406",
        "g": "1fa37cf867749907",
        "name": "Registro Troca de Turno",
        "info": "",
        "x": 940,
        "y": 280,
        "wires": []
    },
    {
        "id": "9c506b841406ed13",
        "type": "http request",
        "z": "68c6c71bd0ac9406",
        "g": "1fa37cf867749907",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "",
                "valueType": "other",
                "valueValue": ""
            }
        ],
        "x": 1670,
        "y": 320,
        "wires": [
            [
                "960b90b0b1fdbaab"
            ]
        ]
    },
    {
        "id": "960b90b0b1fdbaab",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "1fa37cf867749907",
        "name": "debug 282",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 1870,
        "y": 360,
        "wires": []
    },
    {
        "id": "d12b3342e21815e0",
        "type": "link out",
        "z": "68c6c71bd0ac9406",
        "g": "1fa37cf867749907",
        "name": "link Troca de Turno",
        "mode": "link",
        "links": [
            "e561c28c461ed5ee",
            "2613c5d2cb06b676",
            "fc0752dba04e459a"
        ],
        "x": 1635,
        "y": 420,
        "wires": []
    },
    {
        "id": "7b05d22aa92cc3fe",
        "type": "comment",
        "z": "68c6c71bd0ac9406",
        "g": "1fa37cf867749907",
        "name": "Turno + Tempo Transcorrido",
        "info": "",
        "x": 960,
        "y": 400,
        "wires": []
    },
    {
        "id": "03f6fe828ba36d4f",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "709ad69e2fd995aa",
        "name": "strBottle",
        "props": [],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2940,
        "y": 3820,
        "wires": [
            [
                "8766fef998471723"
            ]
        ]
    },
    {
        "id": "8766fef998471723",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "709ad69e2fd995aa",
        "name": "Random rProduced",
        "func": "msg.machine = {}\nmsg.machine.strBottle = \"1000ml-PET\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 3820,
        "wires": [
            [
                "fefd1cf3c40b27be"
            ]
        ]
    },
    {
        "id": "532be47dd43c1121",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "2ce866e91f8eed28",
        "name": "strCap",
        "props": [],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2940,
        "y": 3960,
        "wires": [
            [
                "4a12abef616d3ae8"
            ]
        ]
    },
    {
        "id": "4a12abef616d3ae8",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "2ce866e91f8eed28",
        "name": "Random rProduced",
        "func": "msg.machine = {}\nmsg.machine.strCap = \"8251-1G\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 3960,
        "wires": [
            [
                "fefd1cf3c40b27be"
            ]
        ]
    },
    {
        "id": "ecc564ba5fe7dcf0",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "cd8a7e893a94fc1c",
        "name": "Actual Speed",
        "func": "msg.machine = {}\nmsg.machine.rSetSpeed = 14000;\nmsg.payload = msg.machine.rActualSpeed\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3490,
        "y": 2680,
        "wires": [
            [
                "fefd1cf3c40b27be"
            ]
        ]
    },
    {
        "id": "6dc16ea4962723cb",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "cd8a7e893a94fc1c",
        "name": "rNominalSpeed",
        "props": [],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3110,
        "y": 2580,
        "wires": [
            [
                "8b9185dd5e2ed9c0"
            ]
        ]
    },
    {
        "id": "820afb8d23329f6c",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "cd8a7e893a94fc1c",
        "name": "rActualSpeed",
        "props": [],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3100,
        "y": 2620,
        "wires": [
            [
                "d1380b7c7e99a4fe"
            ]
        ]
    },
    {
        "id": "8b9185dd5e2ed9c0",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "cd8a7e893a94fc1c",
        "name": "Nominal Speed",
        "func": "msg.machine = {}\nmsg.machine.rNominalSpeed = 15000\nmsg.payload = msg.machine.rNominalSpeed\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3500,
        "y": 2580,
        "wires": [
            [
                "fefd1cf3c40b27be"
            ]
        ]
    },
    {
        "id": "d1380b7c7e99a4fe",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "cd8a7e893a94fc1c",
        "name": "Actual Speed",
        "func": "msg.machine = {}\nmsg.machine.rActualSpeed = (13000 + Math.random()*50).toFixed(0);\nmsg.payload = msg.machine.rActualSpeed\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3490,
        "y": 2620,
        "wires": [
            [
                "fefd1cf3c40b27be"
            ]
        ]
    },
    {
        "id": "cbfc1fe192fe548a",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "cd8a7e893a94fc1c",
        "name": "rSetSpeed",
        "props": [],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3090,
        "y": 2680,
        "wires": [
            [
                "ecc564ba5fe7dcf0"
            ]
        ]
    },
    {
        "id": "d9cf7595391f169a",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "name": "debug 327",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 2960,
        "wires": []
    },
    {
        "id": "2c6c6c3230cdceac",
        "type": "delay",
        "z": "68c6c71bd0ac9406",
        "g": "b18c2478bf65f6e1",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "15",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1260,
        "y": 940,
        "wires": [
            [
                "4703310b06c0f007"
            ]
        ]
    },
    {
        "id": "21524eca5faabfc0",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "1fa37cf867749907",
        "name": "Get fimTurnoOEE",
        "func": "msg.payload = flow.get(\"fimTurnoOEE\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 360,
        "wires": [
            [
                "9c506b841406ed13",
                "d12b3342e21815e0"
            ]
        ]
    },
    {
        "id": "1b70a4f28b196640",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "2c3e5e46433b91c1",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n\n    //msg.payload.machine_event.payload.ID = 999;\n\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 580,
        "wires": [
            [
                "603bde7a62af2c4d"
            ]
        ]
    },
    {
        "id": "283feb4290280998",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "ee55c66084446fe9",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 1480,
        "wires": [
            [
                "30a1290528a4ff07"
            ]
        ]
    },
    {
        "id": "0c77d52105beac06",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "b18c2478bf65f6e1",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 940,
        "wires": [
            [
                "2c6c6c3230cdceac"
            ]
        ]
    },
    {
        "id": "4703310b06c0f007",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "b18c2478bf65f6e1",
        "name": "statusMachineId DEMO",
        "func": "let troca_status = flow.get(\"troca_status\") || 0;\ntroca_status = troca_status + 1\n\nif (troca_status > 4) {\n    troca_status = 1\n}\n\nflow.set(\"troca_status\", troca_status);\n\n\n\nmsg.payload.machine_event.payload.statusMachineId = troca_status\n\n\n\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 940,
        "wires": [
            [
                "89891a05dbdb4849",
                "581a13e079e89d2f"
            ]
        ]
    },
    {
        "id": "581a13e079e89d2f",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "name": "debug 474",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 840,
        "wires": []
    },
    {
        "id": "603bde7a62af2c4d",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "2c3e5e46433b91c1",
        "name": "function 257",
        "func": "\nif (msg.payload != null) {\n\n    if (msg.payload.machine_event.payload.ID == 9999) {\n        return [null, msg]\n    } else return [msg, null];\n\n\n\n\n} else {\n\n    node.warn(\"Mudanca de estado sem registro\");\n\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 580,
        "wires": [
            [
                "9f0224839acc721b"
            ],
            [
                "47c6aca040f5268a"
            ]
        ]
    },
    {
        "id": "2e3745ef1ff2f054",
        "type": "postgresql",
        "z": "68c6c71bd0ac9406",
        "g": "2c3e5e46433b91c1",
        "name": "",
        "query": "INSERT INTO public.appoint\n(payload)\nVALUES('{{{msg.payload}}}');",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1770,
        "y": 640,
        "wires": [
            [
                "45448a545092ddb1"
            ]
        ]
    },
    {
        "id": "45448a545092ddb1",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "2c3e5e46433b91c1",
        "name": "debug 494",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 640,
        "wires": []
    },
    {
        "id": "47c6aca040f5268a",
        "type": "json",
        "z": "68c6c71bd0ac9406",
        "g": "2c3e5e46433b91c1",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1590,
        "y": 640,
        "wires": [
            [
                "2e3745ef1ff2f054"
            ]
        ]
    },
    {
        "id": "b2945951e3ba1c7c",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "2c3e5e46433b91c1",
        "name": "debug 501",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 640,
        "wires": []
    },
    {
        "id": "51f67bb12eebea4c",
        "type": "link in",
        "z": "68c6c71bd0ac9406",
        "g": "2c3e5e46433b91c1",
        "name": "apontamento maquina 1",
        "links": [],
        "x": 915,
        "y": 680,
        "wires": [
            [
                "1b70a4f28b196640",
                "6f5da15f86b9f5de"
            ]
        ]
    },
    {
        "id": "6f5da15f86b9f5de",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "2c3e5e46433b91c1",
        "name": "debug 508",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 680,
        "wires": []
    },
    {
        "id": "53232f762de84f0b",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "0604c6ea021b07c0",
        "name": "debug 509",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 1820,
        "wires": []
    },
    {
        "id": "fa2f1cd6f1f0cb6f",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "function 262",
        "func": "let config = flow.get(\"config\");\n//msg.config = config\n\n\n\nlet sm_atual = flow.get(\"sm_atual\");\nlet sm_anterior = flow.get(\"sm_anterior_iot\") || { mode: \"0\", state: \"0\" };\n\nif ((sm_atual.mode != sm_anterior.mode) || (sm_atual.state != sm_anterior.state)) {\n\n    //node.warn(\"mudou\");\n    flow.set(\"sm_anterior_iot\", sm_atual);\n\n    msg.machine_id = config.machine_id\n\n    return msg;\n\n\n\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1060,
        "wires": [
            [
                "7bbff6591f41d1d1"
            ]
        ]
    },
    {
        "id": "9b6a9f86a218be57",
        "type": "postgresql",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "",
        "query": "INSERT INTO public.machine_events\n(id_machine, payload)\nVALUES({{{msg.machine_id}}}, '{{{msg.payload}}}');",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1130,
        "y": 1060,
        "wires": [
            [
                "95900e409ee961a5"
            ]
        ]
    },
    {
        "id": "7bbff6591f41d1d1",
        "type": "json",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 970,
        "y": 1060,
        "wires": [
            [
                "9b6a9f86a218be57"
            ]
        ]
    },
    {
        "id": "4e59058a1dc05ced",
        "type": "postgresql",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n),\nfiltered_intervals AS (\n    SELECT \n        id_machine,\n        mode,\n        state,\n        \n        -- Calcula o início e o fim ajustados do evento, limitados pelo intervalo de filtro\n        GREATEST(timestamp, '{{{msg.payload.start_time}}}'::timestamp) AS adjusted_start,\n        LEAST(next_timestamp, '{{{msg.payload.end_time}}}'::timestamp) AS adjusted_end\n        \n    FROM \n        state_intervals\n    WHERE \n        next_timestamp > '{{{msg.payload.start_time}}}'::timestamp  -- start_filter\n        AND timestamp < '{{{msg.payload.end_time}}}'::timestamp     -- end_filter\n        AND id_machine = 1  -- substitua 1 pelo id_machine desejado\n)\nSELECT \n    id_machine,\n    mode,\n    state,\n    \n    -- Calcula o tempo ativo total ajustado dentro do intervalo\n    SUM(\n        CASE \n            WHEN adjusted_end > adjusted_start THEN \n                EXTRACT(EPOCH FROM (adjusted_end - adjusted_start)) / 60  -- Tempo em minutos\n            ELSE \n                0\n        END\n    ) AS total_active_duration\nFROM \n    filtered_intervals\nGROUP BY \n    id_machine,\n    mode,\n    state\nORDER BY \n    id_machine,\n    mode,\n    state;\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1650,
        "y": 1060,
        "wires": [
            [
                "07dbdfff6be73712",
                "a91a076e0ab378d2"
            ]
        ]
    },
    {
        "id": "2f73ed9e6dd8dc44",
        "type": "postgresql",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n)\nSELECT \n    id,\n    timestamp,\n    id_machine,\n    payload,\n    mode,\n    state,\n    next_timestamp,\n    -- Calcula o tempo que o estado ficou ativo\n    CASE \n        WHEN next_timestamp IS NOT NULL THEN \n            AGE(next_timestamp, timestamp)\n        ELSE \n            NULL\n    END AS active_duration\nFROM \n    state_intervals\nORDER BY \n    timestamp;",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2370,
        "y": 1360,
        "wires": [
            [
                "5d5ea873fe77da47"
            ]
        ]
    },
    {
        "id": "4036f4a06b8f8740",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1180,
        "y": 1140,
        "wires": [
            [
                "95900e409ee961a5"
            ]
        ]
    },
    {
        "id": "95900e409ee961a5",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "consulta turno e ajsute de filtro",
        "func": "// Recupera a lista de horários de turnos a partir de uma variável global e o índice do turno desejado da variável de fluxo.\nlet horarios_turnos = global.get(\"turnos_times\");\nlet turno = flow.get(\"memo_turno\");\n\n// Faz uma cópia da lista de horários para evitar modificar o valor original na variável global.\nlet turnos_times = JSON.parse(JSON.stringify(horarios_turnos));\n\n// Obtém a data e hora atuais.\nconst today = new Date();\n// Define o início do dia (00:00:00) para a data atual. Essa data será usada para calcular o tempo em segundos desde a meia-noite.\nconst startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n// Converte o início do dia em formato epoch (segundos desde 1 de janeiro de 1970).\nconst epochTime = Math.floor(startOfDay.getTime() / 1000);\n\n// Define o ajuste de fuso horário em segundos. Neste caso, são 10800 segundos (ou 3 horas).\nconst timezoneOffset = 10800; // 3 horas em segundos\n\n// Define a quantidade de segundos em um dia, para lidar com turnos que ultrapassam a meia-noite.\nconst secondsInDay = 86400; // 24 horas em segundos\n\n// Itera sobre cada turno para calcular e ajustar os horários de início e fim.\nfor (let index = 0; index < turnos_times.length; index++) {\n    // Remove propriedades desnecessárias de cada turno para simplificar os dados.\n    delete turnos_times[index].created_at;\n    delete turnos_times[index].updated_at;\n    delete turnos_times[index].id;\n\n    // Extrai a parte do horário de início do turno (no formato 'HH:MM:SS') para conversão em segundos.\n    const [hours_s, minutes_s, seconds_s] = turnos_times[index].start_time.substring(11, 19).split(':').map(Number);\n    // Converte o horário de início em segundos: (horas * 3600) + (minutos * 60) + segundos.\n    const totalSecondsStart = hours_s * 3600 + minutes_s * 60 + seconds_s;\n\n    // Extrai a parte do horário de fim do turno (também no formato 'HH:MM:SS') para conversão em segundos.\n    const [hours_e, minutes_e, seconds_e] = turnos_times[index].end_time.substring(11, 19).split(':').map(Number);\n    // Converte o horário de fim em segundos: (horas * 3600) + (minutos * 60) + segundos.\n    const totalSecondsEnd = hours_e * 3600 + minutes_e * 60 + seconds_e;\n\n    // Calcula o horário de início absoluto do turno, somando o epoch do dia, o horário de início em segundos e o ajuste de fuso horário.\n    let start_time = new Date((epochTime + totalSecondsStart + timezoneOffset) * 1000);\n    // Calcula o horário de fim absoluto do turno da mesma forma.\n    let end_time = new Date((epochTime + totalSecondsEnd + timezoneOffset) * 1000);\n\n    // Verifica se o horário de início é maior que o horário de fim, indicando que o turno ultrapassa a meia-noite.\n    if (start_time > end_time) {\n        // Ajusta o horário de fim, somando um dia (em segundos) para representar corretamente um turno que termina no dia seguinte.\n        end_time = new Date((epochTime + totalSecondsEnd + timezoneOffset + secondsInDay) * 1000);\n    }\n\n    // Converte os horários de início e fim ajustados para o formato ISO e atualiza no objeto do turno.\n    turnos_times[index].start_time = start_time.toISOString();\n    turnos_times[index].end_time = end_time.toISOString();\n}\n\n// Define a saída da mensagem como o turno específico desejado (indexado com base no número do turno menos 1).\nmsg.payload = turnos_times[turno - 1];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 1060,
        "wires": [
            [
                "4e59058a1dc05ced",
                "a0352ee4d1777d31",
                "bdfe30c73d6909d5",
                "68fb9711bb42b53c"
            ]
        ]
    },
    {
        "id": "07dbdfff6be73712",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "monta resumo de tempos",
        "func": "const data = msg.payload;\n\n// Converte para o formato desejado, agrupando por `mode` e `state`\nconst result = data.reduce((acc, { mode, state, total_active_duration }) => {\n  if (!acc[mode]) acc[mode] = {}; // Cria o modo se ainda não existir\n  acc[mode][state] = Number(parseFloat(total_active_duration)); // Adiciona o tempo do estado ao modo\n  return acc;\n}, {});\n\n// Inicializa `msg.payload` com o objeto `omac`\nmsg.payload = { omac: result };\n\nlet totalProductive = 0;\nlet totalNonProductive = 0;\n\n// Calcula os totais produtivos e não produtivos\nObject.entries(result).forEach(([mode, states]) => {\n  Object.entries(states).forEach(([state, activeMinutes]) => {\n    const minutes = Number(parseFloat(activeMinutes));\n    \n    if (state === \"6\") {\n      totalProductive += minutes;\n    } else {\n      totalNonProductive += minutes;\n    }\n  });\n});\n\n\nlet lastState = flow.get(\"lastState\");\n\nif (lastState && lastState[0] && lastState[0].payload) {\n  const mode = lastState[0].payload.machine_event.payload.mode;\n  const state = lastState[0].payload.machine_event.payload.state;\n\n  // Verifica se mode e state existem em msg.payload.omac antes de somar\n  if (msg.payload.omac[mode] && msg.payload.omac[mode][state] !== undefined) {\n    msg.payload.omac[mode][state] =\n      Number(parseFloat(msg.payload.omac[mode][state])) + Number(parseFloat(lastState[1]));\n  }\n}\n\n// Armazena `msg.payload` no fluxo para acesso posterior\nflow.set(\"temposOEE_parcial\", msg.payload);\n\n\n\n// Adiciona os somatórios ao `msg.payload`\nmsg.payload.somas = {\n  totalProductive: totalProductive,\n  totalNonProductive: totalNonProductive\n};\n\n\n\n// Retorna `msg` atualizado\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 1060,
        "wires": [
            [
                "ed4ab7a8085fafc6"
            ]
        ]
    },
    {
        "id": "a0352ee4d1777d31",
        "type": "postgresql",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "",
        "query": "SELECT *\nFROM machine_events\nORDER BY timestamp DESC\nlimit 1\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1650,
        "y": 1140,
        "wires": [
            [
                "6922a50cc6b7fade"
            ]
        ]
    },
    {
        "id": "471f12bdd9aa1ca9",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "debug 515",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2290,
        "y": 1140,
        "wires": []
    },
    {
        "id": "6922a50cc6b7fade",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "consulta ultimo registro",
        "func": "msg.payload[0].payload = JSON.parse(msg.payload[0].payload)\nflow.set(\"lastState\", msg.payload);\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 1140,
        "wires": [
            [
                "471f12bdd9aa1ca9"
            ]
        ]
    },
    {
        "id": "643e7e1129f458c7",
        "type": "inject",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1960,
        "y": 1360,
        "wires": [
            [
                "844e9b6450179a8e"
            ]
        ]
    },
    {
        "id": "5d5ea873fe77da47",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "debug 516",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2590,
        "y": 1360,
        "wires": []
    },
    {
        "id": "844e9b6450179a8e",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "function 267",
        "func": "let horarios_turnos = global.get(\"turnos_times\");\nlet turno = flow.get(\"memo_turno\");\n\nlet turnos_times = JSON.stringify(horarios_turnos)\nturnos_times = JSON.parse(turnos_times);\n//node.warn(turnos_times);\n\nconst today = new Date();\nconst startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\nconst epochTime = Math.floor(startOfDay.getTime() / 1000); // Converte de milissegundos para segundos\n//node.warn(epochTime); // Exibe a data de hoje às 00:00 em epoch (segundos)\n\nfor (let index = 0; index < turnos_times.length; index++) {\n    delete turnos_times[index].created_at\n    delete turnos_times[index].updated_at\n    delete turnos_times[index].id\n\n    const timePart_start = turnos_times[index].start_time.substring(11, 19); // '06:00:00'\n    // Divide a hora, minuto e segundo\n    const [hours_s, minutes_s, seconds_s] = timePart_start.split(':').map(Number);\n    // Converte para segundos\n    const totalMinutes_start = ((hours_s * 3600) + (minutes_s * 60) + (seconds_s));\n\n\n    const timePart_end = turnos_times[index].end_time.substring(11, 19); // '06:00:00'\n    // Divide a hora, minuto e segundo\n    const [hours_e, minutes_e, seconds_e] = timePart_end.split(':').map(Number);\n    // Converte para segundos\n    const totalMinutes_end = ((hours_e * 3600) + (minutes_e * 60) + (seconds_e));\n\n    //node.warn(totalMinutes_start);\n    //node.warn(totalMinutes_end);\n\n    const start_time = new Date((epochTime + totalMinutes_start)*1000)\n    const end_time = new Date((epochTime + totalMinutes_end)*1000)\n\n  \n\n    turnos_times[index].start_time = start_time.toISOString()\n    turnos_times[index].end_time = end_time.toISOString()\n\n\n\n  \n\n}\n\nmsg.payload = turnos_times[turno-1]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 1360,
        "wires": [
            [
                "2f73ed9e6dd8dc44"
            ]
        ]
    },
    {
        "id": "7037616d8c63ef34",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "temposOEE",
        "func": "let temposOEE_partial = flow.get(\"temposOEE_parcial\");\n\ntemposOEE_partial = JSON.parse(JSON.stringify(temposOEE_partial))\n\n\n\nif (msg.payload.actualMode == 2 && msg.payload.actualState == 6) {\n    temposOEE_partial.somas.totalProductive = temposOEE_partial.somas.totalProductive + (msg.payload.actualDuration)\n} else {\n    temposOEE_partial.somas.totalNonProductive = temposOEE_partial.somas.totalNonProductive + (msg.payload.actualDuration)\n}\n\n\nflow.set(\"temposOEE\", temposOEE_partial);\n\nmsg.payload = temposOEE_partial\n\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 680,
        "wires": [
            [
                "00cc58897ce8d661"
            ]
        ]
    },
    {
        "id": "00cc58897ce8d661",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "debug 517",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.somas",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 680,
        "wires": []
    },
    {
        "id": "68fb9711bb42b53c",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "debug 518",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 1360,
        "wires": []
    },
    {
        "id": "bdfe30c73d6909d5",
        "type": "postgresql",
        "z": "68c6c71bd0ac9406",
        "d": true,
        "g": "867b38a14411d76d",
        "name": "Lista FIltrada Tempo e Maquina",
        "query": "WITH state_intervals AS (\n    SELECT \n        id,\n        timestamp,\n        id_machine,\n        payload,\n        (payload::json->'machine_event'->'payload'->>'mode')::integer AS mode,\n        (payload::json->'machine_event'->'payload'->>'state')::integer AS state,\n        LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp\n    FROM \n        machine_events\n)\nSELECT \n    id,\n    timestamp AS start_time,       -- Hora inicial do estado\n    next_timestamp AS end_time,    -- Hora final do estado\n    id_machine,\n    payload,\n    mode,\n    state,\n    -- Calcula o tempo que o estado ficou ativo em minutos\n    CASE \n        WHEN next_timestamp IS NOT NULL THEN \n            EXTRACT(EPOCH FROM (next_timestamp - timestamp)) / 60  -- Tempo em minutos\n        ELSE \n            NULL\n    END AS active_duration\nFROM \n    state_intervals\nWHERE \n    -- Filtros aplicados na tabela de saída\n    next_timestamp > '{{{msg.payload.start_time}}}'::timestamp  -- start_filter\n    AND timestamp < '{{{msg.payload.end_time}}}'::timestamp   -- end_filter\n    AND id_machine = 1  -- substitua 123 pelo id_machine desejado\nORDER BY \n    timestamp;\n",
        "postgreSQLConfig": "15aa5d80673142f2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1710,
        "y": 1200,
        "wires": [
            [
                "77036d9152fb6b26"
            ]
        ]
    },
    {
        "id": "77036d9152fb6b26",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "debug 519",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2290,
        "y": 1200,
        "wires": []
    },
    {
        "id": "a91a076e0ab378d2",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "debug 520",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850,
        "y": 1000,
        "wires": []
    },
    {
        "id": "ed4ab7a8085fafc6",
        "type": "debug",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "debug 524",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2290,
        "y": 1080,
        "wires": []
    },
    {
        "id": "2b2a64daa13770c5",
        "type": "function",
        "z": "68c6c71bd0ac9406",
        "g": "867b38a14411d76d",
        "name": "Calc Actual Stop",
        "func": "const lastState = flow.get(\"lastState\");\n\nconst lastTime = new Date(lastState[0].timestamp);\nconst currentTime = new Date();\n\nnode.status({ fill: \"red\", shape: \"ring\", text: lastState[1] });\n\n// Converte para segundos\nconst lastTimeInSeconds = Math.floor(lastTime.getTime() / 1000);\nconst currentTimeInSeconds = Math.floor(currentTime.getTime() / 1000);\n\nconst timeDifference = (currentTimeInSeconds - lastTimeInSeconds) / 60;\n\nmsg.payload ={}\n\nmsg.payload.actualDuration = lastState[1] = timeDifference\nmsg.payload.actualState = lastState[0].payload.machine_event.payload.state\nmsg.payload.actualMode = lastState[0].payload.machine_event.payload.mode\n\n\nflow.set(\"lastState\", lastState);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 680,
        "wires": [
            [
                "7037616d8c63ef34"
            ]
        ]
    },
    {
        "id": "cb4950465ed06e56",
        "type": "file in",
        "z": "f46fe07098dce9ef",
        "g": "c8424e2346af4976",
        "name": "Lista Falhas",
        "filename": "alm_list",
        "filenameType": "str",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": true,
        "x": 690,
        "y": 100,
        "wires": [
            [
                "47aa9e3bf6a744a2"
            ]
        ]
    },
    {
        "id": "47aa9e3bf6a744a2",
        "type": "function",
        "z": "f46fe07098dce9ef",
        "g": "c8424e2346af4976",
        "name": "find line",
        "func": "let array_cod = msg.payload.split(',')\nlet cod = Number(array_cod[0])\n\nlet id = msg.auxfalha\n\n//node.warn(id);\n\nif (cod == id) {\n    let str_cod = array_cod[1]\n    let class_cod = array_cod[2]\n    let programada = Boolean(Number(array_cod[3]))\n    let plcpaletizadora = global.get(\"plcpaletizadora\");\n\n   \n\n    plcpaletizadora.statechanged_id = class_cod\n    plcpaletizadora.statechanged_reason = str_cod\n    plcpaletizadora.programada = programada\n\n    //arrange object\n\n    // delete plcenchedora.ZZZZZZZZZZudtZIA8\n    // delete plcenchedora.ZZZZZZZZZZudtZIA11\n    // delete plcenchedora.ZZZZZZZZZZudtZIA14\n    // delete plcenchedora.ZZZZZZZZZZudtZIA20\n    global.set(\"plcpaletizadora\", plcpaletizadora);\n\n    msg.payload = plcpaletizadora\n\n    return msg\n\n}\n\n\n//return msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 100,
        "wires": [
            [
                "5e3b4e6b62d0a0b0"
            ]
        ]
    },
    {
        "id": "5e3b4e6b62d0a0b0",
        "type": "debug",
        "z": "f46fe07098dce9ef",
        "g": "c8424e2346af4976",
        "name": "Mostrar linha",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1170,
        "y": 100,
        "wires": []
    },
    {
        "id": "c29b5266e8bbf963",
        "type": "eth-ip in",
        "z": "f46fe07098dce9ef",
        "g": "c8424e2346af4976",
        "endpoint": "4556d5bb4d9f69bc",
        "mode": "single",
        "variable": "dados_ZIA",
        "program": "",
        "name": "",
        "gatherMetrics": true,
        "includeTimestamp": true,
        "x": 160,
        "y": 100,
        "wires": [
            [
                "bd83c3e88718c9a6"
            ]
        ]
    },
    {
        "id": "bd83c3e88718c9a6",
        "type": "function",
        "z": "f46fe07098dce9ef",
        "g": "c8424e2346af4976",
        "name": "function 2",
        "func": "let ant_plc = global.get(\"plcpaletizadora\") || 0;\nlet atual_plc = msg.payload.value\n// delete atual_plc.ZZZZZZZZZZudtZIA8\n// delete atual_plc.ZZZZZZZZZZudtZIA11\n// delete atual_plc.ZZZZZZZZZZudtZIA14\n// delete atual_plc.ZZZZZZZZZZudtZIA20\n\nglobal.set(\"plcpaletizadora\", msg.payload.value);\n\n//verifica se houve mudanca no codigo de erro e estado do equipamento\nif (atual_plc.aux_id_falha != ant_plc.aux_id_falha) { \n    msg.auxfalha = atual_plc.aux_id_falha\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 100,
        "wires": [
            [
                "cb4950465ed06e56"
            ]
        ]
    },
    {
        "id": "3e3199eee0a78822",
        "type": "inject",
        "z": "f46fe07098dce9ef",
        "g": "92c480224b54cf8a",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 300,
        "wires": [
            [
                "24154bf98161f7b2"
            ]
        ]
    },
    {
        "id": "24154bf98161f7b2",
        "type": "function",
        "z": "f46fe07098dce9ef",
        "g": "92c480224b54cf8a",
        "name": "CONFIG",
        "func": "//configuracaao de linha\n\nlet config = {}\n\nconfig.machine_name = \"paletizadora\"\n\nconfig.factory = 1\nconfig.machine_id = 2\nconfig.token_machine = \"Bearer \" + \"aab9a70fe7801f480da67cbc9086c33f5312950e\"\nconfig.token_line = \"Bearer \" + \"80d68bdbe2d063fede52fce95459000bd19880f6\"\nconfig.url = \"http://192.168.1.16:3003\"\nconfig.url_machine = config.url + \"/machine_events\"\nconfig.url_line = config.url + \"/production_line_events\"\nconfig.send = false /// habilita POST\n\nflow.set(\"config\", config);\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 300,
        "wires": [
            [
                "14cec4408b3cf1c9"
            ]
        ]
    },
    {
        "id": "14cec4408b3cf1c9",
        "type": "debug",
        "z": "f46fe07098dce9ef",
        "g": "92c480224b54cf8a",
        "name": "debug 439",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 300,
        "wires": []
    },
    {
        "id": "d1759e679c2ab325",
        "type": "function",
        "z": "f46fe07098dce9ef",
        "g": "68264f585bb5e8a4",
        "name": "Turnos, Tempos Acumulados",
        "func": "\n\n\nlet msg1 = new Object()\nlet msg2 = new Object()\nlet msg3 = new Object()\nlet config = flow.get(\"config\");\nlet a\n\n\nlet turno = global.get(\"turno_\" + config.factory)\nlet memo_turno = flow.get(\"memo_turno\")\n\n\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\n\nlet sm_atual = {\n    \"state\": dadosPlc.state,\n    \"mode\": dadosPlc.mode\n}\nflow.set(\"sm_atual\", sm_atual);\nlet sm_anterior = flow.get(\"sm_anterior\") || flow.set(\"sm_anterior\", sm_atual)\n\n\nlet tempoTranscorrido\nif (memo_turno == turno.turno) { //&& turno.turno != 0\n    a = 1\n\n    flow.set(\"tempoTranscorrido\", turno.tempoTranscorrido);\n    tempoTranscorrido = turno.tempoTranscorrido\n\n    calculosOEE()\n\n} else {\n    a = 2\n\n    tempoTranscorrido = flow.get(\"tempoTranscorrido\") || 0\n\n}\n\n\n\nlet parada = flow.get(\"parada\") || { \"hora\": 0, \"state\": \"0\", \"mode\": \"0\", \"active\": false, \"tParadaAtual\": 0 }\n\n\n\n// Atualiza o tempo da parada atual\nif ((sm_atual.state != 6 || sm_atual.mode != 2) && turno.turno != 0) {\n    let agora = new Date().getTime()\n    let tParadaAtual = agora - parada.hora\n    parada.tParadaAtual = tParadaAtual / 60 / 1000\n    flow.set(\"parada\", parada);\n\n}\n\n\n\n\n\n// Aciona saida indicando que houve mudanca do modo de operacao\nif (sm_atual.mode != sm_anterior.mode || sm_atual.state != sm_anterior.state) {\n    //Verifica se a maquina saiu do estado Execute\n    //Sempre que a maquina sair de execute devemos anotar o horario da parada\n    if ((sm_anterior.state == 6 && sm_anterior.mode == 2) && (sm_atual.state != sm_anterior.state || sm_atual.mode != sm_anterior.mode)) {\n        console.log(\"NÃO PRODUZINDO\")\n        anotaInicoParada()\n        msg2 = null\n    } else if ((sm_anterior.state != 6 || sm_anterior.mode != 2) && (sm_atual.state == 6 && sm_atual.mode == 2)) {\n        console.log(\"PRODUZINDO\")\n        msg2.payload = consolidaParada()\n        calculosOEE()\n        flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n    }\n    flow.set(\"sm_anterior\", sm_atual)\n\n\n    return [null, msg2]\n}\n\n\n\n\n\n/// rotinas que devem ser executadas na troca de turno\nif (memo_turno != turno.turno) {\n    msg1 = null\n    msg2 = null\n\n    console.log(\"TrocaTurno\")\n    if (memo_turno != 0) {\n        console.log(\"Fim turno \" + memo_turno)\n        msg1 = { payload: 1 }\n\n        if (parada.active == true) { // se no fim do turno estiver em parada consolida\n            msg2 = {}\n            msg2.payload = {}\n            msg2.payload = consolidaParada()\n\n            calculosOEE()\n\n            flow.set(\"paradaOEE\", msg2.payload.machine_event.payload);\n            if (turno.turno != 0) { // se entrar em um novo turno reinicia a parada\n                console.log(\"Inicio turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n                anotaInicoParada()\n\n            }\n        } else {\n            if (turno.turno != 0) {\n                console.log(\"Iniccio Turno \" + turno.turno)\n                ////Zera os valores para iniciar novo turno\n                //flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n            }\n        }\n\n\n        calculosOEE()\n        let calculoOEE = flow.get(\"calculoOEE\");\n        flow.set(\"fimTurnoOEE\", calculoOEE);\n        flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n\n\n\n    } else if (memo_turno == 0) {\n        msg1 = null\n        console.log(\"verificaAnotacaoTurno\") // verifica e cria msg2 se necssario e zera anotacao de parada\n\n        verificaAnotacaoInicioTurno()\n\n    } else {\n\n        msg1 = null\n    }\n\n    //anota registro de turno\n\n\n\n    flow.set(\"memo_turno\", turno.turno)\n\n    return [msg1, msg2]\n}\nmsg3.payload = calculosOEE()\nmsg3.payload.machine_event.event_type_id = 6\n\n\nreturn [null, null, msg3]\n\n\n\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n\nfunction anotaInicoParada() {\n    console.log(\"inicio parada\")\n    let parada = {\n        \"hora\": new Date(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode\n    }\n    flow.set(\"parada\", {\n        \"hora\": new Date().getTime(),\n        \"state\": sm_atual.state,\n        \"mode\": sm_atual.mode,\n        \"active\": true\n    });\n    //console.clear()\n    //console.log(\"Inicio da Parada:\" + parada.hora.getHours() + \":\" + parada.hora.getMinutes())\n    return {\n        \"InicoParada\": parada.hora.getTime(),\n        \"FimParada\": 0,\n        \"tParada\": 0,\n        \"ID\": \"ID\",\n        \"Reason\": null,\n        \"ModeReason\": new Number(parada.mode),\n        \"StateReason\": new Number(parada.state),\n        \"Programada\": null,\n        \"Equip\": name_var_global\n    }\n}\n\nfunction consolidaParada() {\n\n    console.log(\"fim parada\")\n    let retorno = new Date()\n    let parada = flow.get(\"parada\") || 0\n    let tParada = (retorno.getTime() - parada.hora) / 1000 / 60\n    let paradasSoma = flow.get(\"paradasSoma\") || flow.set(\"paradasSoma\", { \"Prog\": 0, \"Nprog\": 0 })\n\n    if (dadosPlc.programada == \"true\") {\n        paradasSoma.Prog = paradasSoma.Prog + tParada\n    } else {\n        paradasSoma.Nprog = paradasSoma.Nprog + tParada\n    }\n    flow.set(\"paradasSoma\", paradasSoma);\n    parada.active = false\n    flow.set(\"parada\", parada);\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    return {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 4,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": {\n                \"InicoParada\": parada.hora,\n                \"FimParada\": retorno.getTime(),\n                \"tParada\": Number(tParada.toFixed(2)),\n                \"ID\": Number(dadosPlc.statechanged_id),\n                \"Reason\": dadosPlc.statechanged_reason,\n                \"ModeReason\": new Number(parada.mode),\n                \"StateReason\": new Number(parada.state),\n                \"Programada\": dadosPlc.programada,\n                \"turno_atual\": turno.turno,\n                \"equip\": config.machine_name\n            }\n        }\n    }\n}\n\nfunction calculosOEE() {\n\n\n    //msg.filename = \".\\supZIA\\registroTurno_\" + name_var_global + \".json\"\n\n    let paradasSoma = flow.get(\"paradasSoma\") || { \"Prog\": 0, \"Nprog\": 0 }\n    let dados_oee = {}\n    let tNProg = Number(paradasSoma.Nprog)\n    let tProg = Number(paradasSoma.Prog)\n    let tProducao = Number(tempoTranscorrido - (tNProg + tProg))\n\n    if (dadosPlc.mode == 2 && dadosPlc.state == 6) {\n        dados_oee.statusMachine = \"Rodando\"\n    } else dados_oee.statusMachine = \"Parada\"\n\n    ////////////\n    dados_oee.statusConexao = true\n    dados_oee.mode = Number(dadosPlc.mode)\n    dados_oee.state = Number(dadosPlc.state)\n    dados_oee.rNominalSpeed = Number(dadosPlc.rNominalSpeed)\n    dados_oee.rSetSpeed = Number(dadosPlc.rSetSpeed)\n    dados_oee.rActualSpeed = Number(dadosPlc.rActualSpeed)\n    dados_oee.strRecipeName = String(dadosPlc.strRecipeName)\n    dados_oee.strBottle = String(dadosPlc.strBottle)\n    dados_oee.strCap = String(dadosPlc.strCap)\n    dados_oee.diProductionCounter = Number(dadosPlc.diProductionCounter)\n    dados_oee.diCounterReject_r1 = Number(dadosPlc.diCounterReject_r1)\n    dados_oee.diCounterReject_r2 = Number(dadosPlc.diCounterReject_r2)\n    dados_oee.iActualRecipe = Number(dadosPlc.iActualRecipe)\n    dados_oee.tempoTranscorrido = Number(tempoTranscorrido.toFixed(2))\n    dados_oee.percDisp = (tempoTranscorrido - (tProg + tNProg)) / (tempoTranscorrido - tProg) * 100\n    dados_oee.percDisp = Number(dados_oee.percDisp.toFixed(2))\n    dados_oee.percEfic = (dados_oee.diProductionCounter) / ((tProducao * dados_oee.rNominalSpeed) / 60) * 100\n    dados_oee.percEfic = Number(dados_oee.percEfic.toFixed(2))\n    dados_oee.percQual = (((dados_oee.diProductionCounter) - (dados_oee.diCounterReject_r1 + dados_oee.diCounterReject_r2)) / dados_oee.diProductionCounter) * 100\n    dados_oee.percQual = Number(dados_oee.percQual.toFixed(2))\n    dados_oee.percOEE = dados_oee.percDisp * dados_oee.percEfic * dados_oee.percQual / 10000\n    dados_oee.percOEE = Number(dados_oee.percOEE.toFixed(2))\n\n    dados_oee.turno = Number(turno.turno)\n    dados_oee.tempoParadaProgramada = Number(tProg.toFixed(2))\n    dados_oee.tempoParadaNaoProgramada = Number(tNProg.toFixed(2))\n    dados_oee.dimetaProduzidos = 100000\n    dados_oee.rmetaPerf = 95.00\n    dados_oee.rmetaDisp = 90.00\n    dados_oee.rmetaQual = 99.00\n    dados_oee.rmetaOEE = 90.00\n    dados_oee.equip = String(config.machine_name)\n\n    ////teste limites - ocorre quando o node é desligado\n    if (dados_oee.percDisp < 0) {\n        dados_oee.percDisp = 0\n    } else if (dados_oee.percDisp > 100) {\n        dados_oee.percDisp = 100\n    }\n\n    if (dados_oee.percEfic < 0) {\n        dados_oee.percEfic = 0\n    } else if (dados_oee.percEfic > 100) {\n        dados_oee.percEfic = 100\n    }\n\n    if (isNaN(dados_oee.percEfic)) {\n        dados_oee.percEfic = 0;\n    }\n\n    if (dados_oee.percQual < 0) {\n        dados_oee.percQual = 0\n    } else if (dados_oee.percQual > 100) {\n        dados_oee.percQual = 100\n    }\n\n    if (isNaN(dados_oee.percQual)) {\n        dados_oee.percQual = 0;\n    }\n\n    if (dados_oee.percOEE < 0) {\n        dados_oee.percOEE = 0\n    } else if (dados_oee.percOEE > 100) {\n        dados_oee.percOEE = 100\n    }\n\n    if (isNaN(dados_oee.percOEE)) {\n        dados_oee.percOEE = 0;\n    }\n\n    const d = new Date();\n    let minutes = d.getMinutes();\n    let agora = new Date()\n    let calculo = {\n        \"machine_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 3,\n            //\"timestamp(3i)\": d.getDay(),\n            //\"timestamp(2i)\": d.getMonth(),\n            //\"timestamp(1i)\": d.getFullYear(),\n            //\"timestamp(4i)\": d.getHours(),\n            //\"timestamp(5i)\": d.getMinutes(),\n            \"payload\": dados_oee\n        }\n    }\n\n    flow.set(\"calculoOEE\", calculo);\n\n    return calculo\n\n\n\n}\n\nfunction verificaAnotacao() {\n\n}\n\n\nfunction verificaAnotacaoInicioTurno() {\n    console.log(\"Inicio Turno \" + turno.turno)\n    ////Zera os valores para iniciar novo turno\n    flow.set(\"paradasSoma\", { Prog: 0, Nprog: 0 });\n    if (sm_atual.state == 6 && sm_atual.mode == 2) {\n        //PRODUZINDO\n    } else {\n        //NAO PRODUZINDO\n        anotaInicoParada()\n        msg2 = null\n    }\n\n\n\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 720,
        "wires": [
            [
                "e4525bfc1bc67b17"
            ],
            [
                "d29ecd7e6464b7ec"
            ],
            [
                "9c2ea5624f837e72"
            ]
        ]
    },
    {
        "id": "7cbf76c805b989b0",
        "type": "inject",
        "z": "f46fe07098dce9ef",
        "g": "68264f585bb5e8a4",
        "name": "cycle",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 720,
        "wires": [
            [
                "d1759e679c2ab325"
            ]
        ]
    },
    {
        "id": "f1090e0bc6e6adde",
        "type": "comment",
        "z": "f46fe07098dce9ef",
        "g": "c3f2f84803bc78c8",
        "name": "Registro Fim da Parada",
        "info": "",
        "x": 880,
        "y": 780,
        "wires": []
    },
    {
        "id": "217c5f54fdf153e2",
        "type": "http request",
        "z": "f46fe07098dce9ef",
        "g": "c3f2f84803bc78c8",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1610,
        "y": 840,
        "wires": [
            [
                "7be583ebbf219649"
            ]
        ]
    },
    {
        "id": "7be583ebbf219649",
        "type": "debug",
        "z": "f46fe07098dce9ef",
        "g": "c3f2f84803bc78c8",
        "name": "debug 441",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 1790,
        "y": 840,
        "wires": []
    },
    {
        "id": "d29ecd7e6464b7ec",
        "type": "function",
        "z": "f46fe07098dce9ef",
        "g": "c3f2f84803bc78c8",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 840,
        "wires": [
            [
                "217c5f54fdf153e2"
            ]
        ]
    },
    {
        "id": "e4525bfc1bc67b17",
        "type": "function",
        "z": "f46fe07098dce9ef",
        "g": "f31e720ee80bfd05",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 560,
        "wires": [
            [
                "7647f1a64a742173",
                "571ea843c213a724"
            ]
        ]
    },
    {
        "id": "09f25d0473380597",
        "type": "comment",
        "z": "f46fe07098dce9ef",
        "g": "f31e720ee80bfd05",
        "name": "Registro Troca de Turno",
        "info": "",
        "x": 880,
        "y": 460,
        "wires": []
    },
    {
        "id": "eac21530c0fe6bce",
        "type": "http request",
        "z": "f46fe07098dce9ef",
        "g": "f31e720ee80bfd05",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "",
                "valueType": "other",
                "valueValue": ""
            }
        ],
        "x": 1610,
        "y": 560,
        "wires": [
            [
                "3e1d08bd4eec3124"
            ]
        ]
    },
    {
        "id": "3e1d08bd4eec3124",
        "type": "debug",
        "z": "f46fe07098dce9ef",
        "g": "f31e720ee80bfd05",
        "name": "debug 442",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 1790,
        "y": 560,
        "wires": []
    },
    {
        "id": "f1572b774033e546",
        "type": "comment",
        "z": "f46fe07098dce9ef",
        "g": "f31e720ee80bfd05",
        "name": "Turno + Tempo Transcorrido",
        "info": "",
        "x": 900,
        "y": 620,
        "wires": []
    },
    {
        "id": "7647f1a64a742173",
        "type": "function",
        "z": "f46fe07098dce9ef",
        "g": "f31e720ee80bfd05",
        "name": "Get fimTurnoOEE",
        "func": "msg.payload = flow.get(\"fimTurnoOEE\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 560,
        "wires": [
            [
                "6f3651e797427b7b",
                "bef0860f190cb83a"
            ]
        ]
    },
    {
        "id": "6f3651e797427b7b",
        "type": "function",
        "z": "f46fe07098dce9ef",
        "g": "f31e720ee80bfd05",
        "name": "statusMachineId",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.machine_event.payload.statusMachineId = 2\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.machine_event.payload.statusMachineId = 2\n            break;\n        case 5:\n            msg.payload.machine_event.payload.statusMachineId = 5\n            break;\n        case 6:\n            msg.payload.machine_event.payload.statusMachineId = 1\n            break;\n        case 9:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 560,
        "wires": [
            [
                "eac21530c0fe6bce"
            ]
        ]
    },
    {
        "id": "9c2ea5624f837e72",
        "type": "function",
        "z": "f46fe07098dce9ef",
        "g": "fe981cd3aac4ad16",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 980,
        "wires": [
            [
                "8accc8a1ead3aca5",
                "b838acfd6f03cfda"
            ]
        ]
    },
    {
        "id": "4f0bf9fa0d33df5d",
        "type": "http request",
        "z": "f46fe07098dce9ef",
        "g": "fe981cd3aac4ad16",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1570,
        "y": 980,
        "wires": [
            [
                "b7713f58325bd9f3"
            ]
        ]
    },
    {
        "id": "b7713f58325bd9f3",
        "type": "debug",
        "z": "f46fe07098dce9ef",
        "g": "fe981cd3aac4ad16",
        "name": "debug 443",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 1790,
        "y": 980,
        "wires": []
    },
    {
        "id": "8accc8a1ead3aca5",
        "type": "delay",
        "z": "f46fe07098dce9ef",
        "g": "fe981cd3aac4ad16",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "120",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1080,
        "y": 980,
        "wires": [
            [
                "b5cbe1c30fedefb6"
            ]
        ]
    },
    {
        "id": "571ea843c213a724",
        "type": "function",
        "z": "f46fe07098dce9ef",
        "g": "85e3c8efc5f61295",
        "name": "Config Line Troca de Turno",
        "func": "msg.payload = flow.get(\"fimTurnoOEE\");\n\nlet config = flow.get(\"config\");\nif (config.send == true) {\n\nlet agora = new Date()\n\n    //*DEMO BEGIN */\n    msg.payload.machine_event.payload.diCounter = {\n        \"1\": (24000 + Math.random() * 500).toFixed(0),\n        \"2\": (24000 + Math.random() * 500).toFixed(0),\n        \"3\": (25000 + Math.random() * 500).toFixed(0),\n        \"4\": (24000 + Math.random() * 500).toFixed(0)\n    }\n    //*DEMO END */\n\n    msg.payload = {\n        \"production_line_event\": {\n            \"timestamp(1i)\": agora.getFullYear().toString(),\n            \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n            \"timestamp(3i)\": agora.getDate().toString(),\n            \"timestamp(4i)\": agora.getHours().toString(),\n            \"timestamp(5i)\": agora.getMinutes().toString(),\n            \"timestamp(6i)\": agora.getSeconds().toString(),\n            \"event_type_id\": 2,\n            \"payload\": msg.payload.machine_event.payload\n        }\n    }\n    /////********************************************* */\n    msg.url = config.url_line \n    msg.headers = {};\n    msg.headers['Authorization'] = config.token_line\n\n\n\n    return msg;\n}\n//return msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 360,
        "wires": [
            [
                "04d3e6172b506258"
            ]
        ]
    },
    {
        "id": "04d3e6172b506258",
        "type": "http request",
        "z": "f46fe07098dce9ef",
        "g": "85e3c8efc5f61295",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1510,
        "y": 360,
        "wires": [
            [
                "d09bd9609a2e6c29"
            ]
        ]
    },
    {
        "id": "d09bd9609a2e6c29",
        "type": "debug",
        "z": "f46fe07098dce9ef",
        "g": "85e3c8efc5f61295",
        "name": "debug 444",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 1770,
        "y": 360,
        "wires": []
    },
    {
        "id": "2815940960a8b447",
        "type": "comment",
        "z": "f46fe07098dce9ef",
        "g": "85e3c8efc5f61295",
        "name": "Registro Fim de Turno Linha",
        "info": "",
        "x": 1140,
        "y": 300,
        "wires": []
    },
    {
        "id": "1136ecc15b611154",
        "type": "comment",
        "z": "f46fe07098dce9ef",
        "g": "f31e720ee80bfd05",
        "name": "Reset Counters",
        "info": "",
        "x": 1360,
        "y": 680,
        "wires": []
    },
    {
        "id": "df24d2e2596fb3a7",
        "type": "eth-ip out",
        "z": "f46fe07098dce9ef",
        "g": "f31e720ee80bfd05",
        "endpoint": "4556d5bb4d9f69bc",
        "variable": "cmdZIA",
        "program": "",
        "name": "",
        "x": 1620,
        "y": 640,
        "wires": []
    },
    {
        "id": "bef0860f190cb83a",
        "type": "function",
        "z": "f46fe07098dce9ef",
        "g": "f31e720ee80bfd05",
        "name": "set reset Counters",
        "func": "msg.payload ={}\nmsg.payload.xResetCounter = 1\nmsg.payload.xResetReject_r1 = 1\nmsg.payload.xResetReject_r2 = 1\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 640,
        "wires": [
            [
                "df24d2e2596fb3a7"
            ]
        ]
    },
    {
        "id": "ef666b4a3582ea93",
        "type": "inject",
        "z": "f46fe07098dce9ef",
        "g": "f31e720ee80bfd05",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1150,
        "y": 640,
        "wires": [
            [
                "bef0860f190cb83a"
            ]
        ]
    },
    {
        "id": "b5cbe1c30fedefb6",
        "type": "function",
        "z": "f46fe07098dce9ef",
        "g": "fe981cd3aac4ad16",
        "name": "statusMachineId",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\nif (mode != 2) {\n    msg.payload.machine_event.payload.statusMachineId = 3\n} else {\n    switch (state) {\n        case 2:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        case 5:\n            msg.payload.machine_event.payload.statusMachineId = 5\n            break;\n        case 6:\n            msg.payload.machine_event.payload.statusMachineId = 1\n            break;\n        case 9:\n            msg.payload.machine_event.payload.statusMachineId = 3\n            break;\n        default:\n    }\n}\nnode.status({ fill: \"red\", shape: \"ring\", text: msg.payload.machine_event.payload.statusMachineId });\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 980,
        "wires": [
            [
                "4f0bf9fa0d33df5d"
            ]
        ]
    },
    {
        "id": "b838acfd6f03cfda",
        "type": "function",
        "z": "f46fe07098dce9ef",
        "g": "fe981cd3aac4ad16",
        "name": "function 258",
        "func": "let ant_mode = context.get(\"ant_mode\") || 0;\nlet ant_state = context.get(\"ant_state\") || 0;\nlet config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\nlet dadosPlc = global.get(name_var_global)\nlet mode = dadosPlc.mode\nlet state = dadosPlc.state\n\nif (ant_mode != mode || ant_state != state) {\n    context.set(\"ant_mode\", mode);\n    context.set(\"ant_state\", state);\n    return msg\n}\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1020,
        "wires": [
            [
                "b5cbe1c30fedefb6"
            ]
        ]
    },
    {
        "id": "0236e42cdd8dc2b3",
        "type": "debug",
        "z": "10ef8279905934fb",
        "name": "debug 433",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 2960,
        "wires": []
    },
    {
        "id": "676ba2608b785a1a",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "0c1043edee8ca81d",
        "name": "",
        "props": [
            {
                "p": "payload.path",
                "v": "./supZIA/OcorrenciaParadas.json",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2290,
        "y": 560,
        "wires": [
            [
                "0870debd4edab50f"
            ]
        ]
    },
    {
        "id": "32edecb7d8f2c6a1",
        "type": "debug",
        "z": "10ef8279905934fb",
        "g": "0c1043edee8ca81d",
        "name": "debug 434",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3600,
        "y": 560,
        "wires": []
    },
    {
        "id": "0870debd4edab50f",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "0c1043edee8ca81d",
        "name": "Read File First Line",
        "func": "let path = msg.payload.path;  // Atribui o caminho do arquivo à variável 'path' a partir da propriedade 'path' do objeto 'payload' no objeto 'msg'\nprocessLineByLine();  // Chama a função 'processLineByLine'\n\nasync function processLineByLine() {\n    // Cria uma interface de leitura de linha a linha para o arquivo no caminho especificado\n    // @ts-ignore\n    const rl = readline.createInterface({\n        input: fs.createReadStream(path),\n        crlfDelay: Infinity\n    });\n    // Loop através de cada linha do arquivo\n    for await (const line of rl) {\n        msg.payload = line;  // Define a propriedade 'payload' do objeto 'msg' como a linha atual\n        node.send(msg);  // Envia o objeto 'msg' com a linha atual para a próxima etapa do fluxo\n        node.done();  // Indica que o nó terminou de processar a entrada atual\n        break;  // Para o loop depois de processar a primeira linha\n    }\n    // Fecha a interface de leitura de linha a linha e o stream de arquivo\n    rl.close();\n    fs.createReadStream(path).close();\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "lineReader",
                "module": "line-reader"
            },
            {
                "var": "readline",
                "module": "readline"
            }
        ],
        "x": 2590,
        "y": 560,
        "wires": [
            [
                "32edecb7d8f2c6a1"
            ]
        ]
    },
    {
        "id": "e75cf5a9404125c5",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "0c1043edee8ca81d",
        "name": "Delete First Line",
        "func": "let path = msg.payload.path;  // Atribui o caminho do arquivo à variável 'path' a partir da propriedade 'path' do objeto 'payload' no objeto 'msg'\n\n// Lê o conteúdo do arquivo\nlet data = fs.readFileSync(path, 'utf-8');\n\n// Remove a primeira linha do conteúdo\ndata = data.split('\\n').slice(1).join('\\n');\n\n// Escreve o conteúdo atualizado de volta para o arquivo\nfs.writeFileSync(path, data);\n\nmsg.payload = {};  // Cria um objeto vazio para a propriedade 'payload' do objeto 'msg'\nmsg.payload.DeleteDone = 1;  // Define a propriedade 'DeleteDone' do objeto 'payload' no objeto 'msg' como 1 para indicar que a primeira linha foi removida com sucesso\n\nreturn msg;  // Retorna o objeto 'msg' atualizado com a propriedade 'payload' contendo 'DeleteDone' definido como 1\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 2580,
        "y": 640,
        "wires": [
            [
                "a22970a200ef8775"
            ]
        ]
    },
    {
        "id": "c436c8984633edaa",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "0c1043edee8ca81d",
        "name": "Count Lines",
        "func": "let path = msg.payload.path  // atribui o caminho do arquivo à variável 'path'\nmsg.payload = {}  // cria um objeto vazio para a propriedade 'payload' do objeto 'msg'\ncountLines();  // chama a função 'countLines' para contar o número de linhas no arquivo\n\n// função para contar o número de linhas no arquivo\nasync function countLines() {\n    const fileStream = fs.createReadStream(path);  // cria um fluxo de leitura do arquivo\n    // @ts-ignore\n    const rl = readline.createInterface({  // cria uma interface de leitura de linha para ler o arquivo\n        input: fileStream,  // define o fluxo de leitura do arquivo como entrada\n        crlfDelay: Infinity  // define o atraso de CR/LF como infinito para que cada linha seja lida completamente\n    });\n\n    let count = 0;  // inicializa a variável 'count' com o valor 0\n\n    // lê o arquivo linha por linha\n    for await (const line of rl) {\n        count++;  // incrementa a variável 'count' em 1 para cada linha lida\n    }\n    console.log(`O arquivo tem ${count} linhas.`);  // imprime no console o número de linhas do arquivo\n    msg.payload.numLines = 0  // atribui 0 à propriedade 'numLines' do objeto 'payload' no objeto 'msg'\n    msg.payload.numLines = count  // atribui o número de linhas contadas à propriedade 'numLines' do objeto 'payload' no objeto 'msg'\n    node.send(msg)  // envia o objeto 'msg' atualizado para o próximo nó no fluxo\n    node.done  // sinaliza que o nó concluiu sua execução\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "readline",
                "module": "readline"
            }
        ],
        "x": 2570,
        "y": 600,
        "wires": [
            [
                "85ab39b2f5274d39"
            ]
        ]
    },
    {
        "id": "85ab39b2f5274d39",
        "type": "debug",
        "z": "10ef8279905934fb",
        "g": "0c1043edee8ca81d",
        "name": "debug 435",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3600,
        "y": 600,
        "wires": []
    },
    {
        "id": "a22970a200ef8775",
        "type": "debug",
        "z": "10ef8279905934fb",
        "g": "0c1043edee8ca81d",
        "name": "debug 436",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3600,
        "y": 640,
        "wires": []
    },
    {
        "id": "6ed1cd52e6f81784",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "0c1043edee8ca81d",
        "name": "",
        "props": [
            {
                "p": "payload.path",
                "v": "./supZIA/OcorrenciaParadas.json",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2290,
        "y": 640,
        "wires": [
            [
                "e75cf5a9404125c5"
            ]
        ]
    },
    {
        "id": "80166d2223971ccd",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "0c1043edee8ca81d",
        "name": "",
        "props": [
            {
                "p": "payload.path",
                "v": "./supZIA/OcorrenciaParadas.json",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2290,
        "y": 600,
        "wires": [
            [
                "c436c8984633edaa"
            ]
        ]
    },
    {
        "id": "1a80cbdc4c1c5198",
        "type": "comment",
        "z": "10ef8279905934fb",
        "g": "0c1043edee8ca81d",
        "name": "Rotinas de Arquivo",
        "info": "Le primeira linha do arquivo\nConta numero de linhas\nDeleta primeira linha",
        "x": 2730,
        "y": 680,
        "wires": []
    },
    {
        "id": "c0e11ef2525e6c66",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "bc3b7c66ae6a3b74",
        "name": "Add Property",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\n\n\n\nlet dados_plc = global.get(name_var_global) || {};\n//msg.payload = {}\nlet k=Object.keys(msg.machine)\nlet v =Object.values(msg.machine)\n\ndados_plc[String(k)]=v.toString()\n\nglobal.set(name_var_global, dados_plc);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3890,
        "y": 2800,
        "wires": [
            [
                "4b96423a0a26f93f"
            ]
        ]
    },
    {
        "id": "93350edacf2141a6",
        "type": "debug",
        "z": "10ef8279905934fb",
        "g": "bc3b7c66ae6a3b74",
        "name": "debug 437",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 4520,
        "y": 2740,
        "wires": []
    },
    {
        "id": "4b96423a0a26f93f",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "bc3b7c66ae6a3b74",
        "name": "Atualiza contexto global",
        "func": "let config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\n\n\nmsg.payload = global.get(name_var_global);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4150,
        "y": 2800,
        "wires": [
            [
                "fdc61b5730aad40c"
            ]
        ]
    },
    {
        "id": "404cf849585cfce0",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "bc3b7c66ae6a3b74",
        "name": "statechanged_id",
        "func": "msg.machine = {}\nmsg.machine.statechanged_id = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2660,
        "y": 2640,
        "wires": [
            [
                "c0e11ef2525e6c66"
            ]
        ]
    },
    {
        "id": "33c033e7803825e7",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "bc3b7c66ae6a3b74",
        "name": "statechanged_reason",
        "func": "msg.machine = {}\nmsg.machine.statechanged_reason = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2680,
        "y": 2700,
        "wires": [
            [
                "c0e11ef2525e6c66"
            ]
        ]
    },
    {
        "id": "61a756e66186ee1b",
        "type": "comment",
        "z": "10ef8279905934fb",
        "g": "bc3b7c66ae6a3b74",
        "name": "Dados para simulação",
        "info": "# Simulação\n## Simulação dos valores que sao adquiridos do PLC",
        "x": 2660,
        "y": 1620,
        "wires": []
    },
    {
        "id": "fdc61b5730aad40c",
        "type": "delay",
        "z": "10ef8279905934fb",
        "g": "bc3b7c66ae6a3b74",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 4370,
        "y": 2800,
        "wires": [
            [
                "93350edacf2141a6",
                "eed04eb30c58ef0c"
            ]
        ]
    },
    {
        "id": "9f069734b8759bc9",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c31b818659136ed3",
        "name": "2 - Stopped",
        "props": [
            {
                "p": "machine.state",
                "v": "2",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3030,
        "y": 1840,
        "wires": [
            [
                "4ef1e214f3b49a86"
            ]
        ]
    },
    {
        "id": "4ef1e214f3b49a86",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "c31b818659136ed3",
        "name": "Send State",
        "func": "\nnode.status({ \"fill\": \"blue\", \"text\": msg.machine.state });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3350,
        "y": 2140,
        "wires": [
            [
                "c0e11ef2525e6c66"
            ]
        ]
    },
    {
        "id": "5bcf27d66dfa06c8",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c31b818659136ed3",
        "name": "5 - Suspend",
        "props": [
            {
                "p": "machine.state",
                "v": "5",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3030,
        "y": 1960,
        "wires": [
            [
                "4ef1e214f3b49a86"
            ]
        ]
    },
    {
        "id": "e53d139e189a8680",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c31b818659136ed3",
        "name": "6 - Execute",
        "props": [
            {
                "p": "machine.state",
                "v": "6",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3030,
        "y": 2000,
        "wires": [
            [
                "4ef1e214f3b49a86"
            ]
        ]
    },
    {
        "id": "5d8acdd46de83014",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c31b818659136ed3",
        "name": "11 - Held",
        "props": [
            {
                "p": "machine.state",
                "v": "11",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3020,
        "y": 2200,
        "wires": [
            [
                "4ef1e214f3b49a86"
            ]
        ]
    },
    {
        "id": "f4a32fae653f45e0",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c31b818659136ed3",
        "name": "9 - Aborted",
        "props": [
            {
                "p": "machine.state",
                "v": "9",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3020,
        "y": 2120,
        "wires": [
            [
                "4ef1e214f3b49a86"
            ]
        ]
    },
    {
        "id": "56cea5fb3b56547c",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c31b818659136ed3",
        "name": "1 - Clearing",
        "props": [
            {
                "p": "machine.state",
                "v": "1",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3030,
        "y": 1800,
        "wires": [
            [
                "4ef1e214f3b49a86"
            ]
        ]
    },
    {
        "id": "51349c793fee797a",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c31b818659136ed3",
        "name": "3 - Starting",
        "props": [
            {
                "p": "machine.state",
                "v": "3",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3020,
        "y": 1880,
        "wires": [
            [
                "4ef1e214f3b49a86"
            ]
        ]
    },
    {
        "id": "15dbccdabdfd10d7",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c31b818659136ed3",
        "name": "4 - Idle",
        "props": [
            {
                "p": "machine.state",
                "v": "4",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3010,
        "y": 1920,
        "wires": [
            [
                "4ef1e214f3b49a86"
            ]
        ]
    },
    {
        "id": "f3742f0bdeb01c68",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c31b818659136ed3",
        "name": "7 - Stopping",
        "props": [
            {
                "p": "machine.state",
                "v": "7",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3030,
        "y": 2040,
        "wires": [
            [
                "4ef1e214f3b49a86"
            ]
        ]
    },
    {
        "id": "d09079f0e9d0c66f",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c31b818659136ed3",
        "name": "8 - Aborting",
        "props": [
            {
                "p": "machine.state",
                "v": "8",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3030,
        "y": 2080,
        "wires": [
            [
                "4ef1e214f3b49a86"
            ]
        ]
    },
    {
        "id": "d05cc842f9caa87d",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c31b818659136ed3",
        "name": "10 - Holding",
        "props": [
            {
                "p": "machine.state",
                "v": "10",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3030,
        "y": 2160,
        "wires": [
            [
                "4ef1e214f3b49a86"
            ]
        ]
    },
    {
        "id": "b313ceaa7c57be09",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c31b818659136ed3",
        "name": "12 - Unholding",
        "props": [
            {
                "p": "machine.state",
                "v": "12",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3040,
        "y": 2240,
        "wires": [
            [
                "4ef1e214f3b49a86"
            ]
        ]
    },
    {
        "id": "b7b93733d1af124e",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c31b818659136ed3",
        "name": "13 - Suspending",
        "props": [
            {
                "p": "machine.state",
                "v": "13",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3040,
        "y": 2280,
        "wires": [
            [
                "4ef1e214f3b49a86"
            ]
        ]
    },
    {
        "id": "ecd184f71236e207",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c31b818659136ed3",
        "name": "14 - Unsuspending",
        "props": [
            {
                "p": "machine.state",
                "v": "14",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3050,
        "y": 2320,
        "wires": [
            [
                "4ef1e214f3b49a86"
            ]
        ]
    },
    {
        "id": "6cccd65d7c970e45",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c31b818659136ed3",
        "name": "15 - Reseting",
        "props": [
            {
                "p": "machine.state",
                "v": "15",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3030,
        "y": 2360,
        "wires": [
            [
                "4ef1e214f3b49a86"
            ]
        ]
    },
    {
        "id": "ac67c16a51163b09",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c31b818659136ed3",
        "name": "17 - Complete",
        "props": [
            {
                "p": "machine.state",
                "v": "17",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3030,
        "y": 2440,
        "wires": [
            [
                "4ef1e214f3b49a86"
            ]
        ]
    },
    {
        "id": "54334d96f4edcc15",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c31b818659136ed3",
        "name": "16 - Completing",
        "props": [
            {
                "p": "machine.state",
                "v": "16",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3040,
        "y": 2400,
        "wires": [
            [
                "4ef1e214f3b49a86"
            ]
        ]
    },
    {
        "id": "a57dd2c44a0261a8",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "7c6328ce8a12a605",
        "name": "1",
        "props": [
            {
                "p": "machine.mode",
                "v": "1",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2890,
        "y": 1640,
        "wires": [
            [
                "05dfec7c5bfed67f"
            ]
        ]
    },
    {
        "id": "05dfec7c5bfed67f",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "7c6328ce8a12a605",
        "name": "Send Mode",
        "func": "//msg.machine ={}\n//msg.machine.mode = 1\nnode.status({ \"fill\": \"blue\", \"text\": msg.machine.mode });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3350,
        "y": 1660,
        "wires": [
            [
                "c0e11ef2525e6c66"
            ]
        ]
    },
    {
        "id": "5adb327a404f24dc",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "7c6328ce8a12a605",
        "name": "2",
        "props": [
            {
                "p": "machine.mode",
                "v": "2",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2890,
        "y": 1680,
        "wires": [
            [
                "05dfec7c5bfed67f"
            ]
        ]
    },
    {
        "id": "427d7aa80895c1c8",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c918d0253a529801",
        "name": "diProductionCounter",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2900,
        "y": 2820,
        "wires": [
            [
                "75b0552c3aadacae"
            ]
        ]
    },
    {
        "id": "bb27108b21a66b63",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "c918d0253a529801",
        "name": "Acumulador Produção SIMULAÇÃO",
        "func": "// simulacao de producao\n\nlet config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\n\n\n\n\nlet sm_atual = flow.get(\"sm_atual\");\nlet dados_plc = global.get(name_var_global);\n\n\n\n\nif ( sm_atual.state == 6 && sm_atual.mode ==2) {\n    dados_plc.diProductionCounter = Number(dados_plc.diProductionCounter) + Number(dados_plc.rActualSpeed)/3600 || 0\n\n}\n\nmsg.payload = msg.payload\nmsg.machine = {}\nmsg.machine.diProductionCounter = Number(dados_plc.diProductionCounter).toFixed(0)\n\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 2820,
        "wires": [
            [
                "c0e11ef2525e6c66"
            ]
        ]
    },
    {
        "id": "40a6816805a3faef",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "c918d0253a529801",
        "name": "function 232",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3130,
        "y": 2880,
        "wires": [
            [
                "75b0552c3aadacae"
            ]
        ]
    },
    {
        "id": "75b0552c3aadacae",
        "type": "delay",
        "z": "10ef8279905934fb",
        "g": "c918d0253a529801",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3160,
        "y": 2820,
        "wires": [
            [
                "bb27108b21a66b63",
                "40a6816805a3faef"
            ]
        ]
    },
    {
        "id": "851d0a19a0d80c61",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "c918d0253a529801",
        "name": "Zera Production Counter",
        "func": "msg.payload = msg.payload\nmsg.machine = {}\nmsg.machine.diProductionCounter = 0\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3370,
        "y": 2960,
        "wires": [
            [
                "c0e11ef2525e6c66"
            ]
        ]
    },
    {
        "id": "258b3d055e651cdb",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "7e2c719b5ad05ff9",
        "name": "diCounterReject_r1",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2910,
        "y": 3080,
        "wires": [
            [
                "c4fec526d95fcca9"
            ]
        ]
    },
    {
        "id": "baa709204faa1d54",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "7e2c719b5ad05ff9",
        "name": "Aculador rejeito R1 - SIMULACAO",
        "func": "// simulacao de producao\nlet config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\n\n\n\nlet sm_atual = flow.get(\"sm_atual\");\nlet dados_plc = global.get(name_var_global);\n//node.warn(dados_plc.diCounterReject_r1);\nif (sm_atual.state == 6 && sm_atual.mode == 2) {\n    dados_plc.diCounterReject_r1 = Number(dados_plc.diCounterReject_r1) + 1 || 0\n\n}\n\n\n\n\n\n\n\n\n\n\nmsg.machine = {}\nmsg.machine.diCounterReject_r1 = dados_plc.diCounterReject_r1\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3360,
        "y": 3080,
        "wires": [
            [
                "c0e11ef2525e6c66"
            ]
        ]
    },
    {
        "id": "df6ee32a1d623560",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "7e2c719b5ad05ff9",
        "name": "Random rProduced",
        "func": "msg.payload = msg.payload\nmsg.machine = {}\nmsg.machine.diCounterReject_r1 = 0\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3330,
        "y": 3200,
        "wires": [
            [
                "c0e11ef2525e6c66"
            ]
        ]
    },
    {
        "id": "c4fec526d95fcca9",
        "type": "delay",
        "z": "10ef8279905934fb",
        "g": "7e2c719b5ad05ff9",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "5",
        "randomLast": "20",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3120,
        "y": 3080,
        "wires": [
            [
                "baa709204faa1d54",
                "38853eae2b2c811f"
            ]
        ]
    },
    {
        "id": "38853eae2b2c811f",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "7e2c719b5ad05ff9",
        "name": "function 233",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3120,
        "y": 3140,
        "wires": [
            [
                "c4fec526d95fcca9"
            ]
        ]
    },
    {
        "id": "ca14ca76a638213e",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "fb1fbc10def0094a",
        "name": "iActualRecipe",
        "props": [],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2900,
        "y": 3540,
        "wires": [
            [
                "b5842303dc6c651c"
            ]
        ]
    },
    {
        "id": "b5842303dc6c651c",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "fb1fbc10def0094a",
        "name": "iActualRecipe",
        "func": "msg.machine = {}\nmsg.machine.iActualRecipe = 1\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3300,
        "y": 3540,
        "wires": [
            [
                "c0e11ef2525e6c66"
            ]
        ]
    },
    {
        "id": "5c6b38406fca3d33",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "f0d5cdbe1dd8f78d",
        "name": "diCounterReject_r2",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2910,
        "y": 3300,
        "wires": [
            [
                "713238d37e61e2b0"
            ]
        ]
    },
    {
        "id": "ae105990f804fade",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "f0d5cdbe1dd8f78d",
        "name": "Aculador rejeito R1 - SIMULACAO",
        "func": "// simulacao de producao\n\nlet config = flow.get(\"config\");\nlet name_var_global = \"plc\" + config.machine_name\n\n\n\nlet sm_atual = flow.get(\"sm_atual\");\nlet dados_plc = global.get(name_var_global);\n//node.warn(dados_plc.diCounterReject_r2);\nif (sm_atual.state == 6 && sm_atual.mode == 2) {\n    dados_plc.diCounterReject_r2 = Number(dados_plc.diCounterReject_r2) + 1 || 0\n\n}\n\n\n\n\n\n\n\n\n\n\nmsg.machine = {}\nmsg.machine.diCounterReject_r2 = dados_plc.diCounterReject_r2\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3360,
        "y": 3300,
        "wires": [
            [
                "c0e11ef2525e6c66"
            ]
        ]
    },
    {
        "id": "50110d7dee98c2c9",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "f0d5cdbe1dd8f78d",
        "name": "Random rProduced",
        "func": "msg.payload = msg.payload\nmsg.machine = {}\nmsg.machine.diCounterReject_r2 = 0\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3330,
        "y": 3420,
        "wires": [
            [
                "c0e11ef2525e6c66"
            ]
        ]
    },
    {
        "id": "713238d37e61e2b0",
        "type": "delay",
        "z": "10ef8279905934fb",
        "g": "f0d5cdbe1dd8f78d",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "5",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3120,
        "y": 3300,
        "wires": [
            [
                "ae105990f804fade",
                "5e59cee2b5db616a"
            ]
        ]
    },
    {
        "id": "5e59cee2b5db616a",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "f0d5cdbe1dd8f78d",
        "name": "function 234",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3120,
        "y": 3360,
        "wires": [
            [
                "713238d37e61e2b0"
            ]
        ]
    },
    {
        "id": "816ce7e77b0345c3",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "bc3b7c66ae6a3b74",
        "name": "programada",
        "func": "msg.machine = {}\nmsg.machine.programada = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2650,
        "y": 2760,
        "wires": [
            [
                "c0e11ef2525e6c66"
            ]
        ]
    },
    {
        "id": "18bf34b2f5aa31a5",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "0710eece5ed4a4f0",
        "name": "Random rProduced",
        "func": "msg.machine = {}\nmsg.machine.strRecipeName = \"Agua com gás\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3350,
        "y": 3660,
        "wires": [
            [
                "c0e11ef2525e6c66"
            ]
        ]
    },
    {
        "id": "8b6ac2950d537884",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "0710eece5ed4a4f0",
        "name": "strRecipeName",
        "props": [],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2910,
        "y": 3660,
        "wires": [
            [
                "18bf34b2f5aa31a5"
            ]
        ]
    },
    {
        "id": "eed04eb30c58ef0c",
        "type": "debug",
        "z": "10ef8279905934fb",
        "g": "bc3b7c66ae6a3b74",
        "name": "debug 438",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.statechanged_reason",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4520,
        "y": 2920,
        "wires": []
    },
    {
        "id": "c4b72df56c9ba979",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "53cf2fa7ec13b25f",
        "name": "Consulta Lista Paradas",
        "func": "// Itera sobre cada elemento no array \"payload\" do objeto de mensagem\nlet paradas = {\"list\":msg.payload}\n//node.warn(paradas)\nfor (let i = 0; i < paradas.list.length; i++) {\n    // Verifica se a propriedade \"ID\" do elemento atual é igual ao ID da parada desejada\n    //node.warn(paradas.list[i].ID + \" \" + msg.idParada )\n    if (paradas.list[i].ID == msg.machine.id_anotacaoParada) {\n        // Verifica se a propriedade \"Validity\" do elemento atual contém a máquina especificada\n        if (paradas.list[i][\"Validity\"][msg.nameMachine]) {\n            // Cria um objeto \"out\" com informações relevantes e o adiciona ao objeto de mensagem\n            msg.payload ={}\n            msg.payload.out = {\n                \"nameMachine\": msg.nameMachine,\n                \"ID\": msg.machine.id_anotacaoParada,\n                \"Cadastrada\": true,\n                \"Validity\": true,\n                \"Programada\": paradas.list[i].ParadaProgramada,\n                \"reason\": paradas.list[i].Reason\n            }\n            // Retorna o objeto de mensagem com o objeto \"out\" adicionado\n            return msg\n            // Se a propriedade \"Validity\" não contém a máquina especificada\n        } else if (!msg.payload[i][\"Validity\"][msg.nameMachine]) {\n            // Cria um objeto \"out\" com informações relevantes e o adiciona ao objeto de mensagem\n            msg.payload = {}\n            msg.payload.out = {\n                \"nameMachine\": msg.nameMachine,\n                \"ID\": msg.machine.id_anotacaoParada,\n                \"Cadastrada\": true,\n                \"Validity\": false\n            }\n            // Retorna o objeto de mensagem com o objeto \"out\" adicionado\n            return msg\n        }\n        return\n    }\n}\n\n// Se nenhum elemento no array \"payload\" contém o ID da parada desejada\n// Cria um objeto \"out\" com informações relevantes e o adiciona ao objeto de mensagem\nmsg.payload ={}\nmsg.payload.out = {\n    \"nameMachine\": msg.nameMachine,\n    \"ID\": msg.machine.id_anotacaoParada,\n    \"Cadastrada\": false\n}\n\n// Retorna o objeto de mensagem com o objeto \"out\" adicionado\nreturn msg\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2700,
        "wires": [
            [
                "d8e0d017538cd9dd",
                "0236e42cdd8dc2b3"
            ]
        ]
    },
    {
        "id": "ab8eeadad62249bf",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "53cf2fa7ec13b25f",
        "name": "id_anotacaoParada",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 270,
        "y": 2700,
        "wires": [
            [
                "25c98fed1fdeecb5"
            ]
        ]
    },
    {
        "id": "12f94fb39bfcc6e3",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "53cf2fa7ec13b25f",
        "name": "Gera codigo parada aleatorio",
        "func": "let config = flow.get(\"config\");\n\nmsg.machine = {}\n//msg.machine.id_anotacaoParada = 99\nmsg.machine.id_anotacaoParada = msg.payload[Math.floor(Math.random() * msg.payload.length)].ID\n\nmsg.nameMachine = config.machine_name\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 2700,
        "wires": [
            [
                "c4b72df56c9ba979"
            ]
        ]
    },
    {
        "id": "d497ab19a52767f8",
        "type": "file in",
        "z": "10ef8279905934fb",
        "g": "53cf2fa7ec13b25f",
        "name": "Read file Paradas",
        "filename": "./ZIA/paradas.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 830,
        "y": 2700,
        "wires": [
            [
                "b1ed8277842d63da"
            ]
        ]
    },
    {
        "id": "b1ed8277842d63da",
        "type": "json",
        "z": "10ef8279905934fb",
        "g": "53cf2fa7ec13b25f",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1010,
        "y": 2700,
        "wires": [
            [
                "12f94fb39bfcc6e3"
            ]
        ]
    },
    {
        "id": "76636f85b6b84088",
        "type": "comment",
        "z": "10ef8279905934fb",
        "g": "53cf2fa7ec13b25f",
        "name": "Lê lista de paradas",
        "info": "",
        "x": 270,
        "y": 2600,
        "wires": []
    },
    {
        "id": "25c98fed1fdeecb5",
        "type": "delay",
        "z": "10ef8279905934fb",
        "g": "53cf2fa7ec13b25f",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "10",
        "randomLast": "15",
        "randomUnits": "minutes",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 560,
        "y": 2700,
        "wires": [
            [
                "d497ab19a52767f8"
            ]
        ]
    },
    {
        "id": "25c6e998801184cc",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "53cf2fa7ec13b25f",
        "name": "function 235",
        "func": "let msg1 ={}\nlet msg2 ={}\nlet msg3 ={}\nlet msg4 ={}\nif (msg.payload.out.Validity && msg.payload.out.Cadastrada) {\n    \n    msg1.payload = msg.payload.out.ID\n    msg2.payload = msg.payload.out.reason\n    msg3.payload = msg.payload.out.Programada\n    msg4.machine ={}\n    msg4.machine.state = 2\n    return [msg1,msg2,msg3,msg4]\n}\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 2700,
        "wires": [
            [
                "404cf849585cfce0"
            ],
            [
                "33c033e7803825e7"
            ],
            [
                "816ce7e77b0345c3"
            ],
            [
                "4ef1e214f3b49a86",
                "bc6582c007559cad"
            ]
        ]
    },
    {
        "id": "d8e0d017538cd9dd",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "53cf2fa7ec13b25f",
        "name": "Only If MODE=2 STATE=6",
        "func": "let sm_atual = flow.get(\"sm_atual\");\n//node.warn(sm_atual);\nif (sm_atual.state == 6 && sm_atual.mode == 2) {\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 2700,
        "wires": [
            [
                "25c6e998801184cc"
            ]
        ]
    },
    {
        "id": "a34363e06bd9db21",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "53cf2fa7ec13b25f",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 410,
        "y": 2800,
        "wires": [
            [
                "d497ab19a52767f8"
            ]
        ]
    },
    {
        "id": "78c2aa06f412474f",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c6f222c616b4cf8b",
        "name": "id_alm_maquina",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1740,
        "wires": [
            [
                "18e7e6d2cb925a6f"
            ]
        ]
    },
    {
        "id": "a805fd575e376ddb",
        "type": "file in",
        "z": "10ef8279905934fb",
        "g": "c6f222c616b4cf8b",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 880,
        "y": 1740,
        "wires": [
            [
                "c3dd91ab4d9e1202"
            ]
        ]
    },
    {
        "id": "c3dd91ab4d9e1202",
        "type": "json",
        "z": "10ef8279905934fb",
        "g": "c6f222c616b4cf8b",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1050,
        "y": 1740,
        "wires": [
            [
                "32c56db91c24321e"
            ]
        ]
    },
    {
        "id": "32c56db91c24321e",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "c6f222c616b4cf8b",
        "name": "Gera codigo parada aleatorio",
        "func": "\nlet config = flow.get(\"config\");\nmsg.machine = {}\nmsg.machine.idAlarme = msg.payload[Math.floor(Math.random() * msg.payload.length)].ID\n\nmsg.nameMachine = config.machine_name\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 1740,
        "wires": [
            [
                "eed6a9d390d34443"
            ]
        ]
    },
    {
        "id": "eed6a9d390d34443",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "c6f222c616b4cf8b",
        "name": "Consulta Lista Paradas",
        "func": "// Itera sobre cada elemento no array \"payload\" do objeto de mensagem\nlet alarmes = { \"list\": msg.payload }\n//node.warn(paradas)\nfor (let i = 0; i < alarmes.list.length; i++) {\n    // Verifica se a propriedade \"ID\" do elemento atual é igual ao ID da parada desejada\n    //node.warn(paradas.list[i].ID + \" \" + msg.idParada )\n    if (alarmes.list[i].ID == msg.machine.idAlarme) {\n        msg.payload = {}\n        msg.payload.out = {\n            \"TimeStamp\": new Date(),\n            \"nameMachine\": msg.nameMachine,\n            \"ID\": msg.machine.idAlarme,\n            \"reason\": alarmes.list[i].strAlarme,\n            \"Programada\" : false,\n            \"cmd\": alarmes.list[i].cmd\n            //alarmes : alarmes\n        }\n        return msg\n    }\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 1740,
        "wires": [
            [
                "31a429734a227401"
            ]
        ]
    },
    {
        "id": "80547e73ed54cdce",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "c6f222c616b4cf8b",
        "name": "function 236",
        "func": "let msg1 ={}\nlet msg2 ={}\nlet msg3 ={}\nlet msg4 ={}\n\nmsg1.payload = msg.payload.out.ID\nmsg2.payload = msg.payload.out.reason\nmsg3.payload = msg.payload.out.Programada\nmsg4.machine = {}\nmsg4.machine.state = msg.payload.out.cmd\n\nreturn [msg1,msg2,msg3,msg4]\n\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 1740,
        "wires": [
            [
                "404cf849585cfce0"
            ],
            [
                "33c033e7803825e7"
            ],
            [
                "816ce7e77b0345c3"
            ],
            [
                "4ef1e214f3b49a86",
                "bc6582c007559cad"
            ]
        ]
    },
    {
        "id": "18e7e6d2cb925a6f",
        "type": "delay",
        "z": "10ef8279905934fb",
        "g": "c6f222c616b4cf8b",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "10",
        "randomLast": "15",
        "randomUnits": "minutes",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 1740,
        "wires": [
            [
                "dd80cacc53da1052"
            ]
        ]
    },
    {
        "id": "31a429734a227401",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "c6f222c616b4cf8b",
        "name": "Only If MODE=2 STATE=6",
        "func": "let sm_atual = flow.get(\"sm_atual\");\n//node.warn(sm_atual);\nif (sm_atual.state == 6 && sm_atual.mode == 2) {\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 1740,
        "wires": [
            [
                "80547e73ed54cdce",
                "d971a286d7a2e63b"
            ]
        ]
    },
    {
        "id": "2f14b3875ecc494f",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c6f222c616b4cf8b",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 1840,
        "wires": [
            [
                "dd80cacc53da1052"
            ]
        ]
    },
    {
        "id": "dd80cacc53da1052",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "c6f222c616b4cf8b",
        "name": "function 237",
        "func": "let config = flow.get(\"config\");\n\nmsg.filename = \".//ZIA//alarmes_\" + config.machine_name +\".json\"\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1740,
        "wires": [
            [
                "a805fd575e376ddb"
            ]
        ]
    },
    {
        "id": "bc6582c007559cad",
        "type": "delay",
        "z": "10ef8279905934fb",
        "g": "e4a33f9ec8c93a80",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "2",
        "randomUnits": "minutes",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1440,
        "y": 2180,
        "wires": [
            [
                "601e1d2d5f2a8b87"
            ]
        ]
    },
    {
        "id": "601e1d2d5f2a8b87",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "e4a33f9ec8c93a80",
        "name": "Only If MODE !=2 E STATE !=6",
        "func": "let sm_atual = flow.get(\"sm_atual\");\n//node.warn(sm_atual);\nif (sm_atual.state != 6 && sm_atual.mode == 2) {\n    msg.machine = {}\n    msg.machine.state = 6\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 2180,
        "wires": [
            [
                "f8c036e856646dd5"
            ]
        ]
    },
    {
        "id": "f8c036e856646dd5",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "e4a33f9ec8c93a80",
        "name": "function 238",
        "func": "msg.machine = {}\nmsg.machine.state = 6\n\nreturn msg\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 2180,
        "wires": [
            [
                "4ef1e214f3b49a86",
                "25c98fed1fdeecb5",
                "18e7e6d2cb925a6f"
            ]
        ]
    },
    {
        "id": "a145af23432a30de",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "e4a33f9ec8c93a80",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1090,
        "y": 2200,
        "wires": [
            [
                "bc6582c007559cad"
            ]
        ]
    },
    {
        "id": "f02b42b84b71a53f",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "e4a33f9ec8c93a80",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1190,
        "y": 2280,
        "wires": [
            [
                "601e1d2d5f2a8b87"
            ]
        ]
    },
    {
        "id": "d971a286d7a2e63b",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "b18569625feb3411",
        "name": "Alarme",
        "func": "let regAlm = msg.payload.out\nmsg.payload = {}\nlet config = flow.get(\"config\");\nlet dados_alm = {\n    ...msg.payload,\n    TimeStamp: regAlm.TimeStamp,\n    nameMachine: regAlm.nameMachine,\n    ID: regAlm.ID,\n    reason: regAlm.reason\n};\n\nconst d = new Date();\nlet minutes = d.getMinutes();\nlet agora = new Date()\n\nmsg.payload = {\n    \"machine_event\": {\n        \"timestamp(1i)\": agora.getFullYear().toString(),\n        \"timestamp(2i)\": (agora.getMonth() + 1).toString(),\n        \"timestamp(3i)\": agora.getDate().toString(),\n        \"timestamp(4i)\": agora.getHours().toString(),\n        \"timestamp(5i)\": agora.getMinutes().toString(),\n        \"timestamp(6i)\": agora.getSeconds().toString(),\n        \"event_type_id\": 5,\n        \"payload\": dados_alm\n    }\n}\n\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1140,
        "wires": [
            [
                "54bfdd686966f390"
            ]
        ]
    },
    {
        "id": "a69c0806e7246bf1",
        "type": "http request",
        "z": "10ef8279905934fb",
        "g": "b18569625feb3411",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1630,
        "y": 1140,
        "wires": [
            [
                "f32e51b07ad360e7"
            ]
        ]
    },
    {
        "id": "f32e51b07ad360e7",
        "type": "debug",
        "z": "10ef8279905934fb",
        "g": "b18569625feb3411",
        "name": "debug 440",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 1830,
        "y": 1140,
        "wires": []
    },
    {
        "id": "54bfdd686966f390",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "b18569625feb3411",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1140,
        "wires": [
            [
                "a69c0806e7246bf1"
            ]
        ]
    },
    {
        "id": "d509d02e2f9f575f",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "4f0c9cc18b4583a5",
        "name": "strBottle",
        "props": [],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2880,
        "y": 3820,
        "wires": [
            [
                "4078e3f1cfddced6"
            ]
        ]
    },
    {
        "id": "4078e3f1cfddced6",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "4f0c9cc18b4583a5",
        "name": "Random rProduced",
        "func": "msg.machine = {}\nmsg.machine.strBottle = \"1000ml-PET\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3350,
        "y": 3820,
        "wires": [
            [
                "c0e11ef2525e6c66"
            ]
        ]
    },
    {
        "id": "cf55baf94df49d42",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "b0a577cc84ae5ed6",
        "name": "strCap",
        "props": [],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2880,
        "y": 3960,
        "wires": [
            [
                "a220fa37d9e956d1"
            ]
        ]
    },
    {
        "id": "a220fa37d9e956d1",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "b0a577cc84ae5ed6",
        "name": "Random rProduced",
        "func": "msg.machine = {}\nmsg.machine.strCap = \"8251-1G\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3350,
        "y": 3960,
        "wires": [
            [
                "c0e11ef2525e6c66"
            ]
        ]
    },
    {
        "id": "e251751c1aa5d1f5",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "c0fec9d8cc7cb04c",
        "name": "Actual Speed",
        "func": "msg.machine = {}\nmsg.machine.rSetSpeed = 14000;\nmsg.payload = msg.machine.rActualSpeed\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3430,
        "y": 2680,
        "wires": [
            [
                "c0e11ef2525e6c66"
            ]
        ]
    },
    {
        "id": "8689b9ca8bf48afd",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c0fec9d8cc7cb04c",
        "name": "rNominalSpeed",
        "props": [],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3050,
        "y": 2580,
        "wires": [
            [
                "5af5e1d44eac2aea"
            ]
        ]
    },
    {
        "id": "5f960507820d92a2",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c0fec9d8cc7cb04c",
        "name": "rActualSpeed",
        "props": [],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3040,
        "y": 2620,
        "wires": [
            [
                "e952819b9664f0f4"
            ]
        ]
    },
    {
        "id": "5af5e1d44eac2aea",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "c0fec9d8cc7cb04c",
        "name": "Nominal Speed",
        "func": "msg.machine = {}\nmsg.machine.rNominalSpeed = 15000\nmsg.payload = msg.machine.rNominalSpeed\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 2580,
        "wires": [
            [
                "c0e11ef2525e6c66"
            ]
        ]
    },
    {
        "id": "e952819b9664f0f4",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "c0fec9d8cc7cb04c",
        "name": "Actual Speed",
        "func": "msg.machine = {}\nmsg.machine.rActualSpeed = (13000 + Math.random()*50).toFixed(0);\nmsg.payload = msg.machine.rActualSpeed\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3430,
        "y": 2620,
        "wires": [
            [
                "c0e11ef2525e6c66"
            ]
        ]
    },
    {
        "id": "1933f6aa26b0c039",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "c0fec9d8cc7cb04c",
        "name": "rSetSpeed",
        "props": [],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3230,
        "y": 2660,
        "wires": [
            [
                "e251751c1aa5d1f5"
            ]
        ]
    },
    {
        "id": "e45e32e2f75486fd",
        "type": "inject",
        "z": "10ef8279905934fb",
        "g": "0ab2118cb8d9b8b8",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 530,
        "y": 3240,
        "wires": [
            [
                "53e621514404c166"
            ]
        ]
    },
    {
        "id": "53e621514404c166",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "0ab2118cb8d9b8b8",
        "name": "function 240",
        "func": "\nlet config = flow.get(\"config\");\nlet envaseCC = flow.get(\"envaseCC\") || { \"timeStamp\": \"2023-05-20T15:42:01.450Z\", \"valv\": 0, \"tDuracao\": \"0\", \"peso\": \"0\" }\nif (Number.isInteger(envaseCC.valv)) {\n    //\n} else {\n    envaseCC.valv =0\n}\n\nif (envaseCC.valv >= 20) {\n    envaseCC.valv =0\n}\nenvaseCC.num_valv= 20\nenvaseCC.equip = config.machine_id\nenvaseCC.timeStamp = new Date()\nenvaseCC.valv = Number(envaseCC.valv) + 1\nenvaseCC.tDuracao = (5000 + Math.random() * 1000).toFixed(0);\nenvaseCC.peso = (2000 + Math.random() * 10).toFixed(0);\nenvaseCC.lote = 12345678\nenvaseCC.produto = \"Bravo234\"\nlet agora = new Date()\nmsg.payload = { \n    \"authenticity_token\": \"L3uhfD4yxArDD6++xrFmFX9LLKfX5PyMstpcUL0zi6SRrHAzTqfBCj1iKfYp4o6GLK9emMZYiAmxF1T9C7BQ==\",\n    \"machine_event\": { \n        \"timestamp(1i)\": agora.getFullYear().toString(),\n        \"timestamp(2i)\": (agora.getMonth()+1).toString(),\n        \"timestamp(3i)\": agora.getDate().toString(),\n        \"timestamp(4i)\": agora.getHours().toString(),\n        \"timestamp(5i)\": agora.getMinutes().toString(),\n     \"event_type_id\": 7,\n            \"payload\": envaseCC\n       } \n    }\nflow.set(\"envaseCC\", envaseCC);\n\nlet sm_atual = flow.get(\"sm_atual\");\n\nif (sm_atual.state ==6 && sm_atual.mode==2) {\n    return msg;\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 3240,
        "wires": [
            [
                "65c68a1ba3a0ab43"
            ]
        ]
    },
    {
        "id": "c6b837ed82e3852d",
        "type": "http request",
        "z": "10ef8279905934fb",
        "g": "0ab2118cb8d9b8b8",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1650,
        "y": 3240,
        "wires": [
            [
                "ceaa6c62c7992e73"
            ]
        ]
    },
    {
        "id": "ceaa6c62c7992e73",
        "type": "debug",
        "z": "10ef8279905934fb",
        "g": "0ab2118cb8d9b8b8",
        "name": "debug 445",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 1910,
        "y": 3240,
        "wires": []
    },
    {
        "id": "65c68a1ba3a0ab43",
        "type": "function",
        "z": "10ef8279905934fb",
        "g": "0ab2118cb8d9b8b8",
        "name": "Config Machine",
        "func": "let config = flow.get(\"config\");\nmsg.config = config\nif (msg.config.send == true) {\n    msg.url = msg.config.url_machine\n    msg.headers = {};\n    msg.headers['Authorization'] = msg.config.token_machine\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 3240,
        "wires": [
            [
                "c6b837ed82e3852d"
            ]
        ]
    }
]